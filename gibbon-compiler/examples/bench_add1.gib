#lang gibbon

(data Tree
      [Leaf Int]
      [Node Tree Tree])

(define (buildtree [n : Int]) : Tree
  (if (= n 0)
      (Leaf 1)
      (Node (buildtree (- n 1))
            (buildtree (- n 1)))))

(define (sumtree [tr : Tree]) : Int
  (case tr
    [(Leaf n) n]
    [(Node x y)
     (let ([sumx : Int (sumtree x)])
       (let ([sumy : Int (sumtree y)])
         (+ sumx sumy)))]))

(define (add1 [tr : Tree]) : Tree
  (case tr
    [(Leaf n) (Leaf (+ n 1))]
    [(Node x y) (Node (add1 x) (add1 y))]))

(let ([tr0 : Tree (buildtree (size-param))])
  (let ([tr1 : Tree (iterate (add1 tr0))])
    (sumtree tr1)))
