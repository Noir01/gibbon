{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False}}
mkList :: Int -> List
          {locvars [LRM {lrmLoc = SoA "loc_140" [((Cons, 0), "loc_141")] ,
                         lrmReg = SoAR "r_141"  [((Cons, 0), "r_142")] ,
                         lrmMode = Output}],
           effs:  [],
           locrets:  [],
           parallel:  False}
mkList length_14_82_117 =
    letloc (Single "loc_175") = ((Single "loc_140") + 1) in
    letloc (Single "loc_176") = ((Single "loc_141") + 8) in
    let fltIf_97_118 :: Bool = <=(length_14_82_117, 0) in
    if fltIf_97_118
    then (Nil (SoA "loc_140" [((Cons, 0), "loc_141")]))
    else let fltAppE_98_119 :: Int = length_14_82_117 - 1 in
         let rst_15_83_120 :: (Packed List (SoA "loc_175" [((Cons, 0), "loc_176")])) = (mkList [(SoA "loc_175" [((Cons, 0), "loc_176")])] fltAppE_98_119) in
         (Cons (SoA "loc_140" [((Cons, 0), "loc_141")]) length_14_82_117 rst_15_83_120)



add1 :: List -> List
        {locvars [LRM {lrmLoc = SoA "loc_150" [((Cons, 0), "loc_152")] ,
                       lrmReg = SoAR "r_152" [((Cons, 0), "r_154")] ,
                       lrmMode = Input},
                  LRM {lrmLoc = SoA "loc_151" [((Cons, 0), "loc_153")] ,
                       lrmReg = SoAR "r_153" [((Cons, 0), "r_155")] ,
                       lrmMode = Output}],
         effs:  [],
         locrets:  [],
         parallel:  False}
add1 lst_16_94_131 =
    letloc (Single "loc_214") = ((Single "loc_151") + 1) in
    letloc (Single "loc_215") = ((Single "loc_214") + 8) in
    case lst_16_94_131 of
        Nil ->
            (Nil (Single "loc_151"))
        Cons i_17_95_132::(Single "case_209") rst_18_96_133::(Single "case_210") ->
            let fltPkd_99_134 :: (Packed List (Single "loc_215")) = (add1 [(Single "case_210"),(Single "loc_215")] rst_18_96_133) in
            (Cons (Single "loc_151") i_17_95_132 fltPkd_99_134)
