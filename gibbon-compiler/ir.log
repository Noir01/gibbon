 ! Responding to env Var: GIBBON_DEBUG=4
 ! We set DEBUG based on command-line verbose arg: 4
================================================================================

desugaring module: AddImport

- imports: ["Addone","Addtwo","AddTree"]

- aliases: fromList [(Var "Addone",Var "On"),(Var "Addtwo",Var "Tw"),(Var "AddTree",Var "AddTree")]

================================================================================

desugaring module: Addone

- imports: ["AddTree"]

- aliases: fromList [(Var "AddTree",Var "AddTree")]

================================================================================

desugaring module: AddTree

- imports: []

- aliases: fromList []

================================================================================

desugaring module: Addtwo

- imports: ["AddTree"]

- aliases: fromList [(Var "AddTree",Var "AddTree")]

 [compiler] pipeline starting, parsed program: 
================================================================================
Prog {ddefs = [(AddTree.Tree,
                DDef {tyName = "AddTree.Tree",
                      tyArgs = [],
                      dataCons = [("Leaf", [(False, IntTy)]),
                                  ("Node",
                                   [(False, PackedTy "AddTree.Tree" []),
                                    (False, PackedTy "AddTree.Tree" [])])]})],
      fundefs = [(Addone.add,
                  FunDef {funName = "Addone.add",
                          funArgs = [t],
                          funTy = ForAll []
                                         (ArrowTy [PackedTy "AddTree.Tree" []]
                                                  (PackedTy "AddTree.Tree" [])),
                          funBody = CaseE (VarE "t")
                                          [("Leaf",
                                            [(x, MetaTv $2)],
                                            DataConE (MetaTv $1)
                                                     "Leaf"
                                                     [PrimAppE AddP [VarE "x",LitE 1]]),
                                           ("Node",
                                            [(x1, MetaTv $4),(x2, MetaTv $5)],
                                            DataConE (MetaTv $3)
                                                     "Node"
                                                     [AppE "Addone.add" [] [VarE "x1"],
                                                      AppE "Addone.add" [] [VarE "x2"]])],
                          funMeta = FunMeta {funRec = NotRec,
                                             funInline = NoInline,
                                             funCanTriggerGC = False,
                                             funOptLayout = NoLayoutOpt,
                                             userConstraintsDataCon = Nothing}}),
                 (Addtwo.add,
                  FunDef {funName = "Addtwo.add",
                          funArgs = [t],
                          funTy = ForAll []
                                         (ArrowTy [PackedTy "AddTree.Tree" []]
                                                  (PackedTy "AddTree.Tree" [])),
                          funBody = CaseE (VarE "t")
                                          [("Leaf",
                                            [(x, MetaTv $2)],
                                            DataConE (MetaTv $1)
                                                     "Leaf"
                                                     [PrimAppE AddP [VarE "x",LitE 2]]),
                                           ("Node",
                                            [(x1, MetaTv $4),(x2, MetaTv $5)],
                                            DataConE (MetaTv $3)
                                                     "Node"
                                                     [AppE "Addtwo.add" [] [VarE "x1"],
                                                      AppE "Addtwo.add" [] [VarE "x2"]])],
                          funMeta = FunMeta {funRec = NotRec,
                                             funInline = NoInline,
                                             funCanTriggerGC = False,
                                             funOptLayout = NoLayoutOpt,
                                             userConstraintsDataCon = Nothing}}),
                 (Addtwo.sub,
                  FunDef {funName = "Addtwo.sub",
                          funArgs = [t],
                          funTy = ForAll []
                                         (ArrowTy [PackedTy "AddTree.Tree" []]
                                                  (PackedTy "AddTree.Tree" [])),
                          funBody = CaseE (VarE "t")
                                          [("Leaf",
                                            [(x, MetaTv $8)],
                                            DataConE (MetaTv $7)
                                                     "Leaf"
                                                     [PrimAppE SubP [VarE "x",LitE 2]]),
                                           ("Node",
                                            [(x1, MetaTv $10),(x2, MetaTv $11)],
                                            DataConE (MetaTv $9)
                                                     "Node"
                                                     [AppE "Addtwo.sub" [] [VarE "x1"],
                                                      AppE "Addtwo.sub" [] [VarE "x2"]])],
                          funMeta = FunMeta {funRec = NotRec,
                                             funInline = NoInline,
                                             funCanTriggerGC = False,
                                             funOptLayout = NoLayoutOpt,
                                             userConstraintsDataCon = Nothing}})],
      mainExp = Just (AppE "Addtwo.add"
                           []
                           [AppE "Addone.add"
                                 []
                                 [DataConE (MetaTv $0)
                                           "Node"
                                           [DataConE (MetaTv $1) "Leaf" [LitE 1],
                                            DataConE (MetaTv $2) "Leaf" [LitE 2]]]],
                      MetaTv $3)}

 [compiler] Running pass, renameModules
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t =
    case t of
        Leaf x::$2 ->
            (Leaf $1 x + 1)
        Node x1::$4 x2::$5 ->
            (Node $3 (Addone_add_5 [] x1) (Addone_add_5 [] x2))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t =
    case t of
        Leaf x::$2 ->
            (Leaf $1 x + 2)
        Node x1::$4 x2::$5 ->
            (Node $3 (Addtwo_add_6 [] x1) (Addtwo_add_6 [] x2))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t =
    case t of
        Leaf x::$8 ->
            (Leaf $7 x - 2)
        Node x1::$10 x2::$11 ->
            (Node $9 (Addtwo_sub_7 [] x1) (Addtwo_sub_7 [] x2))

gibbon_main :: $3
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node $0 (Leaf $1 1) (Leaf $2 2))))

 [compiler] Running pass, freshen
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::$2 ->
            (Leaf $1 x_9 + 1)
        Node x1_10::$4 x2_11::$5 ->
            (Node $3 (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::$2 ->
            (Leaf $1 x_13 + 2)
        Node x1_14::$4 x2_15::$5 ->
            (Node $3 (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::$8 ->
            (Leaf $7 x_17 - 2)
        Node x1_18::$10 x2_19::$11 ->
            (Node $9 (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

gibbon_main :: $3
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node $0 (Leaf $1 1) (Leaf $2 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::Int ->
            (Leaf () x_9 + 1)
        Node x1_10::(Packed AddTree_Tree_4 []) x2_11::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::Int ->
            (Leaf () x_13 + 2)
        Node x1_14::(Packed AddTree_Tree_4 []) x2_15::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::Int ->
            (Leaf () x_17 - 2)
        Node x1_18::(Packed AddTree_Tree_4 []) x2_19::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, bindLambdas
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::Int ->
            (Leaf () x_9 + 1)
        Node x1_10::(Packed AddTree_Tree_4 []) x2_11::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::Int ->
            (Leaf () x_13 + 2)
        Node x1_14::(Packed AddTree_Tree_4 []) x2_15::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::Int ->
            (Leaf () x_17 - 2)
        Node x1_18::(Packed AddTree_Tree_4 []) x2_19::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, monomorphize
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::Int ->
            (Leaf () x_9 + 1)
        Node x1_10::(Packed AddTree_Tree_4 []) x2_11::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::Int ->
            (Leaf () x_13 + 2)
        Node x1_14::(Packed AddTree_Tree_4 []) x2_15::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::Int ->
            (Leaf () x_17 - 2)
        Node x1_18::(Packed AddTree_Tree_4 []) x2_19::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, specLambdas
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::Int ->
            (Leaf () x_9 + 1)
        Node x1_10::(Packed AddTree_Tree_4 []) x2_11::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::Int ->
            (Leaf () x_13 + 2)
        Node x1_14::(Packed AddTree_Tree_4 []) x2_15::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::Int ->
            (Leaf () x_17 - 2)
        Node x1_18::(Packed AddTree_Tree_4 []) x2_19::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, desugarL0
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::() ->
            (Leaf () x_9 + 1)
        Node x1_10::() x2_11::() ->
            (Node () (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::() ->
            (Leaf () x_13 + 2)
        Node x1_14::() x2_15::() ->
            (Node () (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::() ->
            (Leaf () x_17 - 2)
        Node x1_18::() x2_19::() ->
            (Node () (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_AddTree_Tree_4 arg_52 =
    case arg_52 of
        Leaf x_53::() ->
            let y_54 :: Int = x_53 in
            (Leaf () y_54)
        Node x_55::() x_56::() ->
            let y_57 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_55) in
            let y_58 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_56) in
            (Node () y_57 y_58)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_without_ptrs_AddTree_Tree_4 arg_59 =
    case arg_59 of
        Leaf x_60::() ->
            let y_61 :: Int = x_60 in
            (Leaf () y_61)
        Node x_62::() x_63::() ->
            let y_64 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62) in
            let y_65 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63) in
            (Node () y_64 y_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_traverse_AddTree_Tree_4 arg_66 =
    case arg_66 of
        Leaf x_67::() ->
            ()
        Node x_69::() x_70::() ->
            let y_71 :: () = (_traverse_AddTree_Tree_4 [] x_69) in
            let y_72 :: () = (_traverse_AddTree_Tree_4 [] x_70) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_print_AddTree_Tree_4 arg_73 =
    case arg_73 of
        Leaf x_74::() ->
            let wildcard_76 :: () = printsym("(Leaf") in
            let wildcard_78 :: () = printsym(" ") in
            let y_75 :: () = printint(x_74) in
            let wildcard_77 :: () = printsym(")") in
            ()
        Node x_79::() x_80::() ->
            let wildcard_83 :: () = printsym("(Node") in
            let wildcard_86 :: () = printsym(" ") in
            let y_81 :: () = (_print_AddTree_Tree_4 [] x_79) in
            let wildcard_85 :: () = printsym(" ") in
            let y_82 :: () = (_print_AddTree_Tree_4 [] x_80) in
            let wildcard_84 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, floatOutCase
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9::() ->
            (Leaf () x_9 + 1)
        Node x1_10::() x2_11::() ->
            (Node () (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13::() ->
            (Leaf () x_13 + 2)
        Node x1_14::() x2_15::() ->
            (Node () (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17::() ->
            (Leaf () x_17 - 2)
        Node x1_18::() x2_19::() ->
            (Node () (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_AddTree_Tree_4 arg_52 =
    case arg_52 of
        Leaf x_53::() ->
            let y_54 :: Int = x_53 in
            (Leaf () y_54)
        Node x_55::() x_56::() ->
            let y_57 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_55) in
            let y_58 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_56) in
            (Node () y_57 y_58)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_without_ptrs_AddTree_Tree_4 arg_59 =
    case arg_59 of
        Leaf x_60::() ->
            let y_61 :: Int = x_60 in
            (Leaf () y_61)
        Node x_62::() x_63::() ->
            let y_64 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62) in
            let y_65 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63) in
            (Node () y_64 y_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_traverse_AddTree_Tree_4 arg_66 =
    case arg_66 of
        Leaf x_67::() ->
            ()
        Node x_69::() x_70::() ->
            let y_71 :: () = (_traverse_AddTree_Tree_4 [] x_69) in
            let y_72 :: () = (_traverse_AddTree_Tree_4 [] x_70) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_print_AddTree_Tree_4 arg_73 =
    case arg_73 of
        Leaf x_74::() ->
            let wildcard_76 :: () = printsym("(Leaf") in
            let wildcard_78 :: () = printsym(" ") in
            let y_75 :: () = printint(x_74) in
            let wildcard_77 :: () = printsym(")") in
            ()
        Node x_79::() x_80::() ->
            let wildcard_83 :: () = printsym("(Node") in
            let wildcard_86 :: () = printsym(" ") in
            let y_81 :: () = (_print_AddTree_Tree_4 [] x_79) in
            let wildcard_85 :: () = printsym(" ") in
            let y_82 :: () = (_print_AddTree_Tree_4 [] x_80) in
            let wildcard_84 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, toL1
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9 ->
            (Leaf x_9 + 1)
        Node x1_10 x2_11 ->
            (Node (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13 ->
            (Leaf x_13 + 2)
        Node x1_14 x2_15 ->
            (Node (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17 ->
            (Leaf x_17 - 2)
        Node x1_18 x2_19 ->
            (Node (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52 =
    case arg_52 of
        Leaf x_53 ->
            let y_54 :: Int = x_53 in
            (Leaf y_54)
        Node x_55 x_56 ->
            let y_57 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55) in
            let y_58 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56) in
            (Node y_57 y_58)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59 =
    case arg_59 of
        Leaf x_60 ->
            let y_61 :: Int = x_60 in
            (Leaf y_61)
        Node x_62 x_63 ->
            let y_64 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62) in
            let y_65 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63) in
            (Node y_64 y_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66 =
    case arg_66 of
        Leaf x_67 ->
            ()
        Node x_69 x_70 ->
            let y_71 :: () = (_traverse_AddTree_Tree_4 [] x_69) in
            let y_72 :: () = (_traverse_AddTree_Tree_4 [] x_70) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73 =
    case arg_73 of
        Leaf x_74 ->
            let wildcard_76 :: () = printsym("(Leaf") in
            let wildcard_78 :: () = printsym(" ") in
            let y_75 :: () = printint(x_74) in
            let wildcard_77 :: () = printsym(")") in
            ()
        Node x_79 x_80 ->
            let wildcard_83 :: () = printsym("(Node") in
            let wildcard_86 :: () = printsym(" ") in
            let y_81 :: () = (_print_AddTree_Tree_4 [] x_79) in
            let wildcard_85 :: () = printsym(" ") in
            let y_82 :: () = (_print_AddTree_Tree_4 [] x_80) in
            let wildcard_84 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9 ->
            (Leaf x_9 + 1)
        Node x1_10 x2_11 ->
            (Node (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13 ->
            (Leaf x_13 + 2)
        Node x1_14 x2_15 ->
            (Node (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17 ->
            (Leaf x_17 - 2)
        Node x1_18 x2_19 ->
            (Node (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52 =
    case arg_52 of
        Leaf x_53 ->
            let y_54 :: Int = x_53 in
            (Leaf y_54)
        Node x_55 x_56 ->
            let y_57 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55) in
            let y_58 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56) in
            (Node y_57 y_58)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59 =
    case arg_59 of
        Leaf x_60 ->
            let y_61 :: Int = x_60 in
            (Leaf y_61)
        Node x_62 x_63 ->
            let y_64 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62) in
            let y_65 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63) in
            (Node y_64 y_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66 =
    case arg_66 of
        Leaf x_67 ->
            ()
        Node x_69 x_70 ->
            let y_71 :: () = (_traverse_AddTree_Tree_4 [] x_69) in
            let y_72 :: () = (_traverse_AddTree_Tree_4 [] x_70) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73 =
    case arg_73 of
        Leaf x_74 ->
            let wildcard_76 :: () = printsym("(Leaf") in
            let wildcard_78 :: () = printsym(" ") in
            let y_75 :: () = printint(x_74) in
            let wildcard_77 :: () = printsym(")") in
            ()
        Node x_79 x_80 ->
            let wildcard_83 :: () = printsym("(Node") in
            let wildcard_86 :: () = printsym(" ") in
            let y_81 :: () = (_print_AddTree_Tree_4 [] x_79) in
            let wildcard_85 :: () = printsym(" ") in
            let y_82 :: () = (_print_AddTree_Tree_4 [] x_80) in
            let wildcard_84 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, benchMainExp
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9 ->
            (Leaf x_9 + 1)
        Node x1_10 x2_11 ->
            (Node (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13 ->
            (Leaf x_13 + 2)
        Node x1_14 x2_15 ->
            (Node (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17 ->
            (Leaf x_17 - 2)
        Node x1_18 x2_19 ->
            (Node (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52 =
    case arg_52 of
        Leaf x_53 ->
            let y_54 :: Int = x_53 in
            (Leaf y_54)
        Node x_55 x_56 ->
            let y_57 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55) in
            let y_58 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56) in
            (Node y_57 y_58)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59 =
    case arg_59 of
        Leaf x_60 ->
            let y_61 :: Int = x_60 in
            (Leaf y_61)
        Node x_62 x_63 ->
            let y_64 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62) in
            let y_65 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63) in
            (Node y_64 y_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66 =
    case arg_66 of
        Leaf x_67 ->
            ()
        Node x_69 x_70 ->
            let y_71 :: () = (_traverse_AddTree_Tree_4 [] x_69) in
            let y_72 :: () = (_traverse_AddTree_Tree_4 [] x_70) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73 =
    case arg_73 of
        Leaf x_74 ->
            let wildcard_76 :: () = printsym("(Leaf") in
            let wildcard_78 :: () = printsym(" ") in
            let y_75 :: () = printint(x_74) in
            let wildcard_77 :: () = printsym(")") in
            ()
        Node x_79 x_80 ->
            let wildcard_83 :: () = printsym("(Node") in
            let wildcard_86 :: () = printsym(" ") in
            let y_81 :: () = (_print_AddTree_Tree_4 [] x_79) in
            let wildcard_85 :: () = printsym(" ") in
            let y_82 :: () = (_print_AddTree_Tree_4 [] x_80) in
            let wildcard_84 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8 =
    case t_8 of
        Leaf x_9 ->
            (Leaf x_9 + 1)
        Node x1_10 x2_11 ->
            (Node (Addone_add_5 [] x1_10) (Addone_add_5 [] x2_11))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12 =
    case t_12 of
        Leaf x_13 ->
            (Leaf x_13 + 2)
        Node x1_14 x2_15 ->
            (Node (Addtwo_add_6 [] x1_14) (Addtwo_add_6 [] x2_15))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_sub_7 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_sub_7 t_16 =
    case t_16 of
        Leaf x_17 ->
            (Leaf x_17 - 2)
        Node x1_18 x2_19 ->
            (Node (Addtwo_sub_7 [] x1_18) (Addtwo_sub_7 [] x2_19))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52 =
    case arg_52 of
        Leaf x_53 ->
            let y_54 :: Int = x_53 in
            (Leaf y_54)
        Node x_55 x_56 ->
            let y_57 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55) in
            let y_58 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56) in
            (Node y_57 y_58)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59 =
    case arg_59 of
        Leaf x_60 ->
            let y_61 :: Int = x_60 in
            (Leaf y_61)
        Node x_62 x_63 ->
            let y_64 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62) in
            let y_65 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63) in
            (Node y_64 y_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66 =
    case arg_66 of
        Leaf x_67 ->
            ()
        Node x_69 x_70 ->
            let y_71 :: () = (_traverse_AddTree_Tree_4 [] x_69) in
            let y_72 :: () = (_traverse_AddTree_Tree_4 [] x_70) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73 =
    case arg_73 of
        Leaf x_74 ->
            let wildcard_76 :: () = printsym("(Leaf") in
            let wildcard_78 :: () = printsym(" ") in
            let y_75 :: () = printint(x_74) in
            let wildcard_77 :: () = printsym(")") in
            ()
        Node x_79 x_80 ->
            let wildcard_83 :: () = printsym("(Node") in
            let wildcard_86 :: () = printsym(" ") in
            let y_81 :: () = (_print_AddTree_Tree_4 [] x_79) in
            let wildcard_85 :: () = printsym(" ") in
            let y_82 :: () = (_print_AddTree_Tree_4 [] x_80) in
            let wildcard_84 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, simplify
Removed unused functions: [Var "Addtwo_sub_7"]
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87 =
    case t_8_87 of
        Leaf x_9_88 ->
            (Leaf x_9_88 + 1)
        Node x1_10_89 x2_11_90 ->
            (Node (Addone_add_5 [] x1_10_89) (Addone_add_5 [] x2_11_90))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91 =
    case t_12_91 of
        Leaf x_13_92 ->
            (Leaf x_13_92 + 2)
        Node x1_14_93 x2_15_94 ->
            (Node (Addtwo_add_6 [] x1_14_93) (Addtwo_add_6 [] x2_15_94))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99 =
    case arg_52_99 of
        Leaf x_53_100 ->
            let y_54_101 :: Int = x_53_100 in
            (Leaf y_54_101)
        Node x_55_102 x_56_103 ->
            let y_57_104 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102) in
            let y_58_105 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103) in
            (Node y_57_104 y_58_105)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106 =
    case arg_59_106 of
        Leaf x_60_107 ->
            let y_61_108 :: Int = x_60_107 in
            (Leaf y_61_108)
        Node x_62_109 x_63_110 ->
            let y_64_111 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109) in
            let y_65_112 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110) in
            (Node y_64_111 y_65_112)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113 =
    case arg_66_113 of
        Leaf x_67_114 ->
            ()
        Node x_69_115 x_70_116 ->
            let y_71_117 :: () = (_traverse_AddTree_Tree_4 [] x_69_115) in
            let y_72_118 :: () = (_traverse_AddTree_Tree_4 [] x_70_116) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119 =
    case arg_73_119 of
        Leaf x_74_120 ->
            let wildcard_76_121 :: () = printsym("(Leaf") in
            let wildcard_78_122 :: () = printsym(" ") in
            let y_75_123 :: () = printint(x_74_120) in
            let wildcard_77_124 :: () = printsym(")") in
            ()
        Node x_79_125 x_80_126 ->
            let wildcard_83_127 :: () = printsym("(Node") in
            let wildcard_86_128 :: () = printsym(" ") in
            let y_81_129 :: () = (_print_AddTree_Tree_4 [] x_79_125) in
            let wildcard_85_130 :: () = printsym(" ") in
            let y_82_131 :: () = (_print_AddTree_Tree_4 [] x_80_126) in
            let wildcard_84_132 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87 =
    case t_8_87 of
        Leaf x_9_88 ->
            (Leaf x_9_88 + 1)
        Node x1_10_89 x2_11_90 ->
            (Node (Addone_add_5 [] x1_10_89) (Addone_add_5 [] x2_11_90))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91 =
    case t_12_91 of
        Leaf x_13_92 ->
            (Leaf x_13_92 + 2)
        Node x1_14_93 x2_15_94 ->
            (Node (Addtwo_add_6 [] x1_14_93) (Addtwo_add_6 [] x2_15_94))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99 =
    case arg_52_99 of
        Leaf x_53_100 ->
            let y_54_101 :: Int = x_53_100 in
            (Leaf y_54_101)
        Node x_55_102 x_56_103 ->
            let y_57_104 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102) in
            let y_58_105 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103) in
            (Node y_57_104 y_58_105)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106 =
    case arg_59_106 of
        Leaf x_60_107 ->
            let y_61_108 :: Int = x_60_107 in
            (Leaf y_61_108)
        Node x_62_109 x_63_110 ->
            let y_64_111 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109) in
            let y_65_112 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110) in
            (Node y_64_111 y_65_112)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113 =
    case arg_66_113 of
        Leaf x_67_114 ->
            ()
        Node x_69_115 x_70_116 ->
            let y_71_117 :: () = (_traverse_AddTree_Tree_4 [] x_69_115) in
            let y_72_118 :: () = (_traverse_AddTree_Tree_4 [] x_70_116) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119 =
    case arg_73_119 of
        Leaf x_74_120 ->
            let wildcard_76_121 :: () = printsym("(Leaf") in
            let wildcard_78_122 :: () = printsym(" ") in
            let y_75_123 :: () = printint(x_74_120) in
            let wildcard_77_124 :: () = printsym(")") in
            ()
        Node x_79_125 x_80_126 ->
            let wildcard_83_127 :: () = printsym("(Node") in
            let wildcard_86_128 :: () = printsym(" ") in
            let y_81_129 :: () = (_print_AddTree_Tree_4 [] x_79_125) in
            let wildcard_85_130 :: () = printsym(" ") in
            let y_82_131 :: () = (_print_AddTree_Tree_4 [] x_80_126) in
            let wildcard_84_132 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addtwo_add_6 [] (Addone_add_5 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, flatten
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87 =
    case t_8_87 of
        Leaf x_9_88 ->
            let fltPkd_137 :: Int = x_9_88 + 1 in
            (Leaf fltPkd_137)
        Node x1_10_89 x2_11_90 ->
            let fltPkd_138 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_10_89) in
            let fltPkd_139 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_11_90) in
            (Node fltPkd_138 fltPkd_139)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91 =
    case t_12_91 of
        Leaf x_13_92 ->
            let fltPkd_140 :: Int = x_13_92 + 2 in
            (Leaf fltPkd_140)
        Node x1_14_93 x2_15_94 ->
            let fltPkd_141 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_14_93) in
            let fltPkd_142 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_15_94) in
            (Node fltPkd_141 fltPkd_142)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99 =
    case arg_52_99 of
        Leaf x_53_100 ->
            let y_54_101 :: Int = x_53_100 in
            (Leaf y_54_101)
        Node x_55_102 x_56_103 ->
            let y_57_104 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102) in
            let y_58_105 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103) in
            (Node y_57_104 y_58_105)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106 =
    case arg_59_106 of
        Leaf x_60_107 ->
            let y_61_108 :: Int = x_60_107 in
            (Leaf y_61_108)
        Node x_62_109 x_63_110 ->
            let y_64_111 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109) in
            let y_65_112 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110) in
            (Node y_64_111 y_65_112)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113 =
    case arg_66_113 of
        Leaf x_67_114 ->
            ()
        Node x_69_115 x_70_116 ->
            let y_71_117 :: () = (_traverse_AddTree_Tree_4 [] x_69_115) in
            let y_72_118 :: () = (_traverse_AddTree_Tree_4 [] x_70_116) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119 =
    case arg_73_119 of
        Leaf x_74_120 ->
            let wildcard_76_121 :: () = printsym("(Leaf") in
            let wildcard_78_122 :: () = printsym(" ") in
            let y_75_123 :: () = printint(x_74_120) in
            let wildcard_77_124 :: () = printsym(")") in
            ()
        Node x_79_125 x_80_126 ->
            let wildcard_83_127 :: () = printsym("(Node") in
            let wildcard_86_128 :: () = printsym(" ") in
            let y_81_129 :: () = (_print_AddTree_Tree_4 [] x_79_125) in
            let wildcard_85_130 :: () = printsym(" ") in
            let y_82_131 :: () = (_print_AddTree_Tree_4 [] x_80_126) in
            let wildcard_84_132 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_136 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_134 :: (Packed AddTree_Tree_4) = (Node fltPkd_135 fltPkd_136) in
              let fltAppE_133 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] fltAppE_134) in
              (Addtwo_add_6 [] fltAppE_133)

 [compiler] Running pass, simplify
Removed unused functions: []
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            let y_54_101_163 :: Int = x_53_100_162 in
            (Leaf y_54_101_163)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            let y_61_108_170 :: Int = x_60_107_169 in
            (Leaf y_61_108_170)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_136_144 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_134_145 :: (Packed AddTree_Tree_4) = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] fltAppE_134_145) in
              (Addtwo_add_6 [] fltAppE_133_146)

 [compiler] Running pass, inlineTriv
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_136_144 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_134_145 :: (Packed AddTree_Tree_4) = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] fltAppE_134_145) in
              (Addtwo_add_6 [] fltAppE_133_146)

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_136_144 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_134_145 :: (Packed AddTree_Tree_4) = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] fltAppE_134_145) in
              (Addtwo_add_6 [] fltAppE_133_146)

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_136_144 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_134_145 :: (Packed AddTree_Tree_4) = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] fltAppE_134_145) in
              (Addtwo_add_6 [] fltAppE_133_146)

 [compiler] Running pass, directL3
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: Cursor = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: Cursor = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: Cursor = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: Cursor = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: Cursor = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: Cursor = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: Cursor = (Leaf 1) in
              let fltPkd_136_144 :: Cursor = (Leaf 2) in
              let fltAppE_134_145 :: Cursor = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: Cursor = (Addone_add_5 [] fltAppE_134_145) in
              (Addtwo_add_6 [] fltAppE_133_146)

 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: Cursor = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: Cursor = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: Cursor = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: Cursor = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: Cursor = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: Cursor = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: Cursor = (Leaf 1) in
              let fltPkd_136_144 :: Cursor = (Leaf 2) in
              let fltAppE_134_145 :: Cursor = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: Cursor = (Addone_add_5 [] fltAppE_134_145) in
              (Addtwo_add_6 [] fltAppE_133_146)

 [compiler] Running pass, unariser
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: Cursor = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: Cursor = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: Cursor = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: Cursor = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: Cursor = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: Cursor = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: Cursor = (Leaf 1) in
              let fltPkd_136_144 :: Cursor = (Leaf 2) in
              let fltAppE_134_145 :: Cursor = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: Cursor = (Addone_add_5 [] fltAppE_134_145) in
              let tmp_app_195 :: Cursor = (Addtwo_add_6 [] fltAppE_133_146) in
              tmp_app_195

 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: Cursor = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: Cursor = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: Cursor = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: Cursor = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: Cursor = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: Cursor = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: Cursor = (Leaf 1) in
              let fltPkd_136_144 :: Cursor = (Leaf 2) in
              let fltAppE_134_145 :: Cursor = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: Cursor = (Addone_add_5 [] fltAppE_134_145) in
              let tmp_app_195 :: Cursor = (Addtwo_add_6 [] fltAppE_133_146) in
              tmp_app_195

 [compiler] Running pass, L3.flatten
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: Cursor = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: Cursor = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: Cursor = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: Cursor = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: Cursor = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: Cursor = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: Cursor = (Leaf 1) in
              let fltPkd_136_144 :: Cursor = (Leaf 2) in
              let fltAppE_134_145 :: Cursor = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: Cursor = (Addone_add_5 [] fltAppE_134_145) in
              let tmp_app_195 :: Cursor = (Addtwo_add_6 [] fltAppE_133_146) in
              tmp_app_195

 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_8_87_147 =
    case t_8_87_147 of
        Leaf x_9_88_148 ->
            let fltPkd_137_149 :: Int = x_9_88_148 + 1 in
            (Leaf fltPkd_137_149)
        Node x1_10_89_150 x2_11_90_151 ->
            let fltPkd_138_152 :: Cursor = (Addone_add_5 [] x1_10_89_150) in
            let fltPkd_139_153 :: Cursor = (Addone_add_5 [] x2_11_90_151) in
            (Node fltPkd_138_152 fltPkd_139_153)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_12_91_154 =
    case t_12_91_154 of
        Leaf x_13_92_155 ->
            let fltPkd_140_156 :: Int = x_13_92_155 + 2 in
            (Leaf fltPkd_140_156)
        Node x1_14_93_157 x2_15_94_158 ->
            let fltPkd_141_159 :: Cursor = (Addtwo_add_6 [] x1_14_93_157) in
            let fltPkd_142_160 :: Cursor = (Addtwo_add_6 [] x2_15_94_158) in
            (Node fltPkd_141_159 fltPkd_142_160)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_52_99_161 =
    case arg_52_99_161 of
        Leaf x_53_100_162 ->
            (Leaf x_53_100_162)
        Node x_55_102_164 x_56_103_165 ->
            let y_57_104_166 :: Cursor = (_copy_AddTree_Tree_4 [] x_55_102_164) in
            let y_58_105_167 :: Cursor = (_copy_AddTree_Tree_4 [] x_56_103_165) in
            (Node y_57_104_166 y_58_105_167)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_59_106_168 =
    case arg_59_106_168 of
        Leaf x_60_107_169 ->
            (Leaf x_60_107_169)
        Node x_62_109_171 x_63_110_172 ->
            let y_64_111_173 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_62_109_171) in
            let y_65_112_174 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_63_110_172) in
            (Node y_64_111_173 y_65_112_174)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_66_113_175 =
    case arg_66_113_175 of
        Leaf x_67_114_176 ->
            ()
        Node x_69_115_177 x_70_116_178 ->
            let y_71_117_179 :: () = (_traverse_AddTree_Tree_4 [] x_69_115_177) in
            let y_72_118_180 :: () = (_traverse_AddTree_Tree_4 [] x_70_116_178) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_73_119_181 =
    case arg_73_119_181 of
        Leaf x_74_120_182 ->
            let wildcard_76_121_183 :: () = printsym("(Leaf") in
            let wildcard_78_122_184 :: () = printsym(" ") in
            let y_75_123_185 :: () = printint(x_74_120_182) in
            let wildcard_77_124_186 :: () = printsym(")") in
            ()
        Node x_79_125_187 x_80_126_188 ->
            let wildcard_83_127_189 :: () = printsym("(Node") in
            let wildcard_86_128_190 :: () = printsym(" ") in
            let y_81_129_191 :: () = (_print_AddTree_Tree_4 [] x_79_125_187) in
            let wildcard_85_130_192 :: () = printsym(" ") in
            let y_82_131_193 :: () = (_print_AddTree_Tree_4 [] x_80_126_188) in
            let wildcard_84_132_194 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_135_143 :: Cursor = (Leaf 1) in
              let fltPkd_136_144 :: Cursor = (Leaf 2) in
              let fltAppE_134_145 :: Cursor = (Node fltPkd_135_143 fltPkd_136_144) in
              let fltAppE_133_146 :: Cursor = (Addone_add_5 [] fltAppE_134_145) in
              let tmp_app_195 :: Cursor = (Addtwo_add_6 [] fltAppE_133_146) in
              tmp_app_195

 [compiler] Running pass, lower
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_4",
                    [("Leaf",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("Node",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(196, ")"),(197, "(Node"),(198, "(Leaf"),
                     (199, " ")],
      fundefs = [FunDecl {funName = "Addone_add_5",
                          funArgs = [(t_8_87_147, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_200, TagTyPacked),
                                                           (tail_201, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_8_87_147"],
                                                  bod = Switch "switch_204"
                                                               (VarTriv "tag_200")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_9_88_148,
                                                                                                IntTy)],
                                                                                      ptr = "tail_201",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_137_149,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_9_88_148",
                                                                                                                   IntTriv 1],
                                                                                                          bod = LetAllocT {lhs = "tailift_202",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_137_149")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_202"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_10_89_150,
                                                                                                CursorTy),
                                                                                               (x2_11_90_151,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_201",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_138_152,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addone_add_5",
                                                                                                      rands = [VarTriv "x1_10_89_150"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_139_153,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addone_add_5",
                                                                                                                      rands = [VarTriv "x2_11_90_151"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_203",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_138_152"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_139_153")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_203"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_200")},
                          isPure = True},
                 FunDecl {funName = "Addtwo_add_6",
                          funArgs = [(t_12_91_154, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_205, TagTyPacked),
                                                           (tail_206, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_12_91_154"],
                                                  bod = Switch "switch_209"
                                                               (VarTriv "tag_205")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_13_92_155,
                                                                                                IntTy)],
                                                                                      ptr = "tail_206",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_140_156,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_13_92_155",
                                                                                                                   IntTriv 2],
                                                                                                          bod = LetAllocT {lhs = "tailift_207",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_140_156")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_207"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_14_93_157,
                                                                                                CursorTy),
                                                                                               (x2_15_94_158,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_206",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_141_159,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addtwo_add_6",
                                                                                                      rands = [VarTriv "x1_14_93_157"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_142_160,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addtwo_add_6",
                                                                                                                      rands = [VarTriv "x2_15_94_158"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_208",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_141_159"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_142_160")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_208"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_205")},
                          isPure = True},
                 FunDecl {funName = "_copy_AddTree_Tree_4",
                          funArgs = [(arg_52_99_161, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_210, TagTyPacked),
                                                           (tail_211, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_52_99_161"],
                                                  bod = Switch "switch_214"
                                                               (VarTriv "tag_210")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_53_100_162,
                                                                                                IntTy)],
                                                                                      ptr = "tail_211",
                                                                                      bod = LetAllocT {lhs = "tailift_212",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_53_100_162")],
                                                                                                       bod = RetValsT [VarTriv "tailift_212"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_55_102_164,
                                                                                                CursorTy),
                                                                                               (x_56_103_165,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_211",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_57_104_166,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_55_102_164"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_58_105_167,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_56_103_165"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_213",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_57_104_166"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_58_105_167")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_213"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_210")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_4",
                          funArgs = [(arg_59_106_168, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_215, TagTyPacked),
                                                           (tail_216, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_59_106_168"],
                                                  bod = Switch "switch_219"
                                                               (VarTriv "tag_215")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_60_107_169,
                                                                                                IntTy)],
                                                                                      ptr = "tail_216",
                                                                                      bod = LetAllocT {lhs = "tailift_217",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_60_107_169")],
                                                                                                       bod = RetValsT [VarTriv "tailift_217"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_62_109_171,
                                                                                                CursorTy),
                                                                                               (x_63_110_172,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_216",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_64_111_173,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_62_109_171"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_65_112_174,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_63_110_172"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_218",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_64_111_173"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_65_112_174")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_218"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_215")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_4",
                          funArgs = [(arg_66_113_175, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_220, TagTyPacked),
                                                           (tail_221, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_66_113_175"],
                                                  bod = Switch "switch_222"
                                                               (VarTriv "tag_220")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_67_114_176,
                                                                                                IntTy)],
                                                                                      ptr = "tail_221",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_69_115_177,
                                                                                                CursorTy),
                                                                                               (x_70_116_178,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_221",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_71_117_179,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_69_115_177"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_72_118_180,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_70_116_178"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_220")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_4",
                          funArgs = [(arg_73_119_181, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_223, TagTyPacked),
                                                           (tail_224, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_73_119_181"],
                                                  bod = Switch "switch_225"
                                                               (VarTriv "tag_223")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_74_120_182,
                                                                                                IntTy)],
                                                                                      ptr = "tail_224",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_76_121_183,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 198],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_78_122_184,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 199],
                                                                                                                              bod = LetPrimCallT {binds = [(y_75_123_185,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_74_120_182"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_77_124_186,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 196],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_79_125_187,
                                                                                                CursorTy),
                                                                                               (x_80_126_188,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_224",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_83_127_189,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 197],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_86_128_190,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 199],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_81_129_191,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_4",
                                                                                                                                              rands = [VarTriv "x_79_125_187"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_85_130_192,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 199],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_82_131_193,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_4",
                                                                                                                                                                                  rands = [VarTriv "x_80_126_188"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_84_132_194,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 196],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_223")},
                          isPure = True}],
      mainExp = Just PrintExp (LetAllocT
                                        {lhs = "fltPkd_135_143",
                                         vals = [(IntTy, IntTriv 0),(IntTy, IntTriv 1)],
                                         bod = LetAllocT {lhs = "fltPkd_136_144",
                                                          vals = [(IntTy, IntTriv 0),
                                                                  (IntTy, IntTriv 2)],
                                                          bod = LetAllocT {lhs = "fltAppE_134_145",
                                                                           vals = [(IntTy,
                                                                                    IntTriv 1),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_135_143"),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_136_144")],
                                                                           bod = LetCallT {async = False,
                                                                                           binds = [(fltAppE_133_146,
                                                                                                     CursorTy)],
                                                                                           rator = "Addone_add_5",
                                                                                           rands = [VarTriv "fltAppE_134_145"],
                                                                                           bod = LetCallT {async = False,
                                                                                                           binds = [(tmp_app_195,
                                                                                                                     CursorTy)],
                                                                                                           rator = "Addtwo_add_6",
                                                                                                           rands = [VarTriv "fltAppE_133_146"],
                                                                                                           bod = LetCallT {async = False,
                                                                                                                           binds = [],
                                                                                                                           rator = "_print_AddTree_Tree_4",
                                                                                                                           rands = [VarTriv "tmp_app_195"],
                                                                                                                           bod = LetPrimCallT {binds = [],
                                                                                                                                               prim = PrintString "\n",
                                                                                                                                               rands = [],
                                                                                                                                               bod = RetValsT []}}}}}}})}

 [compiler] Running pass, lateInlineTriv
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_4",
                    [("Leaf",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("Node",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(196, ")"),(197, "(Node"),(198, "(Leaf"),
                     (199, " ")],
      fundefs = [FunDecl {funName = "Addone_add_5",
                          funArgs = [(t_8_87_147, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_200, TagTyPacked),
                                                           (tail_201, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_8_87_147"],
                                                  bod = Switch "switch_204"
                                                               (VarTriv "tag_200")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_9_88_148,
                                                                                                IntTy)],
                                                                                      ptr = "tail_201",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_137_149,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_9_88_148",
                                                                                                                   IntTriv 1],
                                                                                                          bod = LetAllocT {lhs = "tailift_202",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_137_149")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_202"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_10_89_150,
                                                                                                CursorTy),
                                                                                               (x2_11_90_151,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_201",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_138_152,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addone_add_5",
                                                                                                      rands = [VarTriv "x1_10_89_150"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_139_153,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addone_add_5",
                                                                                                                      rands = [VarTriv "x2_11_90_151"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_203",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_138_152"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_139_153")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_203"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_200")},
                          isPure = True},
                 FunDecl {funName = "Addtwo_add_6",
                          funArgs = [(t_12_91_154, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_205, TagTyPacked),
                                                           (tail_206, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_12_91_154"],
                                                  bod = Switch "switch_209"
                                                               (VarTriv "tag_205")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_13_92_155,
                                                                                                IntTy)],
                                                                                      ptr = "tail_206",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_140_156,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_13_92_155",
                                                                                                                   IntTriv 2],
                                                                                                          bod = LetAllocT {lhs = "tailift_207",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_140_156")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_207"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_14_93_157,
                                                                                                CursorTy),
                                                                                               (x2_15_94_158,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_206",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_141_159,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addtwo_add_6",
                                                                                                      rands = [VarTriv "x1_14_93_157"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_142_160,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addtwo_add_6",
                                                                                                                      rands = [VarTriv "x2_15_94_158"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_208",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_141_159"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_142_160")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_208"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_205")},
                          isPure = True},
                 FunDecl {funName = "_copy_AddTree_Tree_4",
                          funArgs = [(arg_52_99_161, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_210, TagTyPacked),
                                                           (tail_211, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_52_99_161"],
                                                  bod = Switch "switch_214"
                                                               (VarTriv "tag_210")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_53_100_162,
                                                                                                IntTy)],
                                                                                      ptr = "tail_211",
                                                                                      bod = LetAllocT {lhs = "tailift_212",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_53_100_162")],
                                                                                                       bod = RetValsT [VarTriv "tailift_212"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_55_102_164,
                                                                                                CursorTy),
                                                                                               (x_56_103_165,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_211",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_57_104_166,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_55_102_164"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_58_105_167,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_56_103_165"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_213",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_57_104_166"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_58_105_167")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_213"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_210")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_4",
                          funArgs = [(arg_59_106_168, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_215, TagTyPacked),
                                                           (tail_216, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_59_106_168"],
                                                  bod = Switch "switch_219"
                                                               (VarTriv "tag_215")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_60_107_169,
                                                                                                IntTy)],
                                                                                      ptr = "tail_216",
                                                                                      bod = LetAllocT {lhs = "tailift_217",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_60_107_169")],
                                                                                                       bod = RetValsT [VarTriv "tailift_217"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_62_109_171,
                                                                                                CursorTy),
                                                                                               (x_63_110_172,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_216",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_64_111_173,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_62_109_171"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_65_112_174,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_63_110_172"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_218",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_64_111_173"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_65_112_174")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_218"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_215")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_4",
                          funArgs = [(arg_66_113_175, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_220, TagTyPacked),
                                                           (tail_221, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_66_113_175"],
                                                  bod = Switch "switch_222"
                                                               (VarTriv "tag_220")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_67_114_176,
                                                                                                IntTy)],
                                                                                      ptr = "tail_221",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_69_115_177,
                                                                                                CursorTy),
                                                                                               (x_70_116_178,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_221",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_71_117_179,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_69_115_177"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_72_118_180,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_70_116_178"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_220")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_4",
                          funArgs = [(arg_73_119_181, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_223, TagTyPacked),
                                                           (tail_224, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_73_119_181"],
                                                  bod = Switch "switch_225"
                                                               (VarTriv "tag_223")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_74_120_182,
                                                                                                IntTy)],
                                                                                      ptr = "tail_224",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_76_121_183,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 198],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_78_122_184,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 199],
                                                                                                                              bod = LetPrimCallT {binds = [(y_75_123_185,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_74_120_182"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_77_124_186,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 196],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_79_125_187,
                                                                                                CursorTy),
                                                                                               (x_80_126_188,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_224",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_83_127_189,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 197],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_86_128_190,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 199],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_81_129_191,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_4",
                                                                                                                                              rands = [VarTriv "x_79_125_187"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_85_130_192,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 199],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_82_131_193,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_4",
                                                                                                                                                                                  rands = [VarTriv "x_80_126_188"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_84_132_194,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 196],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_223")},
                          isPure = True}],
      mainExp = Just PrintExp (LetAllocT
                                        {lhs = "fltPkd_135_143",
                                         vals = [(IntTy, IntTriv 0),(IntTy, IntTriv 1)],
                                         bod = LetAllocT {lhs = "fltPkd_136_144",
                                                          vals = [(IntTy, IntTriv 0),
                                                                  (IntTy, IntTriv 2)],
                                                          bod = LetAllocT {lhs = "fltAppE_134_145",
                                                                           vals = [(IntTy,
                                                                                    IntTriv 1),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_135_143"),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_136_144")],
                                                                           bod = LetCallT {async = False,
                                                                                           binds = [(fltAppE_133_146,
                                                                                                     CursorTy)],
                                                                                           rator = "Addone_add_5",
                                                                                           rands = [VarTriv "fltAppE_134_145"],
                                                                                           bod = LetCallT {async = False,
                                                                                                           binds = [(tmp_app_195,
                                                                                                                     CursorTy)],
                                                                                                           rator = "Addtwo_add_6",
                                                                                                           rands = [VarTriv "fltAppE_133_146"],
                                                                                                           bod = LetCallT {async = False,
                                                                                                                           binds = [],
                                                                                                                           rator = "_print_AddTree_Tree_4",
                                                                                                                           rands = [VarTriv "tmp_app_195"],
                                                                                                                           bod = LetPrimCallT {binds = [],
                                                                                                                                               prim = PrintString "\n",
                                                                                                                                               rands = [],
                                                                                                                                               bod = RetValsT []}}}}}}})}

 [compiler] Running pass, rearrangeFree
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_4",
                    [("Leaf",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("Node",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(196, ")"),(197, "(Node"),(198, "(Leaf"),
                     (199, " ")],
      fundefs = [FunDecl {funName = "Addone_add_5",
                          funArgs = [(t_8_87_147, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_200, TagTyPacked),
                                                           (tail_201, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_8_87_147"],
                                                  bod = Switch "switch_204"
                                                               (VarTriv "tag_200")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_9_88_148,
                                                                                                IntTy)],
                                                                                      ptr = "tail_201",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_137_149,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_9_88_148",
                                                                                                                   IntTriv 1],
                                                                                                          bod = LetAllocT {lhs = "tailift_202",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_137_149")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_202"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_10_89_150,
                                                                                                CursorTy),
                                                                                               (x2_11_90_151,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_201",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_138_152,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addone_add_5",
                                                                                                      rands = [VarTriv "x1_10_89_150"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_139_153,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addone_add_5",
                                                                                                                      rands = [VarTriv "x2_11_90_151"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_203",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_138_152"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_139_153")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_203"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_200")},
                          isPure = True},
                 FunDecl {funName = "Addtwo_add_6",
                          funArgs = [(t_12_91_154, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_205, TagTyPacked),
                                                           (tail_206, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_12_91_154"],
                                                  bod = Switch "switch_209"
                                                               (VarTriv "tag_205")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_13_92_155,
                                                                                                IntTy)],
                                                                                      ptr = "tail_206",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_140_156,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_13_92_155",
                                                                                                                   IntTriv 2],
                                                                                                          bod = LetAllocT {lhs = "tailift_207",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_140_156")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_207"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_14_93_157,
                                                                                                CursorTy),
                                                                                               (x2_15_94_158,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_206",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_141_159,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addtwo_add_6",
                                                                                                      rands = [VarTriv "x1_14_93_157"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_142_160,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addtwo_add_6",
                                                                                                                      rands = [VarTriv "x2_15_94_158"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_208",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_141_159"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_142_160")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_208"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_205")},
                          isPure = True},
                 FunDecl {funName = "_copy_AddTree_Tree_4",
                          funArgs = [(arg_52_99_161, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_210, TagTyPacked),
                                                           (tail_211, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_52_99_161"],
                                                  bod = Switch "switch_214"
                                                               (VarTriv "tag_210")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_53_100_162,
                                                                                                IntTy)],
                                                                                      ptr = "tail_211",
                                                                                      bod = LetAllocT {lhs = "tailift_212",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_53_100_162")],
                                                                                                       bod = RetValsT [VarTriv "tailift_212"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_55_102_164,
                                                                                                CursorTy),
                                                                                               (x_56_103_165,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_211",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_57_104_166,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_55_102_164"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_58_105_167,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_56_103_165"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_213",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_57_104_166"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_58_105_167")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_213"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_210")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_4",
                          funArgs = [(arg_59_106_168, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_215, TagTyPacked),
                                                           (tail_216, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_59_106_168"],
                                                  bod = Switch "switch_219"
                                                               (VarTriv "tag_215")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_60_107_169,
                                                                                                IntTy)],
                                                                                      ptr = "tail_216",
                                                                                      bod = LetAllocT {lhs = "tailift_217",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_60_107_169")],
                                                                                                       bod = RetValsT [VarTriv "tailift_217"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_62_109_171,
                                                                                                CursorTy),
                                                                                               (x_63_110_172,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_216",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_64_111_173,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_62_109_171"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_65_112_174,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_63_110_172"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_218",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_64_111_173"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_65_112_174")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_218"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_215")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_4",
                          funArgs = [(arg_66_113_175, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_220, TagTyPacked),
                                                           (tail_221, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_66_113_175"],
                                                  bod = Switch "switch_222"
                                                               (VarTriv "tag_220")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_67_114_176,
                                                                                                IntTy)],
                                                                                      ptr = "tail_221",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_69_115_177,
                                                                                                CursorTy),
                                                                                               (x_70_116_178,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_221",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_71_117_179,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_69_115_177"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_72_118_180,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_70_116_178"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_220")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_4",
                          funArgs = [(arg_73_119_181, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_223, TagTyPacked),
                                                           (tail_224, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_73_119_181"],
                                                  bod = Switch "switch_225"
                                                               (VarTriv "tag_223")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_74_120_182,
                                                                                                IntTy)],
                                                                                      ptr = "tail_224",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_76_121_183,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 198],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_78_122_184,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 199],
                                                                                                                              bod = LetPrimCallT {binds = [(y_75_123_185,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_74_120_182"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_77_124_186,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 196],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_79_125_187,
                                                                                                CursorTy),
                                                                                               (x_80_126_188,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_224",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_83_127_189,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 197],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_86_128_190,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 199],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_81_129_191,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_4",
                                                                                                                                              rands = [VarTriv "x_79_125_187"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_85_130_192,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 199],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_82_131_193,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_4",
                                                                                                                                                                                  rands = [VarTriv "x_80_126_188"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_84_132_194,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 196],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_223")},
                          isPure = True}],
      mainExp = Just PrintExp (LetAllocT
                                        {lhs = "fltPkd_135_143",
                                         vals = [(IntTy, IntTriv 0),(IntTy, IntTriv 1)],
                                         bod = LetAllocT {lhs = "fltPkd_136_144",
                                                          vals = [(IntTy, IntTriv 0),
                                                                  (IntTy, IntTriv 2)],
                                                          bod = LetAllocT {lhs = "fltAppE_134_145",
                                                                           vals = [(IntTy,
                                                                                    IntTriv 1),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_135_143"),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_136_144")],
                                                                           bod = LetCallT {async = False,
                                                                                           binds = [(fltAppE_133_146,
                                                                                                     CursorTy)],
                                                                                           rator = "Addone_add_5",
                                                                                           rands = [VarTriv "fltAppE_134_145"],
                                                                                           bod = LetCallT {async = False,
                                                                                                           binds = [(tmp_app_195,
                                                                                                                     CursorTy)],
                                                                                                           rator = "Addtwo_add_6",
                                                                                                           rands = [VarTriv "fltAppE_133_146"],
                                                                                                           bod = LetCallT {async = False,
                                                                                                                           binds = [],
                                                                                                                           rator = "_print_AddTree_Tree_4",
                                                                                                                           rands = [VarTriv "tmp_app_195"],
                                                                                                                           bod = LetPrimCallT {binds = [],
                                                                                                                                               prim = PrintString "\n",
                                                                                                                                               rands = [],
                                                                                                                                               bod = RetValsT []}}}}}}})}

 [compiler] Final C codegen: 13391 characters.
================================================================================
/* Gibbon program. */

#include "gibbon_rts.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>
#include <alloca.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdarg.h>
#include <errno.h>
#include <uthash.h>

#ifdef _WIN64
#include <windows.h>
#endif

#ifdef _GIBBON_POINTER
#include <gc.h>
#endif

#ifdef _GIBBON_PARALLEL
#include <cilk/cilk.h>
#include <cilk/cilk_api.h>
#endif

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Program starts here
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

typedef struct GibIntProd_struct {
            GibInt field0;
        } GibIntProd;
typedef struct GibIntGibIntProd_struct {
            GibInt field0;
            GibInt field1;
        } GibIntGibIntProd;
typedef struct GibIntGibCursorGibCursorProd_struct {
            GibInt field0;
            GibCursor field1;
            GibCursor field2;
        } GibIntGibCursorGibCursorProd;
typedef struct GibPackedTagGibCursorProd_struct {
            GibPackedTag field0;
            GibCursor field1;
        } GibPackedTagGibCursorProd;
typedef struct GibCursorProd_struct {
            GibCursor field0;
        } GibCursorProd;
typedef struct GibCursorGibCursorProd_struct {
            GibCursor field0;
            GibCursor field1;
        } GibCursorGibCursorProd;
GibCursor Addone_add_5(GibCursor t_8_87_147);
GibCursor Addtwo_add_6(GibCursor t_12_91_154);
GibCursor _copy_AddTree_Tree_4(GibCursor arg_52_99_161);
GibCursor _copy_without_ptrs_AddTree_Tree_4(GibCursor arg_59_106_168);
unsigned char _traverse_AddTree_Tree_4(GibCursor arg_66_113_175);
unsigned char _print_AddTree_Tree_4(GibCursor arg_73_119_181);
typedef enum {
            GibInt_T,
            GibFloat_T,
            GibSym_T,
            GibBool_T,
            GibVector_T,
            GibList_T,
            GibCursor_T,
            AddTree_Tree_4_T,
        } GibDatatype;
void info_table_initialize(void)
{
    int error = gib_info_table_initialize(8);
    
    if (error < 0) {
        fprintf(stderr, "Couldn't initialize info table, errorno=%d", error);
        exit(1);
    }
    
    GibDatatype field_tys[1];
    
    error = gib_info_table_insert_packed_dcon(AddTree_Tree_4_T, 0, 8, 0, 1, 0,
                                              field_tys, 0);
    if (error < 0) {
        fprintf(stderr,
                "Couldn't insert into info table, errorno=%d, tycon=%d, dcon=%d",
                error, AddTree_Tree_4_T, 0);
        exit(1);
    }
    error = gib_info_table_insert_packed_dcon(AddTree_Tree_4_T, 1, 0, 2, 0, 0,
                                              field_tys, 0);
    if (error < 0) {
        fprintf(stderr,
                "Couldn't insert into info table, errorno=%d, tycon=%d, dcon=%d",
                error, AddTree_Tree_4_T, 1);
        exit(1);
    }
    gib_info_table_finalize();
}
void symbol_table_initialize(void)
{
    gib_add_symbol(196, ")");
    gib_add_symbol(197, "(Node");
    gib_add_symbol(198, "(Leaf");
    gib_add_symbol(199, " ");
}
GibCursor Addone_add_5(GibCursor t_8_87_147)
{
    GibPackedTag tag_200 = *(GibPackedTag *) t_8_87_147;
    GibCursor tail_201 = t_8_87_147 + sizeof(GibInt);
    
    
  switch_204:
    ;
    switch (tag_200) {
        
      case 0:
        {
            GibInt x_9_88_148 = ((GibIntProd *) tail_201)->field0;
            GibInt fltPkd_137_149 = x_9_88_148 + 1;
            GibPtr tailift_202 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_202)->field0 = 0;
            ((GibIntGibIntProd *) tailift_202)->field1 = fltPkd_137_149;
            return tailift_202;
            break;
        }
        
      case 1:
        {
            GibCursor x1_10_89_150 =
                      ((GibCursorGibCursorProd *) tail_201)->field0;
            GibCursor x2_11_90_151 =
                      ((GibCursorGibCursorProd *) tail_201)->field1;
            GibCursor fltPkd_138_152 =  Addone_add_5(x1_10_89_150);
            GibCursor fltPkd_139_153 =  Addone_add_5(x2_11_90_151);
            GibPtr tailift_203 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_203)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_203)->field1 =
                fltPkd_138_152;
            ((GibIntGibCursorGibCursorProd *) tailift_203)->field2 =
                fltPkd_139_153;
            return tailift_203;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_200");
            exit(1);
        }
    }
}
GibCursor Addtwo_add_6(GibCursor t_12_91_154)
{
    GibPackedTag tag_205 = *(GibPackedTag *) t_12_91_154;
    GibCursor tail_206 = t_12_91_154 + sizeof(GibInt);
    
    
  switch_209:
    ;
    switch (tag_205) {
        
      case 0:
        {
            GibInt x_13_92_155 = ((GibIntProd *) tail_206)->field0;
            GibInt fltPkd_140_156 = x_13_92_155 + 2;
            GibPtr tailift_207 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_207)->field0 = 0;
            ((GibIntGibIntProd *) tailift_207)->field1 = fltPkd_140_156;
            return tailift_207;
            break;
        }
        
      case 1:
        {
            GibCursor x1_14_93_157 =
                      ((GibCursorGibCursorProd *) tail_206)->field0;
            GibCursor x2_15_94_158 =
                      ((GibCursorGibCursorProd *) tail_206)->field1;
            GibCursor fltPkd_141_159 =  Addtwo_add_6(x1_14_93_157);
            GibCursor fltPkd_142_160 =  Addtwo_add_6(x2_15_94_158);
            GibPtr tailift_208 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_208)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_208)->field1 =
                fltPkd_141_159;
            ((GibIntGibCursorGibCursorProd *) tailift_208)->field2 =
                fltPkd_142_160;
            return tailift_208;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_205");
            exit(1);
        }
    }
}
GibCursor _copy_AddTree_Tree_4(GibCursor arg_52_99_161)
{
    GibPackedTag tag_210 = *(GibPackedTag *) arg_52_99_161;
    GibCursor tail_211 = arg_52_99_161 + sizeof(GibInt);
    
    
  switch_214:
    ;
    switch (tag_210) {
        
      case 0:
        {
            GibInt x_53_100_162 = ((GibIntProd *) tail_211)->field0;
            GibPtr tailift_212 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_212)->field0 = 0;
            ((GibIntGibIntProd *) tailift_212)->field1 = x_53_100_162;
            return tailift_212;
            break;
        }
        
      case 1:
        {
            GibCursor x_55_102_164 =
                      ((GibCursorGibCursorProd *) tail_211)->field0;
            GibCursor x_56_103_165 =
                      ((GibCursorGibCursorProd *) tail_211)->field1;
            GibCursor y_57_104_166 =  _copy_AddTree_Tree_4(x_55_102_164);
            GibCursor y_58_105_167 =  _copy_AddTree_Tree_4(x_56_103_165);
            GibPtr tailift_213 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_213)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_213)->field1 =
                y_57_104_166;
            ((GibIntGibCursorGibCursorProd *) tailift_213)->field2 =
                y_58_105_167;
            return tailift_213;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_210");
            exit(1);
        }
    }
}
GibCursor _copy_without_ptrs_AddTree_Tree_4(GibCursor arg_59_106_168)
{
    GibPackedTag tag_215 = *(GibPackedTag *) arg_59_106_168;
    GibCursor tail_216 = arg_59_106_168 + sizeof(GibInt);
    
    
  switch_219:
    ;
    switch (tag_215) {
        
      case 0:
        {
            GibInt x_60_107_169 = ((GibIntProd *) tail_216)->field0;
            GibPtr tailift_217 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_217)->field0 = 0;
            ((GibIntGibIntProd *) tailift_217)->field1 = x_60_107_169;
            return tailift_217;
            break;
        }
        
      case 1:
        {
            GibCursor x_62_109_171 =
                      ((GibCursorGibCursorProd *) tail_216)->field0;
            GibCursor x_63_110_172 =
                      ((GibCursorGibCursorProd *) tail_216)->field1;
            GibCursor y_64_111_173 =
                       _copy_without_ptrs_AddTree_Tree_4(x_62_109_171);
            GibCursor y_65_112_174 =
                       _copy_without_ptrs_AddTree_Tree_4(x_63_110_172);
            GibPtr tailift_218 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_218)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_218)->field1 =
                y_64_111_173;
            ((GibIntGibCursorGibCursorProd *) tailift_218)->field2 =
                y_65_112_174;
            return tailift_218;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_215");
            exit(1);
        }
    }
}
unsigned char _traverse_AddTree_Tree_4(GibCursor arg_66_113_175)
{
    GibPackedTag tag_220 = *(GibPackedTag *) arg_66_113_175;
    GibCursor tail_221 = arg_66_113_175 + sizeof(GibInt);
    
    
  switch_222:
    ;
    switch (tag_220) {
        
      case 0:
        {
            GibInt x_67_114_176 = ((GibIntProd *) tail_221)->field0;
            
            return 0;
            break;
        }
        
      case 1:
        {
            GibCursor x_69_115_177 =
                      ((GibCursorGibCursorProd *) tail_221)->field0;
            GibCursor x_70_116_178 =
                      ((GibCursorGibCursorProd *) tail_221)->field1;
            unsigned char y_71_117_179 =
                           _traverse_AddTree_Tree_4(x_69_115_177);
            unsigned char y_72_118_180 =
                           _traverse_AddTree_Tree_4(x_70_116_178);
            
            return 0;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_220");
            exit(1);
        }
    }
}
unsigned char _print_AddTree_Tree_4(GibCursor arg_73_119_181)
{
    GibPackedTag tag_223 = *(GibPackedTag *) arg_73_119_181;
    GibCursor tail_224 = arg_73_119_181 + sizeof(GibInt);
    
    
  switch_225:
    ;
    switch (tag_223) {
        
      case 0:
        {
            GibInt x_74_120_182 = ((GibIntProd *) tail_224)->field0;
            unsigned char wildcard_76_121_183 = gib_print_symbol(198);
            unsigned char wildcard_78_122_184 = gib_print_symbol(199);
            unsigned char y_75_123_185 = printf("%ld", x_74_120_182);
            unsigned char wildcard_77_124_186 = gib_print_symbol(196);
            
            return 0;
            break;
        }
        
      case 1:
        {
            GibCursor x_79_125_187 =
                      ((GibCursorGibCursorProd *) tail_224)->field0;
            GibCursor x_80_126_188 =
                      ((GibCursorGibCursorProd *) tail_224)->field1;
            unsigned char wildcard_83_127_189 = gib_print_symbol(197);
            unsigned char wildcard_86_128_190 = gib_print_symbol(199);
            unsigned char y_81_129_191 =  _print_AddTree_Tree_4(x_79_125_187);
            unsigned char wildcard_85_130_192 = gib_print_symbol(199);
            unsigned char y_82_131_193 =  _print_AddTree_Tree_4(x_80_126_188);
            unsigned char wildcard_84_132_194 = gib_print_symbol(196);
            
            return 0;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_223");
            exit(1);
        }
    }
}
int main(int argc, char **argv)
{
    int init_0 = gib_init(argc, argv);
    
    info_table_initialize();
    symbol_table_initialize();
    
    GibPtr fltPkd_135_143 = gib_alloc(sizeof(GibIntGibIntProd));
    
    ((GibIntGibIntProd *) fltPkd_135_143)->field0 = 0;
    ((GibIntGibIntProd *) fltPkd_135_143)->field1 = 1;
    
    GibPtr fltPkd_136_144 = gib_alloc(sizeof(GibIntGibIntProd));
    
    ((GibIntGibIntProd *) fltPkd_136_144)->field0 = 0;
    ((GibIntGibIntProd *) fltPkd_136_144)->field1 = 2;
    
    GibPtr fltAppE_134_145 = gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
    
    ((GibIntGibCursorGibCursorProd *) fltAppE_134_145)->field0 = 1;
    ((GibIntGibCursorGibCursorProd *) fltAppE_134_145)->field1 = fltPkd_135_143;
    ((GibIntGibCursorGibCursorProd *) fltAppE_134_145)->field2 = fltPkd_136_144;
    
    GibCursor fltAppE_133_146 =  Addone_add_5(fltAppE_134_145);
    GibCursor tmp_app_195 =  Addtwo_add_6(fltAppE_133_146);
    
     _print_AddTree_Tree_4(tmp_app_195);
    printf("\n");
    return 0;
    
    int exit_1 = gib_exit();
    
    return exit_1;
}

Compiling RTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

make -f /home/timmy/git/gibbon/gibbon-rts/Makefile  MODE=release  GC=nongen  USER_CFLAGS=" -O3  -flto " VERBOSITY=4

make: Nothing to be done for 'all'.




Compiling the program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

gcc -std=gnu11  -O3  -flto  -D_GIBBON_GENGC=0  -D_GIBBON_SIMPLE_WRITE_BARRIER=0  -D_GIBBON_EAGER_PROMOTION=1  -o /home/timmy/git/gibbon/gibbon-compiler/./examples/addimport.exe -I/home/timmy/git/gibbon/gibbon-rts/build -L/home/timmy/git/gibbon/gibbon-rts/build -Wl,-rpath=/home/timmy/git/gibbon/gibbon-rts/build /home/timmy/git/gibbon/gibbon-compiler/./examples/addimport.c /home/timmy/git/gibbon/gibbon-rts/build/gibbon_rts.o -lm  -lgibbon_rts_ng



In file included from /home/timmy/git/gibbon/gibbon-compiler/./examples/addimport.c:3:0:
/home/timmy/git/gibbon/gibbon-rts/build/gibbon_rts.h: In function ‘gib_indirection_barrier’:
/home/timmy/git/gibbon/gibbon-rts/build/gibbon_rts.h:1075:6: warning: #warning "Simple write barrier is disabled." [-Wcpp]
     #warning "Simple write barrier is disabled."
      ^~~~~~~


(Node (Leaf 4) (Leaf 5))
