 ! Responding to env Var: GIBBON_DEBUG=4
 ! We set DEBUG based on command-line verbose arg: 4
================================================================================

desugaring module: AddImport

- imports: ["Addone","Addtwo","AddTree"]

================================================================================

desugaring module: Addone

- imports: ["AddTree"]

================================================================================

desugaring module: AddTree

- imports: []

================================================================================

desugaring module: Addtwo

- imports: ["AddTree"]

 [compiler] pipeline starting, parsed program: 
================================================================================
Prog {ddefs = [(AddTree.Tree,
                DDef {tyName = "AddTree.Tree",
                      tyArgs = [],
                      dataCons = [("Leaf", [(False, IntTy)]),
                                  ("Node",
                                   [(False, PackedTy "AddTree.Tree" []),
                                    (False, PackedTy "AddTree.Tree" [])])]})],
      fundefs = [(Addone.add,
                  FunDef {funName = "Addone.add",
                          funArgs = [t],
                          funTy = ForAll []
                                         (ArrowTy [PackedTy "AddTree.Tree" []]
                                                  (PackedTy "AddTree.Tree" [])),
                          funBody = CaseE (VarE "t")
                                          [("Leaf",
                                            [(x, MetaTv $2)],
                                            DataConE (MetaTv $1)
                                                     "Leaf"
                                                     [PrimAppE AddP [VarE "x",LitE 1]]),
                                           ("Node",
                                            [(x1, MetaTv $4),(x2, MetaTv $5)],
                                            DataConE (MetaTv $3)
                                                     "Node"
                                                     [AppE "Addone.add" [] [VarE "x1"],
                                                      AppE "Addone.add" [] [VarE "x2"]])],
                          funMeta = FunMeta {funRec = NotRec,
                                             funInline = NoInline,
                                             funCanTriggerGC = False,
                                             funOptLayout = NoLayoutOpt,
                                             userConstraintsDataCon = Nothing}}),
                 (Addtwo.add,
                  FunDef {funName = "Addtwo.add",
                          funArgs = [t],
                          funTy = ForAll []
                                         (ArrowTy [PackedTy "AddTree.Tree" []]
                                                  (PackedTy "AddTree.Tree" [])),
                          funBody = CaseE (VarE "t")
                                          [("Leaf",
                                            [(x, MetaTv $2)],
                                            DataConE (MetaTv $1)
                                                     "Leaf"
                                                     [PrimAppE AddP [VarE "x",LitE 2]]),
                                           ("Node",
                                            [(x1, MetaTv $4),(x2, MetaTv $5)],
                                            DataConE (MetaTv $3)
                                                     "Node"
                                                     [AppE "Addtwo.add" [] [VarE "x1"],
                                                      AppE "Addtwo.add" [] [VarE "x2"]])],
                          funMeta = FunMeta {funRec = NotRec,
                                             funInline = NoInline,
                                             funCanTriggerGC = False,
                                             funOptLayout = NoLayoutOpt,
                                             userConstraintsDataCon = Nothing}})],
      mainExp = Just (AppE "Addone.add"
                           []
                           [AppE "Addtwo.add"
                                 []
                                 [DataConE (MetaTv $0)
                                           "Node"
                                           [DataConE (MetaTv $1) "Leaf" [LitE 1],
                                            DataConE (MetaTv $2) "Leaf" [LitE 2]]]],
                      MetaTv $3)}

 [compiler] Running pass, renameModules
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t =
    case t of
        Leaf x::$2 ->
            (Leaf $1 x + 1)
        Node x1::$4 x2::$5 ->
            (Node $3 (Addone_add_5 [] x1) (Addone_add_5 [] x2))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t =
    case t of
        Leaf x::$2 ->
            (Leaf $1 x + 2)
        Node x1::$4 x2::$5 ->
            (Node $3 (Addtwo_add_6 [] x1) (Addtwo_add_6 [] x2))

gibbon_main :: $3
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node $0 (Leaf $1 1) (Leaf $2 2))))

 [compiler] Running pass, freshen
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::$2 ->
            (Leaf $1 x_8 + 1)
        Node x1_9::$4 x2_10::$5 ->
            (Node $3 (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::$2 ->
            (Leaf $1 x_12 + 2)
        Node x1_13::$4 x2_14::$5 ->
            (Node $3 (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

gibbon_main :: $3
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node $0 (Leaf $1 1) (Leaf $2 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::Int ->
            (Leaf () x_8 + 1)
        Node x1_9::(Packed AddTree_Tree_4 []) x2_10::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::Int ->
            (Leaf () x_12 + 2)
        Node x1_13::(Packed AddTree_Tree_4 []) x2_14::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, bindLambdas
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::Int ->
            (Leaf () x_8 + 1)
        Node x1_9::(Packed AddTree_Tree_4 []) x2_10::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::Int ->
            (Leaf () x_12 + 2)
        Node x1_13::(Packed AddTree_Tree_4 []) x2_14::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, monomorphize
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::Int ->
            (Leaf () x_8 + 1)
        Node x1_9::(Packed AddTree_Tree_4 []) x2_10::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::Int ->
            (Leaf () x_12 + 2)
        Node x1_13::(Packed AddTree_Tree_4 []) x2_14::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, specLambdas
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::Int ->
            (Leaf () x_8 + 1)
        Node x1_9::(Packed AddTree_Tree_4 []) x2_10::(Packed AddTree_Tree_4 []) ->
            (Node () (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::Int ->
            (Leaf () x_12 + 2)
        Node x1_13::(Packed AddTree_Tree_4 []) x2_14::(Packed AddTree_Tree_4 []) ->
            (Node () (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, desugarL0
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::() ->
            (Leaf () x_8 + 1)
        Node x1_9::() x2_10::() ->
            (Node () (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::() ->
            (Leaf () x_12 + 2)
        Node x1_13::() x2_14::() ->
            (Node () (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_AddTree_Tree_4 arg_39 =
    case arg_39 of
        Leaf x_40::() ->
            let y_41 :: Int = x_40 in
            (Leaf () y_41)
        Node x_42::() x_43::() ->
            let y_44 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_42) in
            let y_45 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_43) in
            (Node () y_44 y_45)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_without_ptrs_AddTree_Tree_4 arg_46 =
    case arg_46 of
        Leaf x_47::() ->
            let y_48 :: Int = x_47 in
            (Leaf () y_48)
        Node x_49::() x_50::() ->
            let y_51 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49) in
            let y_52 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50) in
            (Node () y_51 y_52)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_traverse_AddTree_Tree_4 arg_53 =
    case arg_53 of
        Leaf x_54::() ->
            ()
        Node x_56::() x_57::() ->
            let y_58 :: () = (_traverse_AddTree_Tree_4 [] x_56) in
            let y_59 :: () = (_traverse_AddTree_Tree_4 [] x_57) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_print_AddTree_Tree_4 arg_60 =
    case arg_60 of
        Leaf x_61::() ->
            let wildcard_63 :: () = printsym("(Leaf") in
            let wildcard_65 :: () = printsym(" ") in
            let y_62 :: () = printint(x_61) in
            let wildcard_64 :: () = printsym(")") in
            ()
        Node x_66::() x_67::() ->
            let wildcard_70 :: () = printsym("(Node") in
            let wildcard_73 :: () = printsym(" ") in
            let y_68 :: () = (_print_AddTree_Tree_4 [] x_66) in
            let wildcard_72 :: () = printsym(" ") in
            let y_69 :: () = (_print_AddTree_Tree_4 [] x_67) in
            let wildcard_71 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, floatOutCase
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4 []) (Packed AddTree_Tree_4 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8::() ->
            (Leaf () x_8 + 1)
        Node x1_9::() x2_10::() ->
            (Node () (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12::() ->
            (Leaf () x_12 + 2)
        Node x1_13::() x2_14::() ->
            (Node () (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_AddTree_Tree_4 arg_39 =
    case arg_39 of
        Leaf x_40::() ->
            let y_41 :: Int = x_40 in
            (Leaf () y_41)
        Node x_42::() x_43::() ->
            let y_44 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_42) in
            let y_45 :: (Packed AddTree_Tree_4 []) = (_copy_AddTree_Tree_4 [] x_43) in
            (Node () y_44 y_45)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> (Packed AddTree_Tree_4 []))
_copy_without_ptrs_AddTree_Tree_4 arg_46 =
    case arg_46 of
        Leaf x_47::() ->
            let y_48 :: Int = x_47 in
            (Leaf () y_48)
        Node x_49::() x_50::() ->
            let y_51 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49) in
            let y_52 :: (Packed AddTree_Tree_4 []) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50) in
            (Node () y_51 y_52)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_traverse_AddTree_Tree_4 arg_53 =
    case arg_53 of
        Leaf x_54::() ->
            ()
        Node x_56::() x_57::() ->
            let y_58 :: () = (_traverse_AddTree_Tree_4 [] x_56) in
            let y_59 :: () = (_traverse_AddTree_Tree_4 [] x_57) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: forall. ((Packed AddTree_Tree_4 []) -> ())
_print_AddTree_Tree_4 arg_60 =
    case arg_60 of
        Leaf x_61::() ->
            let wildcard_63 :: () = printsym("(Leaf") in
            let wildcard_65 :: () = printsym(" ") in
            let y_62 :: () = printint(x_61) in
            let wildcard_64 :: () = printsym(")") in
            ()
        Node x_66::() x_67::() ->
            let wildcard_70 :: () = printsym("(Node") in
            let wildcard_73 :: () = printsym(" ") in
            let y_68 :: () = (_print_AddTree_Tree_4 [] x_66) in
            let wildcard_72 :: () = printsym(" ") in
            let y_69 :: () = (_print_AddTree_Tree_4 [] x_67) in
            let wildcard_71 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4 [])
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node () (Leaf () 1) (Leaf () 2))))

 [compiler] Running pass, toL1
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8 ->
            (Leaf x_8 + 1)
        Node x1_9 x2_10 ->
            (Node (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12 ->
            (Leaf x_12 + 2)
        Node x1_13 x2_14 ->
            (Node (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39 =
    case arg_39 of
        Leaf x_40 ->
            let y_41 :: Int = x_40 in
            (Leaf y_41)
        Node x_42 x_43 ->
            let y_44 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42) in
            let y_45 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43) in
            (Node y_44 y_45)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46 =
    case arg_46 of
        Leaf x_47 ->
            let y_48 :: Int = x_47 in
            (Leaf y_48)
        Node x_49 x_50 ->
            let y_51 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49) in
            let y_52 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50) in
            (Node y_51 y_52)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53 =
    case arg_53 of
        Leaf x_54 ->
            ()
        Node x_56 x_57 ->
            let y_58 :: () = (_traverse_AddTree_Tree_4 [] x_56) in
            let y_59 :: () = (_traverse_AddTree_Tree_4 [] x_57) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60 =
    case arg_60 of
        Leaf x_61 ->
            let wildcard_63 :: () = printsym("(Leaf") in
            let wildcard_65 :: () = printsym(" ") in
            let y_62 :: () = printint(x_61) in
            let wildcard_64 :: () = printsym(")") in
            ()
        Node x_66 x_67 ->
            let wildcard_70 :: () = printsym("(Node") in
            let wildcard_73 :: () = printsym(" ") in
            let y_68 :: () = (_print_AddTree_Tree_4 [] x_66) in
            let wildcard_72 :: () = printsym(" ") in
            let y_69 :: () = (_print_AddTree_Tree_4 [] x_67) in
            let wildcard_71 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8 ->
            (Leaf x_8 + 1)
        Node x1_9 x2_10 ->
            (Node (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12 ->
            (Leaf x_12 + 2)
        Node x1_13 x2_14 ->
            (Node (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39 =
    case arg_39 of
        Leaf x_40 ->
            let y_41 :: Int = x_40 in
            (Leaf y_41)
        Node x_42 x_43 ->
            let y_44 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42) in
            let y_45 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43) in
            (Node y_44 y_45)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46 =
    case arg_46 of
        Leaf x_47 ->
            let y_48 :: Int = x_47 in
            (Leaf y_48)
        Node x_49 x_50 ->
            let y_51 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49) in
            let y_52 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50) in
            (Node y_51 y_52)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53 =
    case arg_53 of
        Leaf x_54 ->
            ()
        Node x_56 x_57 ->
            let y_58 :: () = (_traverse_AddTree_Tree_4 [] x_56) in
            let y_59 :: () = (_traverse_AddTree_Tree_4 [] x_57) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60 =
    case arg_60 of
        Leaf x_61 ->
            let wildcard_63 :: () = printsym("(Leaf") in
            let wildcard_65 :: () = printsym(" ") in
            let y_62 :: () = printint(x_61) in
            let wildcard_64 :: () = printsym(")") in
            ()
        Node x_66 x_67 ->
            let wildcard_70 :: () = printsym("(Node") in
            let wildcard_73 :: () = printsym(" ") in
            let y_68 :: () = (_print_AddTree_Tree_4 [] x_66) in
            let wildcard_72 :: () = printsym(" ") in
            let y_69 :: () = (_print_AddTree_Tree_4 [] x_67) in
            let wildcard_71 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, benchMainExp
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8 ->
            (Leaf x_8 + 1)
        Node x1_9 x2_10 ->
            (Node (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12 ->
            (Leaf x_12 + 2)
        Node x1_13 x2_14 ->
            (Node (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39 =
    case arg_39 of
        Leaf x_40 ->
            let y_41 :: Int = x_40 in
            (Leaf y_41)
        Node x_42 x_43 ->
            let y_44 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42) in
            let y_45 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43) in
            (Node y_44 y_45)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46 =
    case arg_46 of
        Leaf x_47 ->
            let y_48 :: Int = x_47 in
            (Leaf y_48)
        Node x_49 x_50 ->
            let y_51 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49) in
            let y_52 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50) in
            (Node y_51 y_52)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53 =
    case arg_53 of
        Leaf x_54 ->
            ()
        Node x_56 x_57 ->
            let y_58 :: () = (_traverse_AddTree_Tree_4 [] x_56) in
            let y_59 :: () = (_traverse_AddTree_Tree_4 [] x_57) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60 =
    case arg_60 of
        Leaf x_61 ->
            let wildcard_63 :: () = printsym("(Leaf") in
            let wildcard_65 :: () = printsym(" ") in
            let y_62 :: () = printint(x_61) in
            let wildcard_64 :: () = printsym(")") in
            ()
        Node x_66 x_67 ->
            let wildcard_70 :: () = printsym("(Node") in
            let wildcard_73 :: () = printsym(" ") in
            let y_68 :: () = (_print_AddTree_Tree_4 [] x_66) in
            let wildcard_72 :: () = printsym(" ") in
            let y_69 :: () = (_print_AddTree_Tree_4 [] x_67) in
            let wildcard_71 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7 =
    case t_7 of
        Leaf x_8 ->
            (Leaf x_8 + 1)
        Node x1_9 x2_10 ->
            (Node (Addone_add_5 [] x1_9) (Addone_add_5 [] x2_10))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11 =
    case t_11 of
        Leaf x_12 ->
            (Leaf x_12 + 2)
        Node x1_13 x2_14 ->
            (Node (Addtwo_add_6 [] x1_13) (Addtwo_add_6 [] x2_14))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39 =
    case arg_39 of
        Leaf x_40 ->
            let y_41 :: Int = x_40 in
            (Leaf y_41)
        Node x_42 x_43 ->
            let y_44 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42) in
            let y_45 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43) in
            (Node y_44 y_45)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46 =
    case arg_46 of
        Leaf x_47 ->
            let y_48 :: Int = x_47 in
            (Leaf y_48)
        Node x_49 x_50 ->
            let y_51 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49) in
            let y_52 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50) in
            (Node y_51 y_52)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53 =
    case arg_53 of
        Leaf x_54 ->
            ()
        Node x_56 x_57 ->
            let y_58 :: () = (_traverse_AddTree_Tree_4 [] x_56) in
            let y_59 :: () = (_traverse_AddTree_Tree_4 [] x_57) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60 =
    case arg_60 of
        Leaf x_61 ->
            let wildcard_63 :: () = printsym("(Leaf") in
            let wildcard_65 :: () = printsym(" ") in
            let y_62 :: () = printint(x_61) in
            let wildcard_64 :: () = printsym(")") in
            ()
        Node x_66 x_67 ->
            let wildcard_70 :: () = printsym("(Node") in
            let wildcard_73 :: () = printsym(" ") in
            let y_68 :: () = (_print_AddTree_Tree_4 [] x_66) in
            let wildcard_72 :: () = printsym(" ") in
            let y_69 :: () = (_print_AddTree_Tree_4 [] x_67) in
            let wildcard_71 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, simplify
Removed unused functions: []
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74 =
    case t_7_74 of
        Leaf x_8_75 ->
            (Leaf x_8_75 + 1)
        Node x1_9_76 x2_10_77 ->
            (Node (Addone_add_5 [] x1_9_76) (Addone_add_5 [] x2_10_77))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78 =
    case t_11_78 of
        Leaf x_12_79 ->
            (Leaf x_12_79 + 2)
        Node x1_13_80 x2_14_81 ->
            (Node (Addtwo_add_6 [] x1_13_80) (Addtwo_add_6 [] x2_14_81))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82 =
    case arg_39_82 of
        Leaf x_40_83 ->
            let y_41_84 :: Int = x_40_83 in
            (Leaf y_41_84)
        Node x_42_85 x_43_86 ->
            let y_44_87 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85) in
            let y_45_88 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86) in
            (Node y_44_87 y_45_88)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89 =
    case arg_46_89 of
        Leaf x_47_90 ->
            let y_48_91 :: Int = x_47_90 in
            (Leaf y_48_91)
        Node x_49_92 x_50_93 ->
            let y_51_94 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92) in
            let y_52_95 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93) in
            (Node y_51_94 y_52_95)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96 =
    case arg_53_96 of
        Leaf x_54_97 ->
            ()
        Node x_56_98 x_57_99 ->
            let y_58_100 :: () = (_traverse_AddTree_Tree_4 [] x_56_98) in
            let y_59_101 :: () = (_traverse_AddTree_Tree_4 [] x_57_99) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102 =
    case arg_60_102 of
        Leaf x_61_103 ->
            let wildcard_63_104 :: () = printsym("(Leaf") in
            let wildcard_65_105 :: () = printsym(" ") in
            let y_62_106 :: () = printint(x_61_103) in
            let wildcard_64_107 :: () = printsym(")") in
            ()
        Node x_66_108 x_67_109 ->
            let wildcard_70_110 :: () = printsym("(Node") in
            let wildcard_73_111 :: () = printsym(" ") in
            let y_68_112 :: () = (_print_AddTree_Tree_4 [] x_66_108) in
            let wildcard_72_113 :: () = printsym(" ") in
            let y_69_114 :: () = (_print_AddTree_Tree_4 [] x_67_109) in
            let wildcard_71_115 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74 =
    case t_7_74 of
        Leaf x_8_75 ->
            (Leaf x_8_75 + 1)
        Node x1_9_76 x2_10_77 ->
            (Node (Addone_add_5 [] x1_9_76) (Addone_add_5 [] x2_10_77))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78 =
    case t_11_78 of
        Leaf x_12_79 ->
            (Leaf x_12_79 + 2)
        Node x1_13_80 x2_14_81 ->
            (Node (Addtwo_add_6 [] x1_13_80) (Addtwo_add_6 [] x2_14_81))

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82 =
    case arg_39_82 of
        Leaf x_40_83 ->
            let y_41_84 :: Int = x_40_83 in
            (Leaf y_41_84)
        Node x_42_85 x_43_86 ->
            let y_44_87 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85) in
            let y_45_88 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86) in
            (Node y_44_87 y_45_88)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89 =
    case arg_46_89 of
        Leaf x_47_90 ->
            let y_48_91 :: Int = x_47_90 in
            (Leaf y_48_91)
        Node x_49_92 x_50_93 ->
            let y_51_94 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92) in
            let y_52_95 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93) in
            (Node y_51_94 y_52_95)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96 =
    case arg_53_96 of
        Leaf x_54_97 ->
            ()
        Node x_56_98 x_57_99 ->
            let y_58_100 :: () = (_traverse_AddTree_Tree_4 [] x_56_98) in
            let y_59_101 :: () = (_traverse_AddTree_Tree_4 [] x_57_99) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102 =
    case arg_60_102 of
        Leaf x_61_103 ->
            let wildcard_63_104 :: () = printsym("(Leaf") in
            let wildcard_65_105 :: () = printsym(" ") in
            let y_62_106 :: () = printint(x_61_103) in
            let wildcard_64_107 :: () = printsym(")") in
            ()
        Node x_66_108 x_67_109 ->
            let wildcard_70_110 :: () = printsym("(Node") in
            let wildcard_73_111 :: () = printsym(" ") in
            let y_68_112 :: () = (_print_AddTree_Tree_4 [] x_66_108) in
            let wildcard_72_113 :: () = printsym(" ") in
            let y_69_114 :: () = (_print_AddTree_Tree_4 [] x_67_109) in
            let wildcard_71_115 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = (Addone_add_5 [] (Addtwo_add_6 [] (Node (Leaf 1) (Leaf 2))))

 [compiler] Running pass, flatten
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74 =
    case t_7_74 of
        Leaf x_8_75 ->
            let fltPkd_120 :: Int = x_8_75 + 1 in
            (Leaf fltPkd_120)
        Node x1_9_76 x2_10_77 ->
            let fltPkd_121 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_9_76) in
            let fltPkd_122 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_10_77) in
            (Node fltPkd_121 fltPkd_122)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78 =
    case t_11_78 of
        Leaf x_12_79 ->
            let fltPkd_123 :: Int = x_12_79 + 2 in
            (Leaf fltPkd_123)
        Node x1_13_80 x2_14_81 ->
            let fltPkd_124 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_13_80) in
            let fltPkd_125 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_14_81) in
            (Node fltPkd_124 fltPkd_125)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82 =
    case arg_39_82 of
        Leaf x_40_83 ->
            let y_41_84 :: Int = x_40_83 in
            (Leaf y_41_84)
        Node x_42_85 x_43_86 ->
            let y_44_87 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85) in
            let y_45_88 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86) in
            (Node y_44_87 y_45_88)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89 =
    case arg_46_89 of
        Leaf x_47_90 ->
            let y_48_91 :: Int = x_47_90 in
            (Leaf y_48_91)
        Node x_49_92 x_50_93 ->
            let y_51_94 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92) in
            let y_52_95 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93) in
            (Node y_51_94 y_52_95)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96 =
    case arg_53_96 of
        Leaf x_54_97 ->
            ()
        Node x_56_98 x_57_99 ->
            let y_58_100 :: () = (_traverse_AddTree_Tree_4 [] x_56_98) in
            let y_59_101 :: () = (_traverse_AddTree_Tree_4 [] x_57_99) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102 =
    case arg_60_102 of
        Leaf x_61_103 ->
            let wildcard_63_104 :: () = printsym("(Leaf") in
            let wildcard_65_105 :: () = printsym(" ") in
            let y_62_106 :: () = printint(x_61_103) in
            let wildcard_64_107 :: () = printsym(")") in
            ()
        Node x_66_108 x_67_109 ->
            let wildcard_70_110 :: () = printsym("(Node") in
            let wildcard_73_111 :: () = printsym(" ") in
            let y_68_112 :: () = (_print_AddTree_Tree_4 [] x_66_108) in
            let wildcard_72_113 :: () = printsym(" ") in
            let y_69_114 :: () = (_print_AddTree_Tree_4 [] x_67_109) in
            let wildcard_71_115 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_119 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_117 :: (Packed AddTree_Tree_4) = (Node fltPkd_118 fltPkd_119) in
              let fltAppE_116 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] fltAppE_117) in
              (Addone_add_5 [] fltAppE_116)

 [compiler] Running pass, simplify
Removed unused functions: []
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            let y_41_84_146 :: Int = x_40_83_145 in
            (Leaf y_41_84_146)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            let y_48_91_153 :: Int = x_47_90_152 in
            (Leaf y_48_91_153)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_119_127 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_117_128 :: (Packed AddTree_Tree_4) = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] fltAppE_117_128) in
              (Addone_add_5 [] fltAppE_116_129)

 [compiler] Running pass, inlineTriv
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_119_127 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_117_128 :: (Packed AddTree_Tree_4) = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] fltAppE_117_128) in
              (Addone_add_5 [] fltAppE_116_129)

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_119_127 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_117_128 :: (Packed AddTree_Tree_4) = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] fltAppE_117_128) in
              (Addone_add_5 [] fltAppE_116_129)

 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node (Packed AddTree_Tree_4) (Packed AddTree_Tree_4)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: (Packed AddTree_Tree_4) = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: (Packed AddTree_Tree_4) = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> (Packed AddTree_Tree_4)
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: (Packed AddTree_Tree_4) = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: (Packed AddTree_Tree_4) -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: (Packed AddTree_Tree_4) = (Leaf 1) in
              let fltPkd_119_127 :: (Packed AddTree_Tree_4) = (Leaf 2) in
              let fltAppE_117_128 :: (Packed AddTree_Tree_4) = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: (Packed AddTree_Tree_4) = (Addtwo_add_6 [] fltAppE_117_128) in
              (Addone_add_5 [] fltAppE_116_129)

 [compiler] Running pass, directL3
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: Cursor = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: Cursor = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: Cursor = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: Cursor = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: Cursor = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: Cursor = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: Cursor = (Leaf 1) in
              let fltPkd_119_127 :: Cursor = (Leaf 2) in
              let fltAppE_117_128 :: Cursor = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: Cursor = (Addtwo_add_6 [] fltAppE_117_128) in
              (Addone_add_5 [] fltAppE_116_129)

 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: Cursor = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: Cursor = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: Cursor = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: Cursor = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: Cursor = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: Cursor = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: Cursor = (Leaf 1) in
              let fltPkd_119_127 :: Cursor = (Leaf 2) in
              let fltAppE_117_128 :: Cursor = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: Cursor = (Addtwo_add_6 [] fltAppE_117_128) in
              (Addone_add_5 [] fltAppE_116_129)

 [compiler] Running pass, unariser
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: Cursor = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: Cursor = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: Cursor = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: Cursor = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: Cursor = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: Cursor = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: Cursor = (Leaf 1) in
              let fltPkd_119_127 :: Cursor = (Leaf 2) in
              let fltAppE_117_128 :: Cursor = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: Cursor = (Addtwo_add_6 [] fltAppE_117_128) in
              let tmp_app_178 :: Cursor = (Addone_add_5 [] fltAppE_116_129) in
              tmp_app_178

 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: Cursor = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: Cursor = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: Cursor = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: Cursor = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: Cursor = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: Cursor = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: Cursor = (Leaf 1) in
              let fltPkd_119_127 :: Cursor = (Leaf 2) in
              let fltAppE_117_128 :: Cursor = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: Cursor = (Addtwo_add_6 [] fltAppE_117_128) in
              let tmp_app_178 :: Cursor = (Addone_add_5 [] fltAppE_116_129) in
              tmp_app_178

 [compiler] Running pass, L3.flatten
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: Cursor = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: Cursor = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: Cursor = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: Cursor = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: Cursor = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: Cursor = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: Cursor = (Leaf 1) in
              let fltPkd_119_127 :: Cursor = (Leaf 2) in
              let fltAppE_117_128 :: Cursor = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: Cursor = (Addtwo_add_6 [] fltAppE_117_128) in
              let tmp_app_178 :: Cursor = (Addone_add_5 [] fltAppE_116_129) in
              tmp_app_178

 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_4 = Leaf Int | 
                      Node Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addone_add_5 :: Cursor -> Cursor
Addone_add_5 t_7_74_130 =
    case t_7_74_130 of
        Leaf x_8_75_131 ->
            let fltPkd_120_132 :: Int = x_8_75_131 + 1 in
            (Leaf fltPkd_120_132)
        Node x1_9_76_133 x2_10_77_134 ->
            let fltPkd_121_135 :: Cursor = (Addone_add_5 [] x1_9_76_133) in
            let fltPkd_122_136 :: Cursor = (Addone_add_5 [] x2_10_77_134) in
            (Node fltPkd_121_135 fltPkd_122_136)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
Addtwo_add_6 :: Cursor -> Cursor
Addtwo_add_6 t_11_78_137 =
    case t_11_78_137 of
        Leaf x_12_79_138 ->
            let fltPkd_123_139 :: Int = x_12_79_138 + 2 in
            (Leaf fltPkd_123_139)
        Node x1_13_80_140 x2_14_81_141 ->
            let fltPkd_124_142 :: Cursor = (Addtwo_add_6 [] x1_13_80_140) in
            let fltPkd_125_143 :: Cursor = (Addtwo_add_6 [] x2_14_81_141) in
            (Node fltPkd_124_142 fltPkd_125_143)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_4 :: Cursor -> Cursor
_copy_AddTree_Tree_4 arg_39_82_144 =
    case arg_39_82_144 of
        Leaf x_40_83_145 ->
            (Leaf x_40_83_145)
        Node x_42_85_147 x_43_86_148 ->
            let y_44_87_149 :: Cursor = (_copy_AddTree_Tree_4 [] x_42_85_147) in
            let y_45_88_150 :: Cursor = (_copy_AddTree_Tree_4 [] x_43_86_148) in
            (Node y_44_87_149 y_45_88_150)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_4 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_4 arg_46_89_151 =
    case arg_46_89_151 of
        Leaf x_47_90_152 ->
            (Leaf x_47_90_152)
        Node x_49_92_154 x_50_93_155 ->
            let y_51_94_156 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_49_92_154) in
            let y_52_95_157 :: Cursor = (_copy_without_ptrs_AddTree_Tree_4 [] x_50_93_155) in
            (Node y_51_94_156 y_52_95_157)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_4 :: Cursor -> ()
_traverse_AddTree_Tree_4 arg_53_96_158 =
    case arg_53_96_158 of
        Leaf x_54_97_159 ->
            ()
        Node x_56_98_160 x_57_99_161 ->
            let y_58_100_162 :: () = (_traverse_AddTree_Tree_4 [] x_56_98_160) in
            let y_59_101_163 :: () = (_traverse_AddTree_Tree_4 [] x_57_99_161) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_4 :: Cursor -> ()
_print_AddTree_Tree_4 arg_60_102_164 =
    case arg_60_102_164 of
        Leaf x_61_103_165 ->
            let wildcard_63_104_166 :: () = printsym("(Leaf") in
            let wildcard_65_105_167 :: () = printsym(" ") in
            let y_62_106_168 :: () = printint(x_61_103_165) in
            let wildcard_64_107_169 :: () = printsym(")") in
            ()
        Node x_66_108_170 x_67_109_171 ->
            let wildcard_70_110_172 :: () = printsym("(Node") in
            let wildcard_73_111_173 :: () = printsym(" ") in
            let y_68_112_174 :: () = (_print_AddTree_Tree_4 [] x_66_108_170) in
            let wildcard_72_113_175 :: () = printsym(" ") in
            let y_69_114_176 :: () = (_print_AddTree_Tree_4 [] x_67_109_171) in
            let wildcard_71_115_177 :: () = printsym(")") in
            ()

gibbon_main :: (Packed AddTree_Tree_4)
gibbon_main = let fltPkd_118_126 :: Cursor = (Leaf 1) in
              let fltPkd_119_127 :: Cursor = (Leaf 2) in
              let fltAppE_117_128 :: Cursor = (Node fltPkd_118_126 fltPkd_119_127) in
              let fltAppE_116_129 :: Cursor = (Addtwo_add_6 [] fltAppE_117_128) in
              let tmp_app_178 :: Cursor = (Addone_add_5 [] fltAppE_116_129) in
              tmp_app_178

 [compiler] Running pass, lower
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_4",
                    [("Leaf",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("Node",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(179, ")"),(180, "(Node"),(181, "(Leaf"),
                     (182, " ")],
      fundefs = [FunDecl {funName = "Addone_add_5",
                          funArgs = [(t_7_74_130, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_183, TagTyPacked),
                                                           (tail_184, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_7_74_130"],
                                                  bod = Switch "switch_187"
                                                               (VarTriv "tag_183")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_8_75_131,
                                                                                                IntTy)],
                                                                                      ptr = "tail_184",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_120_132,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_8_75_131",
                                                                                                                   IntTriv 1],
                                                                                                          bod = LetAllocT {lhs = "tailift_185",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_120_132")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_185"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_9_76_133,
                                                                                                CursorTy),
                                                                                               (x2_10_77_134,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_184",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_121_135,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addone_add_5",
                                                                                                      rands = [VarTriv "x1_9_76_133"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_122_136,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addone_add_5",
                                                                                                                      rands = [VarTriv "x2_10_77_134"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_186",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_121_135"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_122_136")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_186"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_183")},
                          isPure = True},
                 FunDecl {funName = "Addtwo_add_6",
                          funArgs = [(t_11_78_137, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_188, TagTyPacked),
                                                           (tail_189, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_11_78_137"],
                                                  bod = Switch "switch_192"
                                                               (VarTriv "tag_188")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_12_79_138,
                                                                                                IntTy)],
                                                                                      ptr = "tail_189",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_123_139,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_12_79_138",
                                                                                                                   IntTriv 2],
                                                                                                          bod = LetAllocT {lhs = "tailift_190",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_123_139")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_190"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_13_80_140,
                                                                                                CursorTy),
                                                                                               (x2_14_81_141,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_189",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_124_142,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addtwo_add_6",
                                                                                                      rands = [VarTriv "x1_13_80_140"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_125_143,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addtwo_add_6",
                                                                                                                      rands = [VarTriv "x2_14_81_141"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_191",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_124_142"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_125_143")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_191"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_188")},
                          isPure = True},
                 FunDecl {funName = "_copy_AddTree_Tree_4",
                          funArgs = [(arg_39_82_144, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_193, TagTyPacked),
                                                           (tail_194, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_39_82_144"],
                                                  bod = Switch "switch_197"
                                                               (VarTriv "tag_193")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_40_83_145,
                                                                                                IntTy)],
                                                                                      ptr = "tail_194",
                                                                                      bod = LetAllocT {lhs = "tailift_195",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_40_83_145")],
                                                                                                       bod = RetValsT [VarTriv "tailift_195"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_42_85_147,
                                                                                                CursorTy),
                                                                                               (x_43_86_148,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_194",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_44_87_149,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_42_85_147"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_45_88_150,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_43_86_148"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_196",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_44_87_149"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_45_88_150")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_196"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_193")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_4",
                          funArgs = [(arg_46_89_151, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_198, TagTyPacked),
                                                           (tail_199, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_46_89_151"],
                                                  bod = Switch "switch_202"
                                                               (VarTriv "tag_198")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_47_90_152,
                                                                                                IntTy)],
                                                                                      ptr = "tail_199",
                                                                                      bod = LetAllocT {lhs = "tailift_200",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_47_90_152")],
                                                                                                       bod = RetValsT [VarTriv "tailift_200"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_49_92_154,
                                                                                                CursorTy),
                                                                                               (x_50_93_155,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_199",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_51_94_156,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_49_92_154"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_52_95_157,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_50_93_155"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_201",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_51_94_156"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_52_95_157")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_201"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_198")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_4",
                          funArgs = [(arg_53_96_158, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_203, TagTyPacked),
                                                           (tail_204, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_53_96_158"],
                                                  bod = Switch "switch_205"
                                                               (VarTriv "tag_203")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_54_97_159,
                                                                                                IntTy)],
                                                                                      ptr = "tail_204",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_56_98_160,
                                                                                                CursorTy),
                                                                                               (x_57_99_161,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_204",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_58_100_162,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_56_98_160"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_59_101_163,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_57_99_161"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_203")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_4",
                          funArgs = [(arg_60_102_164, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_206, TagTyPacked),
                                                           (tail_207, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_60_102_164"],
                                                  bod = Switch "switch_208"
                                                               (VarTriv "tag_206")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_61_103_165,
                                                                                                IntTy)],
                                                                                      ptr = "tail_207",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_63_104_166,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 181],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_65_105_167,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 182],
                                                                                                                              bod = LetPrimCallT {binds = [(y_62_106_168,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_61_103_165"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_64_107_169,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 179],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_66_108_170,
                                                                                                CursorTy),
                                                                                               (x_67_109_171,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_207",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_70_110_172,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 180],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_73_111_173,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 182],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_68_112_174,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_4",
                                                                                                                                              rands = [VarTriv "x_66_108_170"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_72_113_175,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 182],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_69_114_176,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_4",
                                                                                                                                                                                  rands = [VarTriv "x_67_109_171"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_71_115_177,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 179],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_206")},
                          isPure = True}],
      mainExp = Just PrintExp (LetAllocT
                                        {lhs = "fltPkd_118_126",
                                         vals = [(IntTy, IntTriv 0),(IntTy, IntTriv 1)],
                                         bod = LetAllocT {lhs = "fltPkd_119_127",
                                                          vals = [(IntTy, IntTriv 0),
                                                                  (IntTy, IntTriv 2)],
                                                          bod = LetAllocT {lhs = "fltAppE_117_128",
                                                                           vals = [(IntTy,
                                                                                    IntTriv 1),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_118_126"),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_119_127")],
                                                                           bod = LetCallT {async = False,
                                                                                           binds = [(fltAppE_116_129,
                                                                                                     CursorTy)],
                                                                                           rator = "Addtwo_add_6",
                                                                                           rands = [VarTriv "fltAppE_117_128"],
                                                                                           bod = LetCallT {async = False,
                                                                                                           binds = [(tmp_app_178,
                                                                                                                     CursorTy)],
                                                                                                           rator = "Addone_add_5",
                                                                                                           rands = [VarTriv "fltAppE_116_129"],
                                                                                                           bod = LetCallT {async = False,
                                                                                                                           binds = [],
                                                                                                                           rator = "_print_AddTree_Tree_4",
                                                                                                                           rands = [VarTriv "tmp_app_178"],
                                                                                                                           bod = LetPrimCallT {binds = [],
                                                                                                                                               prim = PrintString "\n",
                                                                                                                                               rands = [],
                                                                                                                                               bod = RetValsT []}}}}}}})}

 [compiler] Running pass, lateInlineTriv
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_4",
                    [("Leaf",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("Node",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(179, ")"),(180, "(Node"),(181, "(Leaf"),
                     (182, " ")],
      fundefs = [FunDecl {funName = "Addone_add_5",
                          funArgs = [(t_7_74_130, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_183, TagTyPacked),
                                                           (tail_184, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_7_74_130"],
                                                  bod = Switch "switch_187"
                                                               (VarTriv "tag_183")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_8_75_131,
                                                                                                IntTy)],
                                                                                      ptr = "tail_184",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_120_132,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_8_75_131",
                                                                                                                   IntTriv 1],
                                                                                                          bod = LetAllocT {lhs = "tailift_185",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_120_132")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_185"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_9_76_133,
                                                                                                CursorTy),
                                                                                               (x2_10_77_134,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_184",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_121_135,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addone_add_5",
                                                                                                      rands = [VarTriv "x1_9_76_133"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_122_136,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addone_add_5",
                                                                                                                      rands = [VarTriv "x2_10_77_134"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_186",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_121_135"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_122_136")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_186"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_183")},
                          isPure = True},
                 FunDecl {funName = "Addtwo_add_6",
                          funArgs = [(t_11_78_137, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_188, TagTyPacked),
                                                           (tail_189, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_11_78_137"],
                                                  bod = Switch "switch_192"
                                                               (VarTriv "tag_188")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_12_79_138,
                                                                                                IntTy)],
                                                                                      ptr = "tail_189",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_123_139,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_12_79_138",
                                                                                                                   IntTriv 2],
                                                                                                          bod = LetAllocT {lhs = "tailift_190",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_123_139")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_190"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_13_80_140,
                                                                                                CursorTy),
                                                                                               (x2_14_81_141,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_189",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_124_142,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addtwo_add_6",
                                                                                                      rands = [VarTriv "x1_13_80_140"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_125_143,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addtwo_add_6",
                                                                                                                      rands = [VarTriv "x2_14_81_141"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_191",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_124_142"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_125_143")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_191"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_188")},
                          isPure = True},
                 FunDecl {funName = "_copy_AddTree_Tree_4",
                          funArgs = [(arg_39_82_144, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_193, TagTyPacked),
                                                           (tail_194, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_39_82_144"],
                                                  bod = Switch "switch_197"
                                                               (VarTriv "tag_193")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_40_83_145,
                                                                                                IntTy)],
                                                                                      ptr = "tail_194",
                                                                                      bod = LetAllocT {lhs = "tailift_195",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_40_83_145")],
                                                                                                       bod = RetValsT [VarTriv "tailift_195"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_42_85_147,
                                                                                                CursorTy),
                                                                                               (x_43_86_148,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_194",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_44_87_149,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_42_85_147"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_45_88_150,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_43_86_148"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_196",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_44_87_149"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_45_88_150")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_196"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_193")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_4",
                          funArgs = [(arg_46_89_151, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_198, TagTyPacked),
                                                           (tail_199, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_46_89_151"],
                                                  bod = Switch "switch_202"
                                                               (VarTriv "tag_198")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_47_90_152,
                                                                                                IntTy)],
                                                                                      ptr = "tail_199",
                                                                                      bod = LetAllocT {lhs = "tailift_200",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_47_90_152")],
                                                                                                       bod = RetValsT [VarTriv "tailift_200"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_49_92_154,
                                                                                                CursorTy),
                                                                                               (x_50_93_155,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_199",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_51_94_156,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_49_92_154"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_52_95_157,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_50_93_155"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_201",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_51_94_156"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_52_95_157")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_201"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_198")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_4",
                          funArgs = [(arg_53_96_158, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_203, TagTyPacked),
                                                           (tail_204, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_53_96_158"],
                                                  bod = Switch "switch_205"
                                                               (VarTriv "tag_203")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_54_97_159,
                                                                                                IntTy)],
                                                                                      ptr = "tail_204",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_56_98_160,
                                                                                                CursorTy),
                                                                                               (x_57_99_161,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_204",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_58_100_162,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_56_98_160"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_59_101_163,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_57_99_161"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_203")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_4",
                          funArgs = [(arg_60_102_164, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_206, TagTyPacked),
                                                           (tail_207, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_60_102_164"],
                                                  bod = Switch "switch_208"
                                                               (VarTriv "tag_206")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_61_103_165,
                                                                                                IntTy)],
                                                                                      ptr = "tail_207",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_63_104_166,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 181],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_65_105_167,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 182],
                                                                                                                              bod = LetPrimCallT {binds = [(y_62_106_168,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_61_103_165"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_64_107_169,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 179],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_66_108_170,
                                                                                                CursorTy),
                                                                                               (x_67_109_171,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_207",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_70_110_172,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 180],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_73_111_173,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 182],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_68_112_174,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_4",
                                                                                                                                              rands = [VarTriv "x_66_108_170"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_72_113_175,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 182],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_69_114_176,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_4",
                                                                                                                                                                                  rands = [VarTriv "x_67_109_171"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_71_115_177,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 179],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_206")},
                          isPure = True}],
      mainExp = Just PrintExp (LetAllocT
                                        {lhs = "fltPkd_118_126",
                                         vals = [(IntTy, IntTriv 0),(IntTy, IntTriv 1)],
                                         bod = LetAllocT {lhs = "fltPkd_119_127",
                                                          vals = [(IntTy, IntTriv 0),
                                                                  (IntTy, IntTriv 2)],
                                                          bod = LetAllocT {lhs = "fltAppE_117_128",
                                                                           vals = [(IntTy,
                                                                                    IntTriv 1),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_118_126"),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_119_127")],
                                                                           bod = LetCallT {async = False,
                                                                                           binds = [(fltAppE_116_129,
                                                                                                     CursorTy)],
                                                                                           rator = "Addtwo_add_6",
                                                                                           rands = [VarTriv "fltAppE_117_128"],
                                                                                           bod = LetCallT {async = False,
                                                                                                           binds = [(tmp_app_178,
                                                                                                                     CursorTy)],
                                                                                                           rator = "Addone_add_5",
                                                                                                           rands = [VarTriv "fltAppE_116_129"],
                                                                                                           bod = LetCallT {async = False,
                                                                                                                           binds = [],
                                                                                                                           rator = "_print_AddTree_Tree_4",
                                                                                                                           rands = [VarTriv "tmp_app_178"],
                                                                                                                           bod = LetPrimCallT {binds = [],
                                                                                                                                               prim = PrintString "\n",
                                                                                                                                               rands = [],
                                                                                                                                               bod = RetValsT []}}}}}}})}

 [compiler] Running pass, rearrangeFree
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_4",
                    [("Leaf",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("Node",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(179, ")"),(180, "(Node"),(181, "(Leaf"),
                     (182, " ")],
      fundefs = [FunDecl {funName = "Addone_add_5",
                          funArgs = [(t_7_74_130, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_183, TagTyPacked),
                                                           (tail_184, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_7_74_130"],
                                                  bod = Switch "switch_187"
                                                               (VarTriv "tag_183")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_8_75_131,
                                                                                                IntTy)],
                                                                                      ptr = "tail_184",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_120_132,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_8_75_131",
                                                                                                                   IntTriv 1],
                                                                                                          bod = LetAllocT {lhs = "tailift_185",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_120_132")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_185"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_9_76_133,
                                                                                                CursorTy),
                                                                                               (x2_10_77_134,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_184",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_121_135,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addone_add_5",
                                                                                                      rands = [VarTriv "x1_9_76_133"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_122_136,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addone_add_5",
                                                                                                                      rands = [VarTriv "x2_10_77_134"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_186",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_121_135"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_122_136")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_186"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_183")},
                          isPure = True},
                 FunDecl {funName = "Addtwo_add_6",
                          funArgs = [(t_11_78_137, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_188, TagTyPacked),
                                                           (tail_189, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "t_11_78_137"],
                                                  bod = Switch "switch_192"
                                                               (VarTriv "tag_188")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_12_79_138,
                                                                                                IntTy)],
                                                                                      ptr = "tail_189",
                                                                                      bod = LetPrimCallT {binds = [(fltPkd_123_139,
                                                                                                                    IntTy)],
                                                                                                          prim = AddP,
                                                                                                          rands = [VarTriv "x_12_79_138",
                                                                                                                   IntTriv 2],
                                                                                                          bod = LetAllocT {lhs = "tailift_190",
                                                                                                                           vals = [(IntTy,
                                                                                                                                    IntTriv 0),
                                                                                                                                   (IntTy,
                                                                                                                                    VarTriv "fltPkd_123_139")],
                                                                                                                           bod = RetValsT [VarTriv "tailift_190"]}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x1_13_80_140,
                                                                                                CursorTy),
                                                                                               (x2_14_81_141,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_189",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(fltPkd_124_142,
                                                                                                                CursorTy)],
                                                                                                      rator = "Addtwo_add_6",
                                                                                                      rands = [VarTriv "x1_13_80_140"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(fltPkd_125_143,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "Addtwo_add_6",
                                                                                                                      rands = [VarTriv "x2_14_81_141"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_191",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_124_142"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "fltPkd_125_143")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_191"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_188")},
                          isPure = True},
                 FunDecl {funName = "_copy_AddTree_Tree_4",
                          funArgs = [(arg_39_82_144, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_193, TagTyPacked),
                                                           (tail_194, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_39_82_144"],
                                                  bod = Switch "switch_197"
                                                               (VarTriv "tag_193")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_40_83_145,
                                                                                                IntTy)],
                                                                                      ptr = "tail_194",
                                                                                      bod = LetAllocT {lhs = "tailift_195",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_40_83_145")],
                                                                                                       bod = RetValsT [VarTriv "tailift_195"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_42_85_147,
                                                                                                CursorTy),
                                                                                               (x_43_86_148,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_194",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_44_87_149,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_42_85_147"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_45_88_150,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_43_86_148"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_196",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_44_87_149"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_45_88_150")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_196"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_193")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_4",
                          funArgs = [(arg_46_89_151, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_198, TagTyPacked),
                                                           (tail_199, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_46_89_151"],
                                                  bod = Switch "switch_202"
                                                               (VarTriv "tag_198")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_47_90_152,
                                                                                                IntTy)],
                                                                                      ptr = "tail_199",
                                                                                      bod = LetAllocT {lhs = "tailift_200",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_47_90_152")],
                                                                                                       bod = RetValsT [VarTriv "tailift_200"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_49_92_154,
                                                                                                CursorTy),
                                                                                               (x_50_93_155,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_199",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_51_94_156,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_49_92_154"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_52_95_157,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_50_93_155"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_201",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_51_94_156"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_52_95_157")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_201"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_198")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_4",
                          funArgs = [(arg_53_96_158, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_203, TagTyPacked),
                                                           (tail_204, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_53_96_158"],
                                                  bod = Switch "switch_205"
                                                               (VarTriv "tag_203")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_54_97_159,
                                                                                                IntTy)],
                                                                                      ptr = "tail_204",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_56_98_160,
                                                                                                CursorTy),
                                                                                               (x_57_99_161,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_204",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_58_100_162,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                      rands = [VarTriv "x_56_98_160"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_59_101_163,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_4",
                                                                                                                      rands = [VarTriv "x_57_99_161"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_203")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_4",
                          funArgs = [(arg_60_102_164, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_206, TagTyPacked),
                                                           (tail_207, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_60_102_164"],
                                                  bod = Switch "switch_208"
                                                               (VarTriv "tag_206")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_61_103_165,
                                                                                                IntTy)],
                                                                                      ptr = "tail_207",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_63_104_166,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 181],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_65_105_167,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 182],
                                                                                                                              bod = LetPrimCallT {binds = [(y_62_106_168,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_61_103_165"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_64_107_169,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 179],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_66_108_170,
                                                                                                CursorTy),
                                                                                               (x_67_109_171,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_207",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_70_110_172,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 180],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_73_111_173,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 182],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_68_112_174,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_4",
                                                                                                                                              rands = [VarTriv "x_66_108_170"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_72_113_175,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 182],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_69_114_176,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_4",
                                                                                                                                                                                  rands = [VarTriv "x_67_109_171"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_71_115_177,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 179],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_206")},
                          isPure = True}],
      mainExp = Just PrintExp (LetAllocT
                                        {lhs = "fltPkd_118_126",
                                         vals = [(IntTy, IntTriv 0),(IntTy, IntTriv 1)],
                                         bod = LetAllocT {lhs = "fltPkd_119_127",
                                                          vals = [(IntTy, IntTriv 0),
                                                                  (IntTy, IntTriv 2)],
                                                          bod = LetAllocT {lhs = "fltAppE_117_128",
                                                                           vals = [(IntTy,
                                                                                    IntTriv 1),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_118_126"),
                                                                                   (CursorTy,
                                                                                    VarTriv "fltPkd_119_127")],
                                                                           bod = LetCallT {async = False,
                                                                                           binds = [(fltAppE_116_129,
                                                                                                     CursorTy)],
                                                                                           rator = "Addtwo_add_6",
                                                                                           rands = [VarTriv "fltAppE_117_128"],
                                                                                           bod = LetCallT {async = False,
                                                                                                           binds = [(tmp_app_178,
                                                                                                                     CursorTy)],
                                                                                                           rator = "Addone_add_5",
                                                                                                           rands = [VarTriv "fltAppE_116_129"],
                                                                                                           bod = LetCallT {async = False,
                                                                                                                           binds = [],
                                                                                                                           rator = "_print_AddTree_Tree_4",
                                                                                                                           rands = [VarTriv "tmp_app_178"],
                                                                                                                           bod = LetPrimCallT {binds = [],
                                                                                                                                               prim = PrintString "\n",
                                                                                                                                               rands = [],
                                                                                                                                               bod = RetValsT []}}}}}}})}

 [compiler] Final C codegen: 13304 characters.
================================================================================
/* Gibbon program. */

#include "gibbon_rts.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>
#include <alloca.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdarg.h>
#include <errno.h>
#include <uthash.h>

#ifdef _WIN64
#include <windows.h>
#endif

#ifdef _GIBBON_POINTER
#include <gc.h>
#endif

#ifdef _GIBBON_PARALLEL
#include <cilk/cilk.h>
#include <cilk/cilk_api.h>
#endif

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Program starts here
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

typedef struct GibIntProd_struct {
            GibInt field0;
        } GibIntProd;
typedef struct GibIntGibIntProd_struct {
            GibInt field0;
            GibInt field1;
        } GibIntGibIntProd;
typedef struct GibIntGibCursorGibCursorProd_struct {
            GibInt field0;
            GibCursor field1;
            GibCursor field2;
        } GibIntGibCursorGibCursorProd;
typedef struct GibPackedTagGibCursorProd_struct {
            GibPackedTag field0;
            GibCursor field1;
        } GibPackedTagGibCursorProd;
typedef struct GibCursorProd_struct {
            GibCursor field0;
        } GibCursorProd;
typedef struct GibCursorGibCursorProd_struct {
            GibCursor field0;
            GibCursor field1;
        } GibCursorGibCursorProd;
GibCursor Addone_add_5(GibCursor t_7_74_130);
GibCursor Addtwo_add_6(GibCursor t_11_78_137);
GibCursor _copy_AddTree_Tree_4(GibCursor arg_39_82_144);
GibCursor _copy_without_ptrs_AddTree_Tree_4(GibCursor arg_46_89_151);
unsigned char _traverse_AddTree_Tree_4(GibCursor arg_53_96_158);
unsigned char _print_AddTree_Tree_4(GibCursor arg_60_102_164);
typedef enum {
            GibInt_T,
            GibFloat_T,
            GibSym_T,
            GibBool_T,
            GibVector_T,
            GibList_T,
            GibCursor_T,
            AddTree_Tree_4_T,
        } GibDatatype;
void info_table_initialize(void)
{
    int error = gib_info_table_initialize(8);
    
    if (error < 0) {
        fprintf(stderr, "Couldn't initialize info table, errorno=%d", error);
        exit(1);
    }
    
    GibDatatype field_tys[1];
    
    error = gib_info_table_insert_packed_dcon(AddTree_Tree_4_T, 0, 8, 0, 1, 0,
                                              field_tys, 0);
    if (error < 0) {
        fprintf(stderr,
                "Couldn't insert into info table, errorno=%d, tycon=%d, dcon=%d",
                error, AddTree_Tree_4_T, 0);
        exit(1);
    }
    error = gib_info_table_insert_packed_dcon(AddTree_Tree_4_T, 1, 0, 2, 0, 0,
                                              field_tys, 0);
    if (error < 0) {
        fprintf(stderr,
                "Couldn't insert into info table, errorno=%d, tycon=%d, dcon=%d",
                error, AddTree_Tree_4_T, 1);
        exit(1);
    }
    gib_info_table_finalize();
}
void symbol_table_initialize(void)
{
    gib_add_symbol(179, ")");
    gib_add_symbol(180, "(Node");
    gib_add_symbol(181, "(Leaf");
    gib_add_symbol(182, " ");
}
GibCursor Addone_add_5(GibCursor t_7_74_130)
{
    GibPackedTag tag_183 = *(GibPackedTag *) t_7_74_130;
    GibCursor tail_184 = t_7_74_130 + sizeof(GibInt);
    
    
  switch_187:
    ;
    switch (tag_183) {
        
      case 0:
        {
            GibInt x_8_75_131 = ((GibIntProd *) tail_184)->field0;
            GibInt fltPkd_120_132 = x_8_75_131 + 1;
            GibPtr tailift_185 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_185)->field0 = 0;
            ((GibIntGibIntProd *) tailift_185)->field1 = fltPkd_120_132;
            return tailift_185;
            break;
        }
        
      case 1:
        {
            GibCursor x1_9_76_133 =
                      ((GibCursorGibCursorProd *) tail_184)->field0;
            GibCursor x2_10_77_134 =
                      ((GibCursorGibCursorProd *) tail_184)->field1;
            GibCursor fltPkd_121_135 =  Addone_add_5(x1_9_76_133);
            GibCursor fltPkd_122_136 =  Addone_add_5(x2_10_77_134);
            GibPtr tailift_186 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_186)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_186)->field1 =
                fltPkd_121_135;
            ((GibIntGibCursorGibCursorProd *) tailift_186)->field2 =
                fltPkd_122_136;
            return tailift_186;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_183");
            exit(1);
        }
    }
}
GibCursor Addtwo_add_6(GibCursor t_11_78_137)
{
    GibPackedTag tag_188 = *(GibPackedTag *) t_11_78_137;
    GibCursor tail_189 = t_11_78_137 + sizeof(GibInt);
    
    
  switch_192:
    ;
    switch (tag_188) {
        
      case 0:
        {
            GibInt x_12_79_138 = ((GibIntProd *) tail_189)->field0;
            GibInt fltPkd_123_139 = x_12_79_138 + 2;
            GibPtr tailift_190 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_190)->field0 = 0;
            ((GibIntGibIntProd *) tailift_190)->field1 = fltPkd_123_139;
            return tailift_190;
            break;
        }
        
      case 1:
        {
            GibCursor x1_13_80_140 =
                      ((GibCursorGibCursorProd *) tail_189)->field0;
            GibCursor x2_14_81_141 =
                      ((GibCursorGibCursorProd *) tail_189)->field1;
            GibCursor fltPkd_124_142 =  Addtwo_add_6(x1_13_80_140);
            GibCursor fltPkd_125_143 =  Addtwo_add_6(x2_14_81_141);
            GibPtr tailift_191 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_191)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_191)->field1 =
                fltPkd_124_142;
            ((GibIntGibCursorGibCursorProd *) tailift_191)->field2 =
                fltPkd_125_143;
            return tailift_191;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_188");
            exit(1);
        }
    }
}
GibCursor _copy_AddTree_Tree_4(GibCursor arg_39_82_144)
{
    GibPackedTag tag_193 = *(GibPackedTag *) arg_39_82_144;
    GibCursor tail_194 = arg_39_82_144 + sizeof(GibInt);
    
    
  switch_197:
    ;
    switch (tag_193) {
        
      case 0:
        {
            GibInt x_40_83_145 = ((GibIntProd *) tail_194)->field0;
            GibPtr tailift_195 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_195)->field0 = 0;
            ((GibIntGibIntProd *) tailift_195)->field1 = x_40_83_145;
            return tailift_195;
            break;
        }
        
      case 1:
        {
            GibCursor x_42_85_147 =
                      ((GibCursorGibCursorProd *) tail_194)->field0;
            GibCursor x_43_86_148 =
                      ((GibCursorGibCursorProd *) tail_194)->field1;
            GibCursor y_44_87_149 =  _copy_AddTree_Tree_4(x_42_85_147);
            GibCursor y_45_88_150 =  _copy_AddTree_Tree_4(x_43_86_148);
            GibPtr tailift_196 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_196)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_196)->field1 =
                y_44_87_149;
            ((GibIntGibCursorGibCursorProd *) tailift_196)->field2 =
                y_45_88_150;
            return tailift_196;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_193");
            exit(1);
        }
    }
}
GibCursor _copy_without_ptrs_AddTree_Tree_4(GibCursor arg_46_89_151)
{
    GibPackedTag tag_198 = *(GibPackedTag *) arg_46_89_151;
    GibCursor tail_199 = arg_46_89_151 + sizeof(GibInt);
    
    
  switch_202:
    ;
    switch (tag_198) {
        
      case 0:
        {
            GibInt x_47_90_152 = ((GibIntProd *) tail_199)->field0;
            GibPtr tailift_200 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_200)->field0 = 0;
            ((GibIntGibIntProd *) tailift_200)->field1 = x_47_90_152;
            return tailift_200;
            break;
        }
        
      case 1:
        {
            GibCursor x_49_92_154 =
                      ((GibCursorGibCursorProd *) tail_199)->field0;
            GibCursor x_50_93_155 =
                      ((GibCursorGibCursorProd *) tail_199)->field1;
            GibCursor y_51_94_156 =
                       _copy_without_ptrs_AddTree_Tree_4(x_49_92_154);
            GibCursor y_52_95_157 =
                       _copy_without_ptrs_AddTree_Tree_4(x_50_93_155);
            GibPtr tailift_201 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_201)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_201)->field1 =
                y_51_94_156;
            ((GibIntGibCursorGibCursorProd *) tailift_201)->field2 =
                y_52_95_157;
            return tailift_201;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_198");
            exit(1);
        }
    }
}
unsigned char _traverse_AddTree_Tree_4(GibCursor arg_53_96_158)
{
    GibPackedTag tag_203 = *(GibPackedTag *) arg_53_96_158;
    GibCursor tail_204 = arg_53_96_158 + sizeof(GibInt);
    
    
  switch_205:
    ;
    switch (tag_203) {
        
      case 0:
        {
            GibInt x_54_97_159 = ((GibIntProd *) tail_204)->field0;
            
            return 0;
            break;
        }
        
      case 1:
        {
            GibCursor x_56_98_160 =
                      ((GibCursorGibCursorProd *) tail_204)->field0;
            GibCursor x_57_99_161 =
                      ((GibCursorGibCursorProd *) tail_204)->field1;
            unsigned char y_58_100_162 =  _traverse_AddTree_Tree_4(x_56_98_160);
            unsigned char y_59_101_163 =  _traverse_AddTree_Tree_4(x_57_99_161);
            
            return 0;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_203");
            exit(1);
        }
    }
}
unsigned char _print_AddTree_Tree_4(GibCursor arg_60_102_164)
{
    GibPackedTag tag_206 = *(GibPackedTag *) arg_60_102_164;
    GibCursor tail_207 = arg_60_102_164 + sizeof(GibInt);
    
    
  switch_208:
    ;
    switch (tag_206) {
        
      case 0:
        {
            GibInt x_61_103_165 = ((GibIntProd *) tail_207)->field0;
            unsigned char wildcard_63_104_166 = gib_print_symbol(181);
            unsigned char wildcard_65_105_167 = gib_print_symbol(182);
            unsigned char y_62_106_168 = printf("%ld", x_61_103_165);
            unsigned char wildcard_64_107_169 = gib_print_symbol(179);
            
            return 0;
            break;
        }
        
      case 1:
        {
            GibCursor x_66_108_170 =
                      ((GibCursorGibCursorProd *) tail_207)->field0;
            GibCursor x_67_109_171 =
                      ((GibCursorGibCursorProd *) tail_207)->field1;
            unsigned char wildcard_70_110_172 = gib_print_symbol(180);
            unsigned char wildcard_73_111_173 = gib_print_symbol(182);
            unsigned char y_68_112_174 =  _print_AddTree_Tree_4(x_66_108_170);
            unsigned char wildcard_72_113_175 = gib_print_symbol(182);
            unsigned char y_69_114_176 =  _print_AddTree_Tree_4(x_67_109_171);
            unsigned char wildcard_71_115_177 = gib_print_symbol(179);
            
            return 0;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_206");
            exit(1);
        }
    }
}
int main(int argc, char **argv)
{
    int init_0 = gib_init(argc, argv);
    
    info_table_initialize();
    symbol_table_initialize();
    
    GibPtr fltPkd_118_126 = gib_alloc(sizeof(GibIntGibIntProd));
    
    ((GibIntGibIntProd *) fltPkd_118_126)->field0 = 0;
    ((GibIntGibIntProd *) fltPkd_118_126)->field1 = 1;
    
    GibPtr fltPkd_119_127 = gib_alloc(sizeof(GibIntGibIntProd));
    
    ((GibIntGibIntProd *) fltPkd_119_127)->field0 = 0;
    ((GibIntGibIntProd *) fltPkd_119_127)->field1 = 2;
    
    GibPtr fltAppE_117_128 = gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
    
    ((GibIntGibCursorGibCursorProd *) fltAppE_117_128)->field0 = 1;
    ((GibIntGibCursorGibCursorProd *) fltAppE_117_128)->field1 = fltPkd_118_126;
    ((GibIntGibCursorGibCursorProd *) fltAppE_117_128)->field2 = fltPkd_119_127;
    
    GibCursor fltAppE_116_129 =  Addtwo_add_6(fltAppE_117_128);
    GibCursor tmp_app_178 =  Addone_add_5(fltAppE_116_129);
    
     _print_AddTree_Tree_4(tmp_app_178);
    printf("\n");
    return 0;
    
    int exit_1 = gib_exit();
    
    return exit_1;
}

Compiling RTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

make -f /home/timmy/git/gibbon/gibbon-rts/Makefile  MODE=release  GC=nongen  USER_CFLAGS=" -O3  -flto " VERBOSITY=4

make: Nothing to be done for 'all'.




Compiling the program
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

gcc -std=gnu11  -O3  -flto  -D_GIBBON_GENGC=0  -D_GIBBON_SIMPLE_WRITE_BARRIER=0  -D_GIBBON_EAGER_PROMOTION=1  -o /home/timmy/git/gibbon/gibbon-compiler/./examples/addimport.exe -I/home/timmy/git/gibbon/gibbon-rts/build -L/home/timmy/git/gibbon/gibbon-rts/build -Wl,-rpath=/home/timmy/git/gibbon/gibbon-rts/build /home/timmy/git/gibbon/gibbon-compiler/./examples/addimport.c /home/timmy/git/gibbon/gibbon-rts/build/gibbon_rts.o -lm  -lgibbon_rts_ng



In file included from /home/timmy/git/gibbon/gibbon-compiler/./examples/addimport.c:3:0:
/home/timmy/git/gibbon/gibbon-rts/build/gibbon_rts.h: In function ‘gib_indirection_barrier’:
/home/timmy/git/gibbon/gibbon-rts/build/gibbon_rts.h:1075:6: warning: #warning "Simple write barrier is disabled." [-Wcpp]
     #warning "Simple write barrier is disabled."
      ^~~~~~~


(Node (Leaf 4) (Leaf 5))
