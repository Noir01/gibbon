 ! Responding to env Var: GIBBON_DEBUG=4
 ! We set DEBUG based on command-line verbose arg: 4
================================================================================

desugaring module: AddTree

- imports: []

- aliases: fromList []

- imports: fromList []

 [compiler] pipeline starting, parsed program: 
================================================================================
Prog {ddefs = [(AddTree.Tree,
                DDef {tyName = "AddTree.Tree",
                      tyArgs = [],
                      dataCons = [("AddTree.Leaf", [(False, IntTy)]),
                                  ("AddTree.Node",
                                   [(False, PackedTy "AddTree.Tree" []),
                                    (False, PackedTy "AddTree.Tree" [])])]})],
      fundefs = [(AddTree.sum,
                  FunDef {funName = "AddTree.sum",
                          funArgs = [t],
                          funTy = ForAll [] (ArrowTy [PackedTy "AddTree.Tree" []] IntTy),
                          funBody = CaseE (VarE "t")
                                          [("AddTree.Leaf", [(v, MetaTv $1)], VarE "v"),
                                           ("AddTree.Node",
                                            [(l, MetaTv $2),(r, MetaTv $3)],
                                            PrimAppE AddP
                                                     [AppE "AddTree.sum" [] [VarE "l"],
                                                      AppE "AddTree.sum" [] [VarE "r"]])],
                          funMeta = FunMeta {funRec = NotRec,
                                             funInline = NoInline,
                                             funCanTriggerGC = False,
                                             funOptLayout = NoLayoutOpt,
                                             userConstraintsDataCon = Nothing}})],
      mainExp = Nothing}

 [compiler] Running pass, freshConstructors
Pass output:
================================================================================
data AddTree.Tree = AddTree_Leaf_4 Int | 
                    AddTree_Node_5 (Packed AddTree.Tree []) (Packed AddTree.Tree [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree.sum :: forall. ((Packed AddTree.Tree []) -> Int)
AddTree.sum t =
    case t of
        AddTree_Leaf_4 v::$1 ->
            v
        AddTree_Node_5 l::$2 r::$3 ->
            (AddTree.sum [] l) + (AddTree.sum [] r)


 [compiler] Running pass, renameModules
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t =
    case t of
        AddTree_Leaf_4 v::$1 ->
            v
        AddTree_Node_5 l::$2 r::$3 ->
            (AddTree_sum_7 [] l) + (AddTree_sum_7 [] r)


 [compiler] Running pass, freshen
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::$1 ->
            v_9
        AddTree_Node_5 l_10::$2 r_11::$3 ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)


 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::Int ->
            v_9
        AddTree_Node_5 l_10::(Packed AddTree_Tree_6 []) r_11::(Packed AddTree_Tree_6 []) ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)


 [compiler] Running pass, bindLambdas
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::Int ->
            v_9
        AddTree_Node_5 l_10::(Packed AddTree_Tree_6 []) r_11::(Packed AddTree_Tree_6 []) ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)


 [compiler] Running pass, monomorphize
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::Int ->
            v_9
        AddTree_Node_5 l_10::(Packed AddTree_Tree_6 []) r_11::(Packed AddTree_Tree_6 []) ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)


 [compiler] Running pass, specLambdas
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::Int ->
            v_9
        AddTree_Node_5 l_10::(Packed AddTree_Tree_6 []) r_11::(Packed AddTree_Tree_6 []) ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)


 [compiler] Running pass, desugarL0
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::() ->
            v_9
        AddTree_Node_5 l_10::() r_11::() ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> (Packed AddTree_Tree_6 []))
_copy_AddTree_Tree_6 arg_20 =
    case arg_20 of
        AddTree_Leaf_4 x_21::() ->
            let y_22 :: Int = x_21 in
            (AddTree_Leaf_4 () y_22)
        AddTree_Node_5 x_23::() x_24::() ->
            let y_25 :: (Packed AddTree_Tree_6 []) = (_copy_AddTree_Tree_6 [] x_23) in
            let y_26 :: (Packed AddTree_Tree_6 []) = (_copy_AddTree_Tree_6 [] x_24) in
            (AddTree_Node_5 () y_25 y_26)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> (Packed AddTree_Tree_6 []))
_copy_without_ptrs_AddTree_Tree_6 arg_27 =
    case arg_27 of
        AddTree_Leaf_4 x_28::() ->
            let y_29 :: Int = x_28 in
            (AddTree_Leaf_4 () y_29)
        AddTree_Node_5 x_30::() x_31::() ->
            let y_32 :: (Packed AddTree_Tree_6 []) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30) in
            let y_33 :: (Packed AddTree_Tree_6 []) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31) in
            (AddTree_Node_5 () y_32 y_33)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> ())
_traverse_AddTree_Tree_6 arg_34 =
    case arg_34 of
        AddTree_Leaf_4 x_35::() ->
            ()
        AddTree_Node_5 x_37::() x_38::() ->
            let y_39 :: () = (_traverse_AddTree_Tree_6 [] x_37) in
            let y_40 :: () = (_traverse_AddTree_Tree_6 [] x_38) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> ())
_print_AddTree_Tree_6 arg_41 =
    case arg_41 of
        AddTree_Leaf_4 x_42::() ->
            let wildcard_44 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46 :: () = printsym(" ") in
            let y_43 :: () = printint(x_42) in
            let wildcard_45 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47::() x_48::() ->
            let wildcard_51 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54 :: () = printsym(" ") in
            let y_49 :: () = (_print_AddTree_Tree_6 [] x_47) in
            let wildcard_53 :: () = printsym(" ") in
            let y_50 :: () = (_print_AddTree_Tree_6 [] x_48) in
            let wildcard_52 :: () = printsym(")") in
            ()


 [compiler] Running pass, floatOutCase
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6 []) (Packed AddTree_Tree_6 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: forall. ((Packed AddTree_Tree_6 []) -> Int)
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9::() ->
            v_9
        AddTree_Node_5 l_10::() r_11::() ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> (Packed AddTree_Tree_6 []))
_copy_AddTree_Tree_6 arg_20 =
    case arg_20 of
        AddTree_Leaf_4 x_21::() ->
            let y_22 :: Int = x_21 in
            (AddTree_Leaf_4 () y_22)
        AddTree_Node_5 x_23::() x_24::() ->
            let y_25 :: (Packed AddTree_Tree_6 []) = (_copy_AddTree_Tree_6 [] x_23) in
            let y_26 :: (Packed AddTree_Tree_6 []) = (_copy_AddTree_Tree_6 [] x_24) in
            (AddTree_Node_5 () y_25 y_26)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> (Packed AddTree_Tree_6 []))
_copy_without_ptrs_AddTree_Tree_6 arg_27 =
    case arg_27 of
        AddTree_Leaf_4 x_28::() ->
            let y_29 :: Int = x_28 in
            (AddTree_Leaf_4 () y_29)
        AddTree_Node_5 x_30::() x_31::() ->
            let y_32 :: (Packed AddTree_Tree_6 []) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30) in
            let y_33 :: (Packed AddTree_Tree_6 []) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31) in
            (AddTree_Node_5 () y_32 y_33)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> ())
_traverse_AddTree_Tree_6 arg_34 =
    case arg_34 of
        AddTree_Leaf_4 x_35::() ->
            ()
        AddTree_Node_5 x_37::() x_38::() ->
            let y_39 :: () = (_traverse_AddTree_Tree_6 [] x_37) in
            let y_40 :: () = (_traverse_AddTree_Tree_6 [] x_38) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: forall. ((Packed AddTree_Tree_6 []) -> ())
_print_AddTree_Tree_6 arg_41 =
    case arg_41 of
        AddTree_Leaf_4 x_42::() ->
            let wildcard_44 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46 :: () = printsym(" ") in
            let y_43 :: () = printint(x_42) in
            let wildcard_45 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47::() x_48::() ->
            let wildcard_51 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54 :: () = printsym(" ") in
            let y_49 :: () = (_print_AddTree_Tree_6 [] x_47) in
            let wildcard_53 :: () = printsym(" ") in
            let y_50 :: () = (_print_AddTree_Tree_6 [] x_48) in
            let wildcard_52 :: () = printsym(")") in
            ()


 [compiler] Running pass, toL1
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: (Packed AddTree_Tree_6) -> Int
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9 ->
            v_9
        AddTree_Node_5 l_10 r_11 ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20 =
    case arg_20 of
        AddTree_Leaf_4 x_21 ->
            let y_22 :: Int = x_21 in
            (AddTree_Leaf_4 y_22)
        AddTree_Node_5 x_23 x_24 ->
            let y_25 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23) in
            let y_26 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24) in
            (AddTree_Node_5 y_25 y_26)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27 =
    case arg_27 of
        AddTree_Leaf_4 x_28 ->
            let y_29 :: Int = x_28 in
            (AddTree_Leaf_4 y_29)
        AddTree_Node_5 x_30 x_31 ->
            let y_32 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30) in
            let y_33 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31) in
            (AddTree_Node_5 y_32 y_33)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34 =
    case arg_34 of
        AddTree_Leaf_4 x_35 ->
            ()
        AddTree_Node_5 x_37 x_38 ->
            let y_39 :: () = (_traverse_AddTree_Tree_6 [] x_37) in
            let y_40 :: () = (_traverse_AddTree_Tree_6 [] x_38) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41 =
    case arg_41 of
        AddTree_Leaf_4 x_42 ->
            let wildcard_44 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46 :: () = printsym(" ") in
            let y_43 :: () = printint(x_42) in
            let wildcard_45 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47 x_48 ->
            let wildcard_51 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54 :: () = printsym(" ") in
            let y_49 :: () = (_print_AddTree_Tree_6 [] x_47) in
            let wildcard_53 :: () = printsym(" ") in
            let y_50 :: () = (_print_AddTree_Tree_6 [] x_48) in
            let wildcard_52 :: () = printsym(")") in
            ()


 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: (Packed AddTree_Tree_6) -> Int
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9 ->
            v_9
        AddTree_Node_5 l_10 r_11 ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20 =
    case arg_20 of
        AddTree_Leaf_4 x_21 ->
            let y_22 :: Int = x_21 in
            (AddTree_Leaf_4 y_22)
        AddTree_Node_5 x_23 x_24 ->
            let y_25 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23) in
            let y_26 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24) in
            (AddTree_Node_5 y_25 y_26)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27 =
    case arg_27 of
        AddTree_Leaf_4 x_28 ->
            let y_29 :: Int = x_28 in
            (AddTree_Leaf_4 y_29)
        AddTree_Node_5 x_30 x_31 ->
            let y_32 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30) in
            let y_33 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31) in
            (AddTree_Node_5 y_32 y_33)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34 =
    case arg_34 of
        AddTree_Leaf_4 x_35 ->
            ()
        AddTree_Node_5 x_37 x_38 ->
            let y_39 :: () = (_traverse_AddTree_Tree_6 [] x_37) in
            let y_40 :: () = (_traverse_AddTree_Tree_6 [] x_38) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41 =
    case arg_41 of
        AddTree_Leaf_4 x_42 ->
            let wildcard_44 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46 :: () = printsym(" ") in
            let y_43 :: () = printint(x_42) in
            let wildcard_45 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47 x_48 ->
            let wildcard_51 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54 :: () = printsym(" ") in
            let y_49 :: () = (_print_AddTree_Tree_6 [] x_47) in
            let wildcard_53 :: () = printsym(" ") in
            let y_50 :: () = (_print_AddTree_Tree_6 [] x_48) in
            let wildcard_52 :: () = printsym(")") in
            ()


 [compiler] Running pass, benchMainExp
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: (Packed AddTree_Tree_6) -> Int
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9 ->
            v_9
        AddTree_Node_5 l_10 r_11 ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20 =
    case arg_20 of
        AddTree_Leaf_4 x_21 ->
            let y_22 :: Int = x_21 in
            (AddTree_Leaf_4 y_22)
        AddTree_Node_5 x_23 x_24 ->
            let y_25 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23) in
            let y_26 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24) in
            (AddTree_Node_5 y_25 y_26)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27 =
    case arg_27 of
        AddTree_Leaf_4 x_28 ->
            let y_29 :: Int = x_28 in
            (AddTree_Leaf_4 y_29)
        AddTree_Node_5 x_30 x_31 ->
            let y_32 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30) in
            let y_33 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31) in
            (AddTree_Node_5 y_32 y_33)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34 =
    case arg_34 of
        AddTree_Leaf_4 x_35 ->
            ()
        AddTree_Node_5 x_37 x_38 ->
            let y_39 :: () = (_traverse_AddTree_Tree_6 [] x_37) in
            let y_40 :: () = (_traverse_AddTree_Tree_6 [] x_38) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41 =
    case arg_41 of
        AddTree_Leaf_4 x_42 ->
            let wildcard_44 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46 :: () = printsym(" ") in
            let y_43 :: () = printint(x_42) in
            let wildcard_45 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47 x_48 ->
            let wildcard_51 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54 :: () = printsym(" ") in
            let y_49 :: () = (_print_AddTree_Tree_6 [] x_47) in
            let wildcard_53 :: () = printsym(" ") in
            let y_50 :: () = (_print_AddTree_Tree_6 [] x_48) in
            let wildcard_52 :: () = printsym(")") in
            ()


 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
AddTree_sum_7 :: (Packed AddTree_Tree_6) -> Int
AddTree_sum_7 t_8 =
    case t_8 of
        AddTree_Leaf_4 v_9 ->
            v_9
        AddTree_Node_5 l_10 r_11 ->
            (AddTree_sum_7 [] l_10) + (AddTree_sum_7 [] r_11)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20 =
    case arg_20 of
        AddTree_Leaf_4 x_21 ->
            let y_22 :: Int = x_21 in
            (AddTree_Leaf_4 y_22)
        AddTree_Node_5 x_23 x_24 ->
            let y_25 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23) in
            let y_26 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24) in
            (AddTree_Node_5 y_25 y_26)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27 =
    case arg_27 of
        AddTree_Leaf_4 x_28 ->
            let y_29 :: Int = x_28 in
            (AddTree_Leaf_4 y_29)
        AddTree_Node_5 x_30 x_31 ->
            let y_32 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30) in
            let y_33 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31) in
            (AddTree_Node_5 y_32 y_33)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34 =
    case arg_34 of
        AddTree_Leaf_4 x_35 ->
            ()
        AddTree_Node_5 x_37 x_38 ->
            let y_39 :: () = (_traverse_AddTree_Tree_6 [] x_37) in
            let y_40 :: () = (_traverse_AddTree_Tree_6 [] x_38) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41 =
    case arg_41 of
        AddTree_Leaf_4 x_42 ->
            let wildcard_44 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46 :: () = printsym(" ") in
            let y_43 :: () = printint(x_42) in
            let wildcard_45 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47 x_48 ->
            let wildcard_51 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54 :: () = printsym(" ") in
            let y_49 :: () = (_print_AddTree_Tree_6 [] x_47) in
            let wildcard_53 :: () = printsym(" ") in
            let y_50 :: () = (_print_AddTree_Tree_6 [] x_48) in
            let wildcard_52 :: () = printsym(")") in
            ()


 [compiler] Running pass, simplify
Removed unused functions: [Var "AddTree_sum_7"]
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59 =
    case arg_20_59 of
        AddTree_Leaf_4 x_21_60 ->
            let y_22_61 :: Int = x_21_60 in
            (AddTree_Leaf_4 y_22_61)
        AddTree_Node_5 x_23_62 x_24_63 ->
            let y_25_64 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62) in
            let y_26_65 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63) in
            (AddTree_Node_5 y_25_64 y_26_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66 =
    case arg_27_66 of
        AddTree_Leaf_4 x_28_67 ->
            let y_29_68 :: Int = x_28_67 in
            (AddTree_Leaf_4 y_29_68)
        AddTree_Node_5 x_30_69 x_31_70 ->
            let y_32_71 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69) in
            let y_33_72 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70) in
            (AddTree_Node_5 y_32_71 y_33_72)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73 =
    case arg_34_73 of
        AddTree_Leaf_4 x_35_74 ->
            ()
        AddTree_Node_5 x_37_75 x_38_76 ->
            let y_39_77 :: () = (_traverse_AddTree_Tree_6 [] x_37_75) in
            let y_40_78 :: () = (_traverse_AddTree_Tree_6 [] x_38_76) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79 =
    case arg_41_79 of
        AddTree_Leaf_4 x_42_80 ->
            let wildcard_44_81 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82 :: () = printsym(" ") in
            let y_43_83 :: () = printint(x_42_80) in
            let wildcard_45_84 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85 x_48_86 ->
            let wildcard_51_87 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88 :: () = printsym(" ") in
            let y_49_89 :: () = (_print_AddTree_Tree_6 [] x_47_85) in
            let wildcard_53_90 :: () = printsym(" ") in
            let y_50_91 :: () = (_print_AddTree_Tree_6 [] x_48_86) in
            let wildcard_52_92 :: () = printsym(")") in
            ()


 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59 =
    case arg_20_59 of
        AddTree_Leaf_4 x_21_60 ->
            let y_22_61 :: Int = x_21_60 in
            (AddTree_Leaf_4 y_22_61)
        AddTree_Node_5 x_23_62 x_24_63 ->
            let y_25_64 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62) in
            let y_26_65 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63) in
            (AddTree_Node_5 y_25_64 y_26_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66 =
    case arg_27_66 of
        AddTree_Leaf_4 x_28_67 ->
            let y_29_68 :: Int = x_28_67 in
            (AddTree_Leaf_4 y_29_68)
        AddTree_Node_5 x_30_69 x_31_70 ->
            let y_32_71 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69) in
            let y_33_72 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70) in
            (AddTree_Node_5 y_32_71 y_33_72)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73 =
    case arg_34_73 of
        AddTree_Leaf_4 x_35_74 ->
            ()
        AddTree_Node_5 x_37_75 x_38_76 ->
            let y_39_77 :: () = (_traverse_AddTree_Tree_6 [] x_37_75) in
            let y_40_78 :: () = (_traverse_AddTree_Tree_6 [] x_38_76) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79 =
    case arg_41_79 of
        AddTree_Leaf_4 x_42_80 ->
            let wildcard_44_81 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82 :: () = printsym(" ") in
            let y_43_83 :: () = printint(x_42_80) in
            let wildcard_45_84 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85 x_48_86 ->
            let wildcard_51_87 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88 :: () = printsym(" ") in
            let y_49_89 :: () = (_print_AddTree_Tree_6 [] x_47_85) in
            let wildcard_53_90 :: () = printsym(" ") in
            let y_50_91 :: () = (_print_AddTree_Tree_6 [] x_48_86) in
            let wildcard_52_92 :: () = printsym(")") in
            ()


 [compiler] Running pass, flatten
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59 =
    case arg_20_59 of
        AddTree_Leaf_4 x_21_60 ->
            let y_22_61 :: Int = x_21_60 in
            (AddTree_Leaf_4 y_22_61)
        AddTree_Node_5 x_23_62 x_24_63 ->
            let y_25_64 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62) in
            let y_26_65 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63) in
            (AddTree_Node_5 y_25_64 y_26_65)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66 =
    case arg_27_66 of
        AddTree_Leaf_4 x_28_67 ->
            let y_29_68 :: Int = x_28_67 in
            (AddTree_Leaf_4 y_29_68)
        AddTree_Node_5 x_30_69 x_31_70 ->
            let y_32_71 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69) in
            let y_33_72 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70) in
            (AddTree_Node_5 y_32_71 y_33_72)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73 =
    case arg_34_73 of
        AddTree_Leaf_4 x_35_74 ->
            ()
        AddTree_Node_5 x_37_75 x_38_76 ->
            let y_39_77 :: () = (_traverse_AddTree_Tree_6 [] x_37_75) in
            let y_40_78 :: () = (_traverse_AddTree_Tree_6 [] x_38_76) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79 =
    case arg_41_79 of
        AddTree_Leaf_4 x_42_80 ->
            let wildcard_44_81 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82 :: () = printsym(" ") in
            let y_43_83 :: () = printint(x_42_80) in
            let wildcard_45_84 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85 x_48_86 ->
            let wildcard_51_87 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88 :: () = printsym(" ") in
            let y_49_89 :: () = (_print_AddTree_Tree_6 [] x_47_85) in
            let wildcard_53_90 :: () = printsym(" ") in
            let y_50_91 :: () = (_print_AddTree_Tree_6 [] x_48_86) in
            let wildcard_52_92 :: () = printsym(")") in
            ()


 [compiler] Running pass, simplify
Removed unused functions: []
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            let y_22_61_95 :: Int = x_21_60_94 in
            (AddTree_Leaf_4 y_22_61_95)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            let y_29_68_102 :: Int = x_28_67_101 in
            (AddTree_Leaf_4 y_29_68_102)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, inlineTriv
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 (Packed AddTree_Tree_6) (Packed AddTree_Tree_6)
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: (Packed AddTree_Tree_6) = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> (Packed AddTree_Tree_6)
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: (Packed AddTree_Tree_6) = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: (Packed AddTree_Tree_6) -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, directL3
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: Cursor -> Cursor
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: Cursor = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: Cursor = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: Cursor -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: Cursor -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: Cursor -> Cursor
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: Cursor = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: Cursor = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: Cursor -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: Cursor -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, unariser
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: Cursor -> Cursor
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: Cursor = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: Cursor = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: Cursor -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: Cursor -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: Cursor -> Cursor
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: Cursor = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: Cursor = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: Cursor -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: Cursor -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, L3.flatten
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: Cursor -> Cursor
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: Cursor = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: Cursor = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: Cursor -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: Cursor -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, L3.typecheck
Pass output:
================================================================================
data AddTree_Tree_6 = AddTree_Leaf_4 Int | 
                      AddTree_Node_5 Cursor Cursor
{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_AddTree_Tree_6 :: Cursor -> Cursor
_copy_AddTree_Tree_6 arg_20_59_93 =
    case arg_20_59_93 of
        AddTree_Leaf_4 x_21_60_94 ->
            (AddTree_Leaf_4 x_21_60_94)
        AddTree_Node_5 x_23_62_96 x_24_63_97 ->
            let y_25_64_98 :: Cursor = (_copy_AddTree_Tree_6 [] x_23_62_96) in
            let y_26_65_99 :: Cursor = (_copy_AddTree_Tree_6 [] x_24_63_97) in
            (AddTree_Node_5 y_25_64_98 y_26_65_99)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_copy_without_ptrs_AddTree_Tree_6 :: Cursor -> Cursor
_copy_without_ptrs_AddTree_Tree_6 arg_27_66_100 =
    case arg_27_66_100 of
        AddTree_Leaf_4 x_28_67_101 ->
            (AddTree_Leaf_4 x_28_67_101)
        AddTree_Node_5 x_30_69_103 x_31_70_104 ->
            let y_32_71_105 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_30_69_103) in
            let y_33_72_106 :: Cursor = (_copy_without_ptrs_AddTree_Tree_6 [] x_31_70_104) in
            (AddTree_Node_5 y_32_71_105 y_33_72_106)

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_traverse_AddTree_Tree_6 :: Cursor -> ()
_traverse_AddTree_Tree_6 arg_34_73_107 =
    case arg_34_73_107 of
        AddTree_Leaf_4 x_35_74_108 ->
            ()
        AddTree_Node_5 x_37_75_109 x_38_76_110 ->
            let y_39_77_111 :: () = (_traverse_AddTree_Tree_6 [] x_37_75_109) in
            let y_40_78_112 :: () = (_traverse_AddTree_Tree_6 [] x_38_76_110) in
            ()

{meta: FunMeta {funRec = Rec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
_print_AddTree_Tree_6 :: Cursor -> ()
_print_AddTree_Tree_6 arg_41_79_113 =
    case arg_41_79_113 of
        AddTree_Leaf_4 x_42_80_114 ->
            let wildcard_44_81_115 :: () = printsym("(AddTree_Leaf_4") in
            let wildcard_46_82_116 :: () = printsym(" ") in
            let y_43_83_117 :: () = printint(x_42_80_114) in
            let wildcard_45_84_118 :: () = printsym(")") in
            ()
        AddTree_Node_5 x_47_85_119 x_48_86_120 ->
            let wildcard_51_87_121 :: () = printsym("(AddTree_Node_5") in
            let wildcard_54_88_122 :: () = printsym(" ") in
            let y_49_89_123 :: () = (_print_AddTree_Tree_6 [] x_47_85_119) in
            let wildcard_53_90_124 :: () = printsym(" ") in
            let y_50_91_125 :: () = (_print_AddTree_Tree_6 [] x_48_86_120) in
            let wildcard_52_92_126 :: () = printsym(")") in
            ()


 [compiler] Running pass, lower
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_6",
                    [("AddTree_Leaf_4",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("AddTree_Node_5",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(127, ")"),(128, "(AddTree_Node_5"),
                     (129, "(AddTree_Leaf_4"),(130, " ")],
      fundefs = [FunDecl {funName = "_copy_AddTree_Tree_6",
                          funArgs = [(arg_20_59_93, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_131, TagTyPacked),
                                                           (tail_132, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_20_59_93"],
                                                  bod = Switch "switch_135"
                                                               (VarTriv "tag_131")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_21_60_94,
                                                                                                IntTy)],
                                                                                      ptr = "tail_132",
                                                                                      bod = LetAllocT {lhs = "tailift_133",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_21_60_94")],
                                                                                                       bod = RetValsT [VarTriv "tailift_133"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_23_62_96,
                                                                                                CursorTy),
                                                                                               (x_24_63_97,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_132",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_25_64_98,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_23_62_96"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_26_65_99,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_24_63_97"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_134",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_25_64_98"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_26_65_99")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_134"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_131")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_6",
                          funArgs = [(arg_27_66_100, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_136, TagTyPacked),
                                                           (tail_137, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_27_66_100"],
                                                  bod = Switch "switch_140"
                                                               (VarTriv "tag_136")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_28_67_101,
                                                                                                IntTy)],
                                                                                      ptr = "tail_137",
                                                                                      bod = LetAllocT {lhs = "tailift_138",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_28_67_101")],
                                                                                                       bod = RetValsT [VarTriv "tailift_138"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_30_69_103,
                                                                                                CursorTy),
                                                                                               (x_31_70_104,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_137",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_32_71_105,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_30_69_103"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_33_72_106,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_31_70_104"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_139",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_32_71_105"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_33_72_106")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_139"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_136")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_6",
                          funArgs = [(arg_34_73_107, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_141, TagTyPacked),
                                                           (tail_142, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_34_73_107"],
                                                  bod = Switch "switch_143"
                                                               (VarTriv "tag_141")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_35_74_108,
                                                                                                IntTy)],
                                                                                      ptr = "tail_142",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_37_75_109,
                                                                                                CursorTy),
                                                                                               (x_38_76_110,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_142",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_39_77_111,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_37_75_109"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_40_78_112,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_38_76_110"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_141")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_6",
                          funArgs = [(arg_41_79_113, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_144, TagTyPacked),
                                                           (tail_145, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_41_79_113"],
                                                  bod = Switch "switch_146"
                                                               (VarTriv "tag_144")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_42_80_114,
                                                                                                IntTy)],
                                                                                      ptr = "tail_145",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_44_81_115,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 129],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_46_82_116,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 130],
                                                                                                                              bod = LetPrimCallT {binds = [(y_43_83_117,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_42_80_114"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_45_84_118,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 127],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_47_85_119,
                                                                                                CursorTy),
                                                                                               (x_48_86_120,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_145",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_51_87_121,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 128],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_54_88_122,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 130],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_49_89_123,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_6",
                                                                                                                                              rands = [VarTriv "x_47_85_119"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_53_90_124,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 130],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_50_91_125,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_6",
                                                                                                                                                                                  rands = [VarTriv "x_48_86_120"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_52_92_126,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 127],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_144")},
                          isPure = True}],
      mainExp = Nothing}

 [compiler] Running pass, lateInlineTriv
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_6",
                    [("AddTree_Leaf_4",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("AddTree_Node_5",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(127, ")"),(128, "(AddTree_Node_5"),
                     (129, "(AddTree_Leaf_4"),(130, " ")],
      fundefs = [FunDecl {funName = "_copy_AddTree_Tree_6",
                          funArgs = [(arg_20_59_93, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_131, TagTyPacked),
                                                           (tail_132, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_20_59_93"],
                                                  bod = Switch "switch_135"
                                                               (VarTriv "tag_131")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_21_60_94,
                                                                                                IntTy)],
                                                                                      ptr = "tail_132",
                                                                                      bod = LetAllocT {lhs = "tailift_133",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_21_60_94")],
                                                                                                       bod = RetValsT [VarTriv "tailift_133"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_23_62_96,
                                                                                                CursorTy),
                                                                                               (x_24_63_97,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_132",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_25_64_98,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_23_62_96"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_26_65_99,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_24_63_97"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_134",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_25_64_98"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_26_65_99")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_134"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_131")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_6",
                          funArgs = [(arg_27_66_100, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_136, TagTyPacked),
                                                           (tail_137, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_27_66_100"],
                                                  bod = Switch "switch_140"
                                                               (VarTriv "tag_136")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_28_67_101,
                                                                                                IntTy)],
                                                                                      ptr = "tail_137",
                                                                                      bod = LetAllocT {lhs = "tailift_138",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_28_67_101")],
                                                                                                       bod = RetValsT [VarTriv "tailift_138"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_30_69_103,
                                                                                                CursorTy),
                                                                                               (x_31_70_104,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_137",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_32_71_105,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_30_69_103"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_33_72_106,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_31_70_104"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_139",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_32_71_105"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_33_72_106")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_139"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_136")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_6",
                          funArgs = [(arg_34_73_107, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_141, TagTyPacked),
                                                           (tail_142, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_34_73_107"],
                                                  bod = Switch "switch_143"
                                                               (VarTriv "tag_141")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_35_74_108,
                                                                                                IntTy)],
                                                                                      ptr = "tail_142",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_37_75_109,
                                                                                                CursorTy),
                                                                                               (x_38_76_110,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_142",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_39_77_111,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_37_75_109"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_40_78_112,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_38_76_110"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_141")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_6",
                          funArgs = [(arg_41_79_113, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_144, TagTyPacked),
                                                           (tail_145, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_41_79_113"],
                                                  bod = Switch "switch_146"
                                                               (VarTriv "tag_144")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_42_80_114,
                                                                                                IntTy)],
                                                                                      ptr = "tail_145",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_44_81_115,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 129],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_46_82_116,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 130],
                                                                                                                              bod = LetPrimCallT {binds = [(y_43_83_117,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_42_80_114"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_45_84_118,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 127],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_47_85_119,
                                                                                                CursorTy),
                                                                                               (x_48_86_120,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_145",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_51_87_121,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 128],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_54_88_122,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 130],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_49_89_123,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_6",
                                                                                                                                              rands = [VarTriv "x_47_85_119"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_53_90_124,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 130],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_50_91_125,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_6",
                                                                                                                                                                                  rands = [VarTriv "x_48_86_120"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_52_92_126,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 127],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_144")},
                          isPure = True}],
      mainExp = Nothing}

 [compiler] Running pass, rearrangeFree
Pass output:
================================================================================
Prog {infoTable = [("AddTree_Tree_6",
                    [("AddTree_Leaf_4",
                      DataConInfo {dcon_tag = 0,
                                   scalar_bytes = 8,
                                   num_shortcut = 0,
                                   num_scalars = 1,
                                   num_packed = 0,
                                   field_tys = [IntTy]}),
                     ("AddTree_Node_5",
                      DataConInfo {dcon_tag = 1,
                                   scalar_bytes = 0,
                                   num_shortcut = 2,
                                   num_scalars = 0,
                                   num_packed = 0,
                                   field_tys = [CursorTy,CursorTy]})])],
      symbolTable = [(127, ")"),(128, "(AddTree_Node_5"),
                     (129, "(AddTree_Leaf_4"),(130, " ")],
      fundefs = [FunDecl {funName = "_copy_AddTree_Tree_6",
                          funArgs = [(arg_20_59_93, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_131, TagTyPacked),
                                                           (tail_132, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_20_59_93"],
                                                  bod = Switch "switch_135"
                                                               (VarTriv "tag_131")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_21_60_94,
                                                                                                IntTy)],
                                                                                      ptr = "tail_132",
                                                                                      bod = LetAllocT {lhs = "tailift_133",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_21_60_94")],
                                                                                                       bod = RetValsT [VarTriv "tailift_133"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_23_62_96,
                                                                                                CursorTy),
                                                                                               (x_24_63_97,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_132",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_25_64_98,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_23_62_96"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_26_65_99,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_24_63_97"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_134",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_25_64_98"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_26_65_99")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_134"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_131")},
                          isPure = True},
                 FunDecl {funName = "_copy_without_ptrs_AddTree_Tree_6",
                          funArgs = [(arg_27_66_100, CursorTy)],
                          funRetTy = CursorTy,
                          funBody = LetPrimCallT {binds = [(tag_136, TagTyPacked),
                                                           (tail_137, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_27_66_100"],
                                                  bod = Switch "switch_140"
                                                               (VarTriv "tag_136")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_28_67_101,
                                                                                                IntTy)],
                                                                                      ptr = "tail_137",
                                                                                      bod = LetAllocT {lhs = "tailift_138",
                                                                                                       vals = [(IntTy,
                                                                                                                IntTriv 0),
                                                                                                               (IntTy,
                                                                                                                VarTriv "x_28_67_101")],
                                                                                                       bod = RetValsT [VarTriv "tailift_138"]}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_30_69_103,
                                                                                                CursorTy),
                                                                                               (x_31_70_104,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_137",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_32_71_105,
                                                                                                                CursorTy)],
                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_30_69_103"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_33_72_106,
                                                                                                                                CursorTy)],
                                                                                                                      rator = "_copy_without_ptrs_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_31_70_104"],
                                                                                                                      bod = LetAllocT {lhs = "tailift_139",
                                                                                                                                       vals = [(IntTy,
                                                                                                                                                IntTriv 1),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_32_71_105"),
                                                                                                                                               (CursorTy,
                                                                                                                                                VarTriv "y_33_72_106")],
                                                                                                                                       bod = RetValsT [VarTriv "tailift_139"]}}}})])
                                                               (Just ErrT "Unknown tag in: tag_136")},
                          isPure = True},
                 FunDecl {funName = "_traverse_AddTree_Tree_6",
                          funArgs = [(arg_34_73_107, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_141, TagTyPacked),
                                                           (tail_142, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_34_73_107"],
                                                  bod = Switch "switch_143"
                                                               (VarTriv "tag_141")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_35_74_108,
                                                                                                IntTy)],
                                                                                      ptr = "tail_142",
                                                                                      bod = RetValsT []}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_37_75_109,
                                                                                                CursorTy),
                                                                                               (x_38_76_110,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_142",
                                                                                      bod = LetCallT {async = False,
                                                                                                      binds = [(y_39_77_111,
                                                                                                                ProdTy [])],
                                                                                                      rator = "_traverse_AddTree_Tree_6",
                                                                                                      rands = [VarTriv "x_37_75_109"],
                                                                                                      bod = LetCallT {async = False,
                                                                                                                      binds = [(y_40_78_112,
                                                                                                                                ProdTy [])],
                                                                                                                      rator = "_traverse_AddTree_Tree_6",
                                                                                                                      rands = [VarTriv "x_38_76_110"],
                                                                                                                      bod = RetValsT []}}})])
                                                               (Just ErrT "Unknown tag in: tag_141")},
                          isPure = True},
                 FunDecl {funName = "_print_AddTree_Tree_6",
                          funArgs = [(arg_41_79_113, CursorTy)],
                          funRetTy = ProdTy [],
                          funBody = LetPrimCallT {binds = [(tag_144, TagTyPacked),
                                                           (tail_145, CursorTy)],
                                                  prim = ReadScalar IntS,
                                                  rands = [VarTriv "arg_41_79_113"],
                                                  bod = Switch "switch_146"
                                                               (VarTriv "tag_144")
                                                               (IntAlts [(0,
                                                                          LetUnpackT {binds = [(x_42_80_114,
                                                                                                IntTy)],
                                                                                      ptr = "tail_145",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_44_81_115,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 129],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_46_82_116,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 130],
                                                                                                                              bod = LetPrimCallT {binds = [(y_43_83_117,
                                                                                                                                                            ProdTy [])],
                                                                                                                                                  prim = PrintInt,
                                                                                                                                                  rands = [VarTriv "x_42_80_114"],
                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_45_84_118,
                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                      rands = [SymTriv 127],
                                                                                                                                                                      bod = RetValsT []}}}}}),
                                                                         (1,
                                                                          LetUnpackT {binds = [(x_47_85_119,
                                                                                                CursorTy),
                                                                                               (x_48_86_120,
                                                                                                CursorTy)],
                                                                                      ptr = "tail_145",
                                                                                      bod = LetPrimCallT {binds = [(wildcard_51_87_121,
                                                                                                                    ProdTy [])],
                                                                                                          prim = PrintSym,
                                                                                                          rands = [SymTriv 128],
                                                                                                          bod = LetPrimCallT {binds = [(wildcard_54_88_122,
                                                                                                                                        ProdTy [])],
                                                                                                                              prim = PrintSym,
                                                                                                                              rands = [SymTriv 130],
                                                                                                                              bod = LetCallT {async = False,
                                                                                                                                              binds = [(y_49_89_123,
                                                                                                                                                        ProdTy [])],
                                                                                                                                              rator = "_print_AddTree_Tree_6",
                                                                                                                                              rands = [VarTriv "x_47_85_119"],
                                                                                                                                              bod = LetPrimCallT {binds = [(wildcard_53_90_124,
                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                  prim = PrintSym,
                                                                                                                                                                  rands = [SymTriv 130],
                                                                                                                                                                  bod = LetCallT {async = False,
                                                                                                                                                                                  binds = [(y_50_91_125,
                                                                                                                                                                                            ProdTy [])],
                                                                                                                                                                                  rator = "_print_AddTree_Tree_6",
                                                                                                                                                                                  rands = [VarTriv "x_48_86_120"],
                                                                                                                                                                                  bod = LetPrimCallT {binds = [(wildcard_52_92_126,
                                                                                                                                                                                                                ProdTy [])],
                                                                                                                                                                                                      prim = PrintSym,
                                                                                                                                                                                                      rands = [SymTriv 127],
                                                                                                                                                                                                      bod = RetValsT []}}}}}}})])
                                                               (Just ErrT "Unknown tag in: tag_144")},
                          isPure = True}],
      mainExp = Nothing}

 [compiler] Final C codegen: 9069 characters.
================================================================================
/* Gibbon program. */

#include "gibbon_rts.h"

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <inttypes.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>
#include <time.h>
#include <alloca.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdarg.h>
#include <errno.h>
#include <uthash.h>

#ifdef _WIN64
#include <windows.h>
#endif

#ifdef _GIBBON_POINTER
#include <gc.h>
#endif

#ifdef _GIBBON_PARALLEL
#include <cilk/cilk.h>
#include <cilk/cilk_api.h>
#endif

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Program starts here
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */

typedef struct GibIntProd_struct {
            GibInt field0;
        } GibIntProd;
typedef struct GibIntGibIntProd_struct {
            GibInt field0;
            GibInt field1;
        } GibIntGibIntProd;
typedef struct GibIntGibCursorGibCursorProd_struct {
            GibInt field0;
            GibCursor field1;
            GibCursor field2;
        } GibIntGibCursorGibCursorProd;
typedef struct GibPackedTagGibCursorProd_struct {
            GibPackedTag field0;
            GibCursor field1;
        } GibPackedTagGibCursorProd;
typedef struct GibCursorProd_struct {
            GibCursor field0;
        } GibCursorProd;
typedef struct GibCursorGibCursorProd_struct {
            GibCursor field0;
            GibCursor field1;
        } GibCursorGibCursorProd;
GibCursor _copy_AddTree_Tree_6(GibCursor arg_20_59_93);
GibCursor _copy_without_ptrs_AddTree_Tree_6(GibCursor arg_27_66_100);
unsigned char _traverse_AddTree_Tree_6(GibCursor arg_34_73_107);
unsigned char _print_AddTree_Tree_6(GibCursor arg_41_79_113);
typedef enum {
            GibInt_T,
            GibFloat_T,
            GibSym_T,
            GibBool_T,
            GibVector_T,
            GibList_T,
            GibCursor_T,
            AddTree_Tree_6_T,
        } GibDatatype;
void info_table_initialize(void)
{
    int error = gib_info_table_initialize(8);
    
    if (error < 0) {
        fprintf(stderr, "Couldn't initialize info table, errorno=%d", error);
        exit(1);
    }
    
    GibDatatype field_tys[1];
    
    error = gib_info_table_insert_packed_dcon(AddTree_Tree_6_T, 0, 8, 0, 1, 0,
                                              field_tys, 0);
    if (error < 0) {
        fprintf(stderr,
                "Couldn't insert into info table, errorno=%d, tycon=%d, dcon=%d",
                error, AddTree_Tree_6_T, 0);
        exit(1);
    }
    error = gib_info_table_insert_packed_dcon(AddTree_Tree_6_T, 1, 0, 2, 0, 0,
                                              field_tys, 0);
    if (error < 0) {
        fprintf(stderr,
                "Couldn't insert into info table, errorno=%d, tycon=%d, dcon=%d",
                error, AddTree_Tree_6_T, 1);
        exit(1);
    }
    gib_info_table_finalize();
}
void symbol_table_initialize(void)
{
    gib_add_symbol(127, ")");
    gib_add_symbol(128, "(AddTree_Node_5");
    gib_add_symbol(129, "(AddTree_Leaf_4");
    gib_add_symbol(130, " ");
}
GibCursor _copy_AddTree_Tree_6(GibCursor arg_20_59_93)
{
    GibPackedTag tag_131 = *(GibPackedTag *) arg_20_59_93;
    GibCursor tail_132 = arg_20_59_93 + sizeof(GibInt);
    
    
  switch_135:
    ;
    switch (tag_131) {
        
      case 0:
        {
            GibInt x_21_60_94 = ((GibIntProd *) tail_132)->field0;
            GibPtr tailift_133 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_133)->field0 = 0;
            ((GibIntGibIntProd *) tailift_133)->field1 = x_21_60_94;
            return tailift_133;
            break;
        }
        
      case 1:
        {
            GibCursor x_23_62_96 =
                      ((GibCursorGibCursorProd *) tail_132)->field0;
            GibCursor x_24_63_97 =
                      ((GibCursorGibCursorProd *) tail_132)->field1;
            GibCursor y_25_64_98 =  _copy_AddTree_Tree_6(x_23_62_96);
            GibCursor y_26_65_99 =  _copy_AddTree_Tree_6(x_24_63_97);
            GibPtr tailift_134 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_134)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_134)->field1 = y_25_64_98;
            ((GibIntGibCursorGibCursorProd *) tailift_134)->field2 = y_26_65_99;
            return tailift_134;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_131");
            exit(1);
        }
    }
}
GibCursor _copy_without_ptrs_AddTree_Tree_6(GibCursor arg_27_66_100)
{
    GibPackedTag tag_136 = *(GibPackedTag *) arg_27_66_100;
    GibCursor tail_137 = arg_27_66_100 + sizeof(GibInt);
    
    
  switch_140:
    ;
    switch (tag_136) {
        
      case 0:
        {
            GibInt x_28_67_101 = ((GibIntProd *) tail_137)->field0;
            GibPtr tailift_138 = gib_alloc(sizeof(GibIntGibIntProd));
            
            ((GibIntGibIntProd *) tailift_138)->field0 = 0;
            ((GibIntGibIntProd *) tailift_138)->field1 = x_28_67_101;
            return tailift_138;
            break;
        }
        
      case 1:
        {
            GibCursor x_30_69_103 =
                      ((GibCursorGibCursorProd *) tail_137)->field0;
            GibCursor x_31_70_104 =
                      ((GibCursorGibCursorProd *) tail_137)->field1;
            GibCursor y_32_71_105 =
                       _copy_without_ptrs_AddTree_Tree_6(x_30_69_103);
            GibCursor y_33_72_106 =
                       _copy_without_ptrs_AddTree_Tree_6(x_31_70_104);
            GibPtr tailift_139 =
                   gib_alloc(sizeof(GibIntGibCursorGibCursorProd));
            
            ((GibIntGibCursorGibCursorProd *) tailift_139)->field0 = 1;
            ((GibIntGibCursorGibCursorProd *) tailift_139)->field1 =
                y_32_71_105;
            ((GibIntGibCursorGibCursorProd *) tailift_139)->field2 =
                y_33_72_106;
            return tailift_139;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_136");
            exit(1);
        }
    }
}
unsigned char _traverse_AddTree_Tree_6(GibCursor arg_34_73_107)
{
    GibPackedTag tag_141 = *(GibPackedTag *) arg_34_73_107;
    GibCursor tail_142 = arg_34_73_107 + sizeof(GibInt);
    
    
  switch_143:
    ;
    switch (tag_141) {
        
      case 0:
        {
            GibInt x_35_74_108 = ((GibIntProd *) tail_142)->field0;
            
            return 0;
            break;
        }
        
      case 1:
        {
            GibCursor x_37_75_109 =
                      ((GibCursorGibCursorProd *) tail_142)->field0;
            GibCursor x_38_76_110 =
                      ((GibCursorGibCursorProd *) tail_142)->field1;
            unsigned char y_39_77_111 =  _traverse_AddTree_Tree_6(x_37_75_109);
            unsigned char y_40_78_112 =  _traverse_AddTree_Tree_6(x_38_76_110);
            
            return 0;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_141");
            exit(1);
        }
    }
}
unsigned char _print_AddTree_Tree_6(GibCursor arg_41_79_113)
{
    GibPackedTag tag_144 = *(GibPackedTag *) arg_41_79_113;
    GibCursor tail_145 = arg_41_79_113 + sizeof(GibInt);
    
    
  switch_146:
    ;
    switch (tag_144) {
        
      case 0:
        {
            GibInt x_42_80_114 = ((GibIntProd *) tail_145)->field0;
            unsigned char wildcard_44_81_115 = gib_print_symbol(129);
            unsigned char wildcard_46_82_116 = gib_print_symbol(130);
            unsigned char y_43_83_117 = printf("%ld", x_42_80_114);
            unsigned char wildcard_45_84_118 = gib_print_symbol(127);
            
            return 0;
            break;
        }
        
      case 1:
        {
            GibCursor x_47_85_119 =
                      ((GibCursorGibCursorProd *) tail_145)->field0;
            GibCursor x_48_86_120 =
                      ((GibCursorGibCursorProd *) tail_145)->field1;
            unsigned char wildcard_51_87_121 = gib_print_symbol(128);
            unsigned char wildcard_54_88_122 = gib_print_symbol(130);
            unsigned char y_49_89_123 =  _print_AddTree_Tree_6(x_47_85_119);
            unsigned char wildcard_53_90_124 = gib_print_symbol(130);
            unsigned char y_50_91_125 =  _print_AddTree_Tree_6(x_48_86_120);
            unsigned char wildcard_52_92_126 = gib_print_symbol(127);
            
            return 0;
            break;
        }
        
      default:
        {
            printf("%s\n", "Unknown tag in: tag_144");
            exit(1);
        }
    }
}
int main(int argc, char **argv)
{
    int init_0 = gib_init(argc, argv);
    
    info_table_initialize();
    symbol_table_initialize();
    
    int exit_1 = gib_exit();
    
    return exit_1;
}

Compiling RTS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

make -f /home/timmy/git/gibbon/gibbon-compiler/gibbon-rts/Makefile  MODE=release  GC=nongen  USER_CFLAGS=" -O3  -flto " VERBOSITY=4

codegen: C RTS could not be compiled: 
make: /home/timmy/git/gibbon/gibbon-compiler/gibbon-rts/Makefile: No such file or directory
make: *** No rule to make target '/home/timmy/git/gibbon/gibbon-compiler/gibbon-rts/Makefile'.  Stop.

Code: 2
