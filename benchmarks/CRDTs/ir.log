 ! Responding to env Var: GIBBON_DEBUG=4
 ! We set DEBUG based on command-line verbose arg: 4
 [compiler] pipeline starting, parsed program: 
================================================================================
ProgBundle [ProgModule "Set"
                       (Prog
                            {ddefs = [(IntSet,
                                       DDef {tyName = "IntSet",
                                             tyArgs = [],
                                             dataCons = [("PureSet",
                                                          [(False, IntTy),(False, IntTy),
                                                           (False, PackedTy "IntSet" []),
                                                           (False, PackedTy "IntSet" [])]),
                                                         ("EmptySet", [])]})],
                             fundefs = [(singleton,
                                         FunDef {funName = "singleton",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = DataConE (MetaTv $2)
                                                                    "PureSet"
                                                                    [LitE 1,VarE "x",
                                                                     DataConE (MetaTv $3)
                                                                              "EmptySet"
                                                                              [],
                                                                     DataConE (MetaTv $4)
                                                                              "EmptySet"
                                                                              []],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (insert,
                                         FunDef {funName = "insert",
                                                 funArgs = [x,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = CaseE (VarE "s")
                                                                 [("EmptySet",
                                                                   [],
                                                                   AppE "singleton" [] [VarE "x"]),
                                                                  ("PureSet",
                                                                   [(sz, MetaTv $9),(v, MetaTv $10),
                                                                    (l, MetaTv $11),
                                                                    (r, MetaTv $12)],
                                                                   IfE (PrimAppE EqIntP
                                                                                 [VarE "x",
                                                                                  VarE "v"])
                                                                       (VarE "s")
                                                                       (IfE (PrimAppE LtEqP
                                                                                      [VarE "x",
                                                                                       VarE "v"])
                                                                            (LetE (nl,
                                                                                   [],
                                                                                   MetaTv $7,
                                                                                   AppE "insert"
                                                                                        []
                                                                                        [VarE "x",
                                                                                         VarE "l"])
                                                                                  (AppE "balanceL"
                                                                                        []
                                                                                        [VarE "v",
                                                                                         VarE "nl",
                                                                                         VarE "r"]))
                                                                            (LetE (nr,
                                                                                   [],
                                                                                   MetaTv $8,
                                                                                   AppE "insert"
                                                                                        []
                                                                                        [VarE "x",
                                                                                         VarE "r"])
                                                                                  (AppE "balanceR"
                                                                                        []
                                                                                        [VarE "v",
                                                                                         VarE "l",
                                                                                         VarE "nr"]))))],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (empty,
                                         FunDef {funName = "empty",
                                                 funArgs = [],
                                                 funTy = ForAll []
                                                                (ArrowTy [] (PackedTy "IntSet" [])),
                                                 funBody = DataConE (MetaTv $0) "EmptySet" [],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (member,
                                         FunDef {funName = "member",
                                                 funArgs = [x,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "IntSet" []]
                                                                         BoolTy),
                                                 funBody = CaseE (VarE "s")
                                                                 [("EmptySet",
                                                                   [],
                                                                   PrimAppE MkFalse []),
                                                                  ("PureSet",
                                                                   [(wildcard_146, MetaTv $147),
                                                                    (v, MetaTv $148),
                                                                    (l, MetaTv $149),
                                                                    (r, MetaTv $150)],
                                                                   IfE (PrimAppE EqIntP
                                                                                 [VarE "x",
                                                                                  VarE "v"])
                                                                       (PrimAppE MkTrue [])
                                                                       (IfE (PrimAppE LtEqP
                                                                                      [VarE "x",
                                                                                       VarE "v"])
                                                                            (AppE "member"
                                                                                  []
                                                                                  [VarE "x",
                                                                                   VarE "l"])
                                                                            (AppE "member"
                                                                                  []
                                                                                  [VarE "x",
                                                                                   VarE "r"])))],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (size,
                                         FunDef {funName = "size",
                                                 funArgs = [s],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntSet" []]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "s")
                                                                 [("EmptySet", [], LitE 0),
                                                                  ("PureSet",
                                                                   [(sz, MetaTv $163),
                                                                    (wildcard_160, MetaTv $164),
                                                                    (wildcard_161, MetaTv $165),
                                                                    (wildcard_162, MetaTv $166)],
                                                                   VarE "sz")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (null,
                                         FunDef {funName = "null",
                                                 funArgs = [s],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntSet" []]
                                                                         BoolTy),
                                                 funBody = CaseE (VarE "s")
                                                                 [("EmptySet",
                                                                   [],
                                                                   PrimAppE MkTrue []),
                                                                  ("PureSet",
                                                                   [(wildcard_136, MetaTv $140),
                                                                    (wildcard_137, MetaTv $141),
                                                                    (wildcard_138, MetaTv $142),
                                                                    (wildcard_139, MetaTv $143)],
                                                                   PrimAppE MkFalse [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (sum,
                                         FunDef {funName = "sum",
                                                 funArgs = [s],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntSet" []]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "s")
                                                                 [("EmptySet", [], LitE 0),
                                                                  ("PureSet",
                                                                   [(wildcard_196, MetaTv $197),
                                                                    (v, MetaTv $198),
                                                                    (l, MetaTv $199),
                                                                    (r, MetaTv $200)],
                                                                   PrimAppE AddP
                                                                            [PrimAppE AddP
                                                                                      [VarE "v",
                                                                                       AppE "sum"
                                                                                            []
                                                                                            [VarE "l"]],
                                                                             AppE "sum"
                                                                                  []
                                                                                  [VarE "r"]])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (insert_num,
                                         FunDef {funName = "insert_num",
                                                 funArgs = [x,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = IfE (PrimAppE EqIntP [VarE "x",LitE 0])
                                                               (AppE "insert"
                                                                     []
                                                                     [VarE "x",VarE "s"])
                                                               (AppE "insert"
                                                                     []
                                                                     [VarE "x",
                                                                      AppE "insert_num"
                                                                           []
                                                                           [PrimAppE SubP
                                                                                     [VarE "x",
                                                                                      LitE 1],
                                                                            VarE "s"]]),
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (right,
                                         FunDef {funName = "right",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = CaseE (VarE "x")
                                                                 [("EmptySet",
                                                                   [],
                                                                   DataConE (MetaTv $185)
                                                                            "EmptySet"
                                                                            []),
                                                                  ("PureSet",
                                                                   [(wildcard_186, MetaTv $189),
                                                                    (wildcard_187, MetaTv $190),
                                                                    (wildcard_188, MetaTv $191),
                                                                    (r, MetaTv $192)],
                                                                   VarE "r")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (left,
                                         FunDef {funName = "left",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = CaseE (VarE "x")
                                                                 [("EmptySet",
                                                                   [],
                                                                   DataConE (MetaTv $176)
                                                                            "EmptySet"
                                                                            []),
                                                                  ("PureSet",
                                                                   [(wildcard_177, MetaTv $180),
                                                                    (wildcard_178, MetaTv $181),
                                                                    (l, MetaTv $182),
                                                                    (wildcard_179, MetaTv $183)],
                                                                   VarE "l")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (val,
                                         FunDef {funName = "val",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntSet" []]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "x")
                                                                 [("EmptySet", [], LitE 0),
                                                                  ("PureSet",
                                                                   [(wildcard_168, MetaTv $171),
                                                                    (v, MetaTv $172),
                                                                    (wildcard_169, MetaTv $173),
                                                                    (wildcard_170, MetaTv $174)],
                                                                   VarE "v")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (depth,
                                         FunDef {funName = "depth",
                                                 funArgs = [x,c,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,IntTy,
                                                                          PackedTy "IntSet" []]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "s")
                                                                 [("EmptySet",
                                                                   [],
                                                                   PrimAppE SubP [LitE 0,LitE 1]),
                                                                  ("PureSet",
                                                                   [(wildcard_154, MetaTv $155),
                                                                    (v, MetaTv $156),
                                                                    (l, MetaTv $157),
                                                                    (r, MetaTv $158)],
                                                                   IfE (PrimAppE EqIntP
                                                                                 [VarE "x",
                                                                                  VarE "v"])
                                                                       (PrimAppE AddP
                                                                                 [VarE "c",LitE 1])
                                                                       (IfE (PrimAppE LtEqP
                                                                                      [VarE "x",
                                                                                       VarE "v"])
                                                                            (AppE "depth"
                                                                                  []
                                                                                  [VarE "x",
                                                                                   PrimAppE AddP
                                                                                            [VarE "c",
                                                                                             LitE 1],
                                                                                   VarE "l"])
                                                                            (AppE "depth"
                                                                                  []
                                                                                  [VarE "x",
                                                                                   PrimAppE AddP
                                                                                            [VarE "c",
                                                                                             LitE 1],
                                                                                   VarE "r"])))],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (balanceR,
                                         FunDef {funName = "balanceR",
                                                 funArgs = [x,l,r],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "IntSet" [],
                                                                          PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = CaseE (VarE "l")
                                                                 [("EmptySet",
                                                                   [],
                                                                   CaseE (VarE "r")
                                                                         [("EmptySet",
                                                                           [],
                                                                           DataConE (MetaTv $77)
                                                                                    "PureSet"
                                                                                    [LitE 1,
                                                                                     VarE "x",
                                                                                     DataConE (MetaTv $78)
                                                                                              "EmptySet"
                                                                                              [],
                                                                                     DataConE (MetaTv $79)
                                                                                              "EmptySet"
                                                                                              []]),
                                                                          ("PureSet",
                                                                           [(rs, MetaTv $112),
                                                                            (rx, MetaTv $113),
                                                                            (rl, MetaTv $114),
                                                                            (rr, MetaTv $115)],
                                                                           CaseE (VarE "rr")
                                                                                 [("PureSet",
                                                                                   [(rrs,
                                                                                     MetaTv $95),
                                                                                    (rrx,
                                                                                     MetaTv $96),
                                                                                    (rrl,
                                                                                     MetaTv $97),
                                                                                    (rrr,
                                                                                     MetaTv $98)],
                                                                                   CaseE (VarE "rl")
                                                                                         [("PureSet",
                                                                                           [(rls,
                                                                                             MetaTv $87),
                                                                                            (rlx,
                                                                                             MetaTv $88),
                                                                                            (rll,
                                                                                             MetaTv $89),
                                                                                            (rlr,
                                                                                             MetaTv $90)],
                                                                                           IfE (PrimAppE LtP
                                                                                                         [AppE "size"
                                                                                                               []
                                                                                                               [VarE "rl"],
                                                                                                          PrimAppE MulP
                                                                                                                   [LitE 2,
                                                                                                                    AppE "size"
                                                                                                                         []
                                                                                                                         [VarE "rr"]]])
                                                                                               (DataConE (MetaTv $80)
                                                                                                         "PureSet"
                                                                                                         [PrimAppE AddP
                                                                                                                   [LitE 1,
                                                                                                                    VarE "rs"],
                                                                                                          VarE "rx",
                                                                                                          DataConE (MetaTv $81)
                                                                                                                   "PureSet"
                                                                                                                   [PrimAppE AddP
                                                                                                                             [LitE 1,
                                                                                                                              AppE "size"
                                                                                                                                   []
                                                                                                                                   [VarE "rl"]],
                                                                                                                    VarE "x",
                                                                                                                    DataConE (MetaTv $82)
                                                                                                                             "EmptySet"
                                                                                                                             [],
                                                                                                                    VarE "rl"],
                                                                                                          VarE "rr"])
                                                                                               (DataConE (MetaTv $83)
                                                                                                         "PureSet"
                                                                                                         [PrimAppE AddP
                                                                                                                   [LitE 1,
                                                                                                                    VarE "rs"],
                                                                                                          AppE "val"
                                                                                                               []
                                                                                                               [VarE "rl"],
                                                                                                          DataConE (MetaTv $84)
                                                                                                                   "PureSet"
                                                                                                                   [PrimAppE AddP
                                                                                                                             [LitE 1,
                                                                                                                              AppE "size"
                                                                                                                                   []
                                                                                                                                   [AppE "left"
                                                                                                                                         []
                                                                                                                                         [VarE "rl"]]],
                                                                                                                    VarE "x",
                                                                                                                    DataConE (MetaTv $85)
                                                                                                                             "EmptySet"
                                                                                                                             [],
                                                                                                                    AppE "left"
                                                                                                                         []
                                                                                                                         [VarE "rl"]],
                                                                                                          DataConE (MetaTv $86)
                                                                                                                   "PureSet"
                                                                                                                   [PrimAppE AddP
                                                                                                                             [PrimAppE AddP
                                                                                                                                       [LitE 1,
                                                                                                                                        AppE "size"
                                                                                                                                             []
                                                                                                                                             [VarE "rr"]],
                                                                                                                              AppE "size"
                                                                                                                                   []
                                                                                                                                   [AppE "right"
                                                                                                                                         []
                                                                                                                                         [VarE "rl"]]],
                                                                                                                    VarE "rx",
                                                                                                                    AppE "right"
                                                                                                                         []
                                                                                                                         [VarE "rl"],
                                                                                                                    VarE "rr"]])),
                                                                                          ("EmptySet",
                                                                                           [],
                                                                                           DataConE (MetaTv $91)
                                                                                                    "PureSet"
                                                                                                    [LitE 3,
                                                                                                     VarE "rx",
                                                                                                     DataConE (MetaTv $92)
                                                                                                              "PureSet"
                                                                                                              [LitE 1,
                                                                                                               VarE "x",
                                                                                                               DataConE (MetaTv $93)
                                                                                                                        "EmptySet"
                                                                                                                        [],
                                                                                                               DataConE (MetaTv $94)
                                                                                                                        "EmptySet"
                                                                                                                        []],
                                                                                                     VarE "rr"])]),
                                                                                  ("EmptySet",
                                                                                   [],
                                                                                   CaseE (VarE "rl")
                                                                                         [("PureSet",
                                                                                           [(rls,
                                                                                             MetaTv $106),
                                                                                            (rlx,
                                                                                             MetaTv $107),
                                                                                            (rll,
                                                                                             MetaTv $108),
                                                                                            (rlr,
                                                                                             MetaTv $109)],
                                                                                           DataConE (MetaTv $99)
                                                                                                    "PureSet"
                                                                                                    [LitE 3,
                                                                                                     AppE "val"
                                                                                                          []
                                                                                                          [VarE "rl"],
                                                                                                     DataConE (MetaTv $100)
                                                                                                              "PureSet"
                                                                                                              [LitE 1,
                                                                                                               VarE "x",
                                                                                                               DataConE (MetaTv $101)
                                                                                                                        "EmptySet"
                                                                                                                        [],
                                                                                                               DataConE (MetaTv $102)
                                                                                                                        "EmptySet"
                                                                                                                        []],
                                                                                                     DataConE (MetaTv $103)
                                                                                                              "PureSet"
                                                                                                              [LitE 1,
                                                                                                               VarE "rx",
                                                                                                               DataConE (MetaTv $104)
                                                                                                                        "EmptySet"
                                                                                                                        [],
                                                                                                               DataConE (MetaTv $105)
                                                                                                                        "EmptySet"
                                                                                                                        []]]),
                                                                                          ("EmptySet",
                                                                                           [],
                                                                                           DataConE (MetaTv $110)
                                                                                                    "PureSet"
                                                                                                    [LitE 2,
                                                                                                     VarE "x",
                                                                                                     DataConE (MetaTv $111)
                                                                                                              "EmptySet"
                                                                                                              [],
                                                                                                     VarE "r"])])])]),
                                                                  ("PureSet",
                                                                   [(ls, MetaTv $131),
                                                                    (wildcard_116, MetaTv $132),
                                                                    (wildcard_117, MetaTv $133),
                                                                    (wildcard_118, MetaTv $134)],
                                                                   CaseE (VarE "r")
                                                                         [("EmptySet",
                                                                           [],
                                                                           DataConE (MetaTv $119)
                                                                                    "PureSet"
                                                                                    [PrimAppE AddP
                                                                                              [LitE 1,
                                                                                               VarE "ls"],
                                                                                     VarE "x",
                                                                                     VarE "l",
                                                                                     DataConE (MetaTv $120)
                                                                                              "EmptySet"
                                                                                              []]),
                                                                          ("PureSet",
                                                                           [(rs, MetaTv $127),
                                                                            (rx, MetaTv $128),
                                                                            (rl, MetaTv $129),
                                                                            (rr, MetaTv $130)],
                                                                           IfE (PrimAppE GtP
                                                                                         [VarE "rs",
                                                                                          PrimAppE MulP
                                                                                                   [LitE 3,
                                                                                                    VarE "ls"]])
                                                                               (IfE (PrimAppE LtP
                                                                                              [AppE "size"
                                                                                                    []
                                                                                                    [VarE "rl"],
                                                                                               PrimAppE MulP
                                                                                                        [LitE 2,
                                                                                                         AppE "size"
                                                                                                              []
                                                                                                              [VarE "rr"]]])
                                                                                    (DataConE (MetaTv $121)
                                                                                              "PureSet"
                                                                                              [PrimAppE AddP
                                                                                                        [PrimAppE AddP
                                                                                                                  [LitE 1,
                                                                                                                   VarE "ls"],
                                                                                                         VarE "rs"],
                                                                                               VarE "rx",
                                                                                               DataConE (MetaTv $122)
                                                                                                        "PureSet"
                                                                                                        [PrimAppE AddP
                                                                                                                  [PrimAppE AddP
                                                                                                                            [LitE 1,
                                                                                                                             VarE "ls"],
                                                                                                                   AppE "size"
                                                                                                                        []
                                                                                                                        [VarE "rl"]],
                                                                                                         VarE "x",
                                                                                                         VarE "l",
                                                                                                         VarE "rl"],
                                                                                               VarE "rr"])
                                                                                    (DataConE (MetaTv $123)
                                                                                              "PureSet"
                                                                                              [PrimAppE AddP
                                                                                                        [PrimAppE AddP
                                                                                                                  [LitE 1,
                                                                                                                   VarE "ls"],
                                                                                                         VarE "rs"],
                                                                                               AppE "val"
                                                                                                    []
                                                                                                    [VarE "rl"],
                                                                                               DataConE (MetaTv $124)
                                                                                                        "PureSet"
                                                                                                        [PrimAppE AddP
                                                                                                                  [PrimAppE AddP
                                                                                                                            [LitE 1,
                                                                                                                             VarE "ls"],
                                                                                                                   AppE "size"
                                                                                                                        []
                                                                                                                        [AppE "left"
                                                                                                                              []
                                                                                                                              [VarE "rl"]]],
                                                                                                         VarE "x",
                                                                                                         VarE "l",
                                                                                                         AppE "left"
                                                                                                              []
                                                                                                              [VarE "rl"]],
                                                                                               DataConE (MetaTv $125)
                                                                                                        "PureSet"
                                                                                                        [PrimAppE AddP
                                                                                                                  [PrimAppE AddP
                                                                                                                            [LitE 1,
                                                                                                                             AppE "size"
                                                                                                                                  []
                                                                                                                                  [VarE "rr"]],
                                                                                                                   AppE "size"
                                                                                                                        []
                                                                                                                        [AppE "right"
                                                                                                                              []
                                                                                                                              [VarE "rl"]]],
                                                                                                         VarE "rx",
                                                                                                         AppE "right"
                                                                                                              []
                                                                                                              [VarE "rl"],
                                                                                                         VarE "rr"]]))
                                                                               (DataConE (MetaTv $126)
                                                                                         "PureSet"
                                                                                         [PrimAppE AddP
                                                                                                   [PrimAppE AddP
                                                                                                             [LitE 1,
                                                                                                              VarE "ls"],
                                                                                                    VarE "rs"],
                                                                                          VarE "x",
                                                                                          VarE "l",
                                                                                          VarE "r"]))])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (balanceL,
                                         FunDef {funName = "balanceL",
                                                 funArgs = [x,l,r],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "IntSet" [],
                                                                          PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = CaseE (VarE "r")
                                                                 [("EmptySet",
                                                                   [],
                                                                   CaseE (VarE "l")
                                                                         [("EmptySet",
                                                                           [],
                                                                           DataConE (MetaTv $16)
                                                                                    "PureSet"
                                                                                    [LitE 1,
                                                                                     VarE "x",
                                                                                     DataConE (MetaTv $17)
                                                                                              "EmptySet"
                                                                                              [],
                                                                                     DataConE (MetaTv $18)
                                                                                              "EmptySet"
                                                                                              []]),
                                                                          ("PureSet",
                                                                           [(ls, MetaTv $51),
                                                                            (lx, MetaTv $52),
                                                                            (ll, MetaTv $53),
                                                                            (lr, MetaTv $54)],
                                                                           CaseE (VarE "ll")
                                                                                 [("PureSet",
                                                                                   [(lls,
                                                                                     MetaTv $34),
                                                                                    (llx,
                                                                                     MetaTv $35),
                                                                                    (lll,
                                                                                     MetaTv $36),
                                                                                    (llr,
                                                                                     MetaTv $37)],
                                                                                   CaseE (VarE "lr")
                                                                                         [("PureSet",
                                                                                           [(lrs,
                                                                                             MetaTv $26),
                                                                                            (lrx,
                                                                                             MetaTv $27),
                                                                                            (lrl,
                                                                                             MetaTv $28),
                                                                                            (lrr,
                                                                                             MetaTv $29)],
                                                                                           IfE (PrimAppE LtP
                                                                                                         [VarE "lrs",
                                                                                                          PrimAppE MulP
                                                                                                                   [LitE 2,
                                                                                                                    VarE "lls"]])
                                                                                               (DataConE (MetaTv $19)
                                                                                                         "PureSet"
                                                                                                         [PrimAppE AddP
                                                                                                                   [LitE 1,
                                                                                                                    VarE "ls"],
                                                                                                          VarE "lx",
                                                                                                          VarE "ll",
                                                                                                          DataConE (MetaTv $20)
                                                                                                                   "PureSet"
                                                                                                                   [PrimAppE AddP
                                                                                                                             [LitE 1,
                                                                                                                              VarE "lrs"],
                                                                                                                    VarE "x",
                                                                                                                    VarE "lr",
                                                                                                                    DataConE (MetaTv $21)
                                                                                                                             "EmptySet"
                                                                                                                             []]])
                                                                                               (DataConE (MetaTv $22)
                                                                                                         "PureSet"
                                                                                                         [PrimAppE AddP
                                                                                                                   [LitE 1,
                                                                                                                    VarE "ls"],
                                                                                                          VarE "lrx",
                                                                                                          DataConE (MetaTv $23)
                                                                                                                   "PureSet"
                                                                                                                   [PrimAppE AddP
                                                                                                                             [PrimAppE AddP
                                                                                                                                       [LitE 1,
                                                                                                                                        VarE "lls"],
                                                                                                                              AppE "size"
                                                                                                                                   []
                                                                                                                                   [VarE "lrl"]],
                                                                                                                    VarE "lx",
                                                                                                                    VarE "ll",
                                                                                                                    VarE "lrl"],
                                                                                                          DataConE (MetaTv $24)
                                                                                                                   "PureSet"
                                                                                                                   [PrimAppE AddP
                                                                                                                             [LitE 1,
                                                                                                                              AppE "size"
                                                                                                                                   []
                                                                                                                                   [VarE "lrr"]],
                                                                                                                    VarE "x",
                                                                                                                    VarE "lrr",
                                                                                                                    DataConE (MetaTv $25)
                                                                                                                             "EmptySet"
                                                                                                                             []]])),
                                                                                          ("EmptySet",
                                                                                           [],
                                                                                           DataConE (MetaTv $30)
                                                                                                    "PureSet"
                                                                                                    [LitE 3,
                                                                                                     VarE "lx",
                                                                                                     VarE "ll",
                                                                                                     DataConE (MetaTv $31)
                                                                                                              "PureSet"
                                                                                                              [LitE 1,
                                                                                                               VarE "x",
                                                                                                               DataConE (MetaTv $32)
                                                                                                                        "EmptySet"
                                                                                                                        [],
                                                                                                               DataConE (MetaTv $33)
                                                                                                                        "EmptySet"
                                                                                                                        []]])]),
                                                                                  ("EmptySet",
                                                                                   [],
                                                                                   CaseE (VarE "lr")
                                                                                         [("PureSet",
                                                                                           [(lrs,
                                                                                             MetaTv $45),
                                                                                            (lrx,
                                                                                             MetaTv $46),
                                                                                            (lrl,
                                                                                             MetaTv $47),
                                                                                            (lrr,
                                                                                             MetaTv $48)],
                                                                                           DataConE (MetaTv $38)
                                                                                                    "PureSet"
                                                                                                    [LitE 3,
                                                                                                     VarE "lrx",
                                                                                                     DataConE (MetaTv $39)
                                                                                                              "PureSet"
                                                                                                              [LitE 1,
                                                                                                               VarE "lx",
                                                                                                               DataConE (MetaTv $40)
                                                                                                                        "EmptySet"
                                                                                                                        [],
                                                                                                               DataConE (MetaTv $41)
                                                                                                                        "EmptySet"
                                                                                                                        []],
                                                                                                     DataConE (MetaTv $42)
                                                                                                              "PureSet"
                                                                                                              [LitE 1,
                                                                                                               VarE "x",
                                                                                                               DataConE (MetaTv $43)
                                                                                                                        "EmptySet"
                                                                                                                        [],
                                                                                                               DataConE (MetaTv $44)
                                                                                                                        "EmptySet"
                                                                                                                        []]]),
                                                                                          ("EmptySet",
                                                                                           [],
                                                                                           DataConE (MetaTv $49)
                                                                                                    "PureSet"
                                                                                                    [LitE 2,
                                                                                                     VarE "x",
                                                                                                     VarE "l",
                                                                                                     DataConE (MetaTv $50)
                                                                                                              "EmptySet"
                                                                                                              []])])])]),
                                                                  ("PureSet",
                                                                   [(rs, MetaTv $70),
                                                                    (wildcard_55, MetaTv $71),
                                                                    (wildcard_56, MetaTv $72),
                                                                    (wildcard_57, MetaTv $73)],
                                                                   CaseE (VarE "l")
                                                                         [("EmptySet",
                                                                           [],
                                                                           DataConE (MetaTv $58)
                                                                                    "PureSet"
                                                                                    [PrimAppE AddP
                                                                                              [LitE 1,
                                                                                               VarE "rs"],
                                                                                     VarE "x",
                                                                                     DataConE (MetaTv $59)
                                                                                              "EmptySet"
                                                                                              [],
                                                                                     VarE "r"]),
                                                                          ("PureSet",
                                                                           [(ls, MetaTv $66),
                                                                            (lx, MetaTv $67),
                                                                            (ll, MetaTv $68),
                                                                            (lr, MetaTv $69)],
                                                                           IfE (PrimAppE GtP
                                                                                         [VarE "ls",
                                                                                          PrimAppE MulP
                                                                                                   [LitE 3,
                                                                                                    VarE "rs"]])
                                                                               (IfE (PrimAppE LtP
                                                                                              [AppE "size"
                                                                                                    []
                                                                                                    [VarE "lr"],
                                                                                               PrimAppE MulP
                                                                                                        [LitE 2,
                                                                                                         AppE "size"
                                                                                                              []
                                                                                                              [VarE "ll"]]])
                                                                                    (DataConE (MetaTv $60)
                                                                                              "PureSet"
                                                                                              [PrimAppE AddP
                                                                                                        [PrimAppE AddP
                                                                                                                  [LitE 1,
                                                                                                                   VarE "ls"],
                                                                                                         VarE "rs"],
                                                                                               VarE "lx",
                                                                                               VarE "ll",
                                                                                               DataConE (MetaTv $61)
                                                                                                        "PureSet"
                                                                                                        [PrimAppE AddP
                                                                                                                  [PrimAppE AddP
                                                                                                                            [LitE 1,
                                                                                                                             VarE "rs"],
                                                                                                                   AppE "size"
                                                                                                                        []
                                                                                                                        [VarE "lr"]],
                                                                                                         VarE "x",
                                                                                                         VarE "lr",
                                                                                                         VarE "r"]])
                                                                                    (DataConE (MetaTv $62)
                                                                                              "PureSet"
                                                                                              [PrimAppE AddP
                                                                                                        [PrimAppE AddP
                                                                                                                  [LitE 1,
                                                                                                                   VarE "ls"],
                                                                                                         VarE "rs"],
                                                                                               AppE "val"
                                                                                                    []
                                                                                                    [VarE "lr"],
                                                                                               DataConE (MetaTv $63)
                                                                                                        "PureSet"
                                                                                                        [PrimAppE AddP
                                                                                                                  [PrimAppE AddP
                                                                                                                            [LitE 1,
                                                                                                                             AppE "size"
                                                                                                                                  []
                                                                                                                                  [VarE "ll"]],
                                                                                                                   AppE "size"
                                                                                                                        []
                                                                                                                        [AppE "left"
                                                                                                                              []
                                                                                                                              [VarE "lr"]]],
                                                                                                         VarE "lx",
                                                                                                         VarE "ll",
                                                                                                         AppE "left"
                                                                                                              []
                                                                                                              [VarE "lr"]],
                                                                                               DataConE (MetaTv $64)
                                                                                                        "PureSet"
                                                                                                        [PrimAppE AddP
                                                                                                                  [PrimAppE AddP
                                                                                                                            [LitE 1,
                                                                                                                             VarE "rs"],
                                                                                                                   AppE "size"
                                                                                                                        []
                                                                                                                        [AppE "right"
                                                                                                                              []
                                                                                                                              [VarE "lr"]]],
                                                                                                         VarE "x",
                                                                                                         AppE "right"
                                                                                                              []
                                                                                                              [VarE "lr"],
                                                                                                         VarE "r"]]))
                                                                               (DataConE (MetaTv $65)
                                                                                         "PureSet"
                                                                                         [PrimAppE AddP
                                                                                                   [PrimAppE AddP
                                                                                                             [LitE 1,
                                                                                                              VarE "ls"],
                                                                                                    VarE "rs"],
                                                                                          VarE "x",
                                                                                          VarE "l",
                                                                                          VarE "r"]))])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}})],
                             mainExp = Just (AppE "sum"
                                                  []
                                                  [AppE "insert" [] [LitE 0,AppE "empty" [] []]],
                                             MetaTv $201)})
                       [],
            ProgModule "Map"
                       (Prog
                            {ddefs = [(Map,
                                       DDef {tyName = "Map",
                                             tyArgs = [u:a],
                                             dataCons = [("Tip", []),
                                                         ("Bin",
                                                          [(False, IntTy),(False, IntTy),
                                                           (False, TyVar u:a),
                                                           (False, PackedTy "Map" [TyVar u:a]),
                                                           (False,
                                                            PackedTy "Map" [TyVar u:a])])]})],
                             fundefs = [(singleton,
                                         FunDef {funName = "singleton",
                                                 funArgs = [k,x],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,TyVar u:a]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = DataConE (MetaTv $3)
                                                                    "Bin"
                                                                    [LitE 1,VarE "k",VarE "x",
                                                                     DataConE (MetaTv $4) "Tip" [],
                                                                     DataConE (MetaTv $5) "Tip" []],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (insert,
                                         FunDef {funName = "insert",
                                                 funArgs = [kx,x,m],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,TyVar u:a,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Tip",
                                                                   [],
                                                                   AppE "singleton"
                                                                        []
                                                                        [VarE "kx",VarE "x"]),
                                                                  ("Bin",
                                                                   [(sz, MetaTv $55),
                                                                    (k, MetaTv $56),(v, MetaTv $57),
                                                                    (l, MetaTv $58),
                                                                    (r, MetaTv $59)],
                                                                   IfE (PrimAppE EqIntP
                                                                                 [VarE "kx",
                                                                                  VarE "k"])
                                                                       (DataConE (MetaTv $54)
                                                                                 "Bin"
                                                                                 [VarE "sz",
                                                                                  VarE "k",VarE "x",
                                                                                  VarE "l",
                                                                                  VarE "r"])
                                                                       (IfE (PrimAppE LtEqP
                                                                                      [VarE "kx",
                                                                                       VarE "k"])
                                                                            (AppE "balance"
                                                                                  []
                                                                                  [VarE "k",
                                                                                   VarE "v",
                                                                                   AppE "insert"
                                                                                        []
                                                                                        [VarE "kx",
                                                                                         VarE "x",
                                                                                         VarE "l"],
                                                                                   VarE "r"])
                                                                            (AppE "balance"
                                                                                  []
                                                                                  [VarE "k",
                                                                                   VarE "v",
                                                                                   VarE "l",
                                                                                   AppE "insert"
                                                                                        []
                                                                                        [VarE "kx",
                                                                                         VarE "x",
                                                                                         VarE "r"]])))],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (lookup,
                                         FunDef {funName = "lookup",
                                                 funArgs = [k,m],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Maybe"
                                                                                   [TyVar u:a])),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Tip",
                                                                   [],
                                                                   DataConE (MetaTv $39)
                                                                            "Nothing"
                                                                            []),
                                                                  ("Bin",
                                                                   [(wildcard_40, MetaTv $42),
                                                                    (kx, MetaTv $43),
                                                                    (v, MetaTv $44),(l, MetaTv $45),
                                                                    (r, MetaTv $46)],
                                                                   IfE (PrimAppE LtP
                                                                                 [VarE "k",
                                                                                  VarE "kx"])
                                                                       (AppE "Map.lookup"
                                                                             []
                                                                             [VarE "k",VarE "l"])
                                                                       (IfE (PrimAppE GtP
                                                                                      [VarE "k",
                                                                                       VarE "kx"])
                                                                            (AppE "Map.lookup"
                                                                                  []
                                                                                  [VarE "k",
                                                                                   VarE "r"])
                                                                            (DataConE (MetaTv $41)
                                                                                      "Just"
                                                                                      [VarE "v"])))],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (delete,
                                         FunDef {funName = "delete",
                                                 funArgs = [kx,m],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Tip",
                                                                   [],
                                                                   DataConE (MetaTv $62) "Tip" []),
                                                                  ("Bin",
                                                                   [(sz, MetaTv $63),
                                                                    (k, MetaTv $64),(v, MetaTv $65),
                                                                    (l, MetaTv $66),
                                                                    (r, MetaTv $67)],
                                                                   IfE (PrimAppE EqIntP
                                                                                 [VarE "kx",
                                                                                  VarE "k"])
                                                                       (AppE "glue"
                                                                             []
                                                                             [VarE "l",VarE "r"])
                                                                       (IfE (PrimAppE LtEqP
                                                                                      [VarE "kx",
                                                                                       VarE "k"])
                                                                            (AppE "balance"
                                                                                  []
                                                                                  [VarE "kx",
                                                                                   VarE "v",
                                                                                   AppE "delete"
                                                                                        []
                                                                                        [VarE "kx",
                                                                                         VarE "l"],
                                                                                   VarE "r"])
                                                                            (AppE "balance"
                                                                                  []
                                                                                  [VarE "kx",
                                                                                   VarE "v",
                                                                                   VarE "l",
                                                                                   AppE "delete"
                                                                                        []
                                                                                        [VarE "kx",
                                                                                         VarE "r"]])))],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (key,
                                         FunDef {funName = "key",
                                                 funArgs = [s],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "s")
                                                                 [("Tip", [], LitE 0),
                                                                  ("Bin",
                                                                   [(wildcard_28, MetaTv $32),
                                                                    (k, MetaTv $33),
                                                                    (wildcard_29, MetaTv $34),
                                                                    (wildcard_30, MetaTv $35),
                                                                    (wildcard_31, MetaTv $36)],
                                                                   VarE "k")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (empty,
                                         FunDef {funName = "empty",
                                                 funArgs = [],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy []
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = DataConE (MetaTv $0) "Tip" [],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (doubleR,
                                         FunDef {funName = "doubleR",
                                                 funArgs = [k1,x1,m0,t4],
                                                 funTy = ForAll [u:b]
                                                                (ArrowTy [IntTy,TyVar u:b,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:b])),
                                                 funBody = CaseE (VarE "m0")
                                                                 [("Bin",
                                                                   [(wildcard_195, MetaTv $202),
                                                                    (k2, MetaTv $203),
                                                                    (x2, MetaTv $204),
                                                                    (t1, MetaTv $205),
                                                                    (m1, MetaTv $206)],
                                                                   CaseE (VarE "m1")
                                                                         [("Bin",
                                                                           [(wildcard_196,
                                                                             MetaTv $197),
                                                                            (k3, MetaTv $198),
                                                                            (x3, MetaTv $199),
                                                                            (t2, MetaTv $200),
                                                                            (t3, MetaTv $201)],
                                                                           AppE "bin"
                                                                                []
                                                                                [VarE "k3",
                                                                                 VarE "x3",
                                                                                 AppE "bin"
                                                                                      []
                                                                                      [VarE "k2",
                                                                                       VarE "x2",
                                                                                       VarE "t1",
                                                                                       VarE "t2"],
                                                                                 AppE "bin"
                                                                                      []
                                                                                      [VarE "k1",
                                                                                       VarE "x1",
                                                                                       VarE "t3",
                                                                                       VarE "t4"]]),
                                                                          ("Tip",
                                                                           [],
                                                                           AppE "empty" [] [])]),
                                                                  ("Tip", [], AppE "empty" [] [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (doubleL,
                                         FunDef {funName = "doubleL",
                                                 funArgs = [k1,x1,t1,m0],
                                                 funTy = ForAll [u:b]
                                                                (ArrowTy [IntTy,TyVar u:b,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:b])),
                                                 funBody = CaseE (VarE "m0")
                                                                 [("Bin",
                                                                   [(wildcard_179, MetaTv $186),
                                                                    (k2, MetaTv $187),
                                                                    (x2, MetaTv $188),
                                                                    (m1, MetaTv $189),
                                                                    (t4, MetaTv $190)],
                                                                   CaseE (VarE "m1")
                                                                         [("Bin",
                                                                           [(wildcard_180,
                                                                             MetaTv $181),
                                                                            (k3, MetaTv $182),
                                                                            (x3, MetaTv $183),
                                                                            (t2, MetaTv $184),
                                                                            (t3, MetaTv $185)],
                                                                           AppE "bin"
                                                                                []
                                                                                [VarE "k3",
                                                                                 VarE "x3",
                                                                                 AppE "bin"
                                                                                      []
                                                                                      [VarE "k1",
                                                                                       VarE "x1",
                                                                                       VarE "t1",
                                                                                       VarE "t2"],
                                                                                 AppE "bin"
                                                                                      []
                                                                                      [VarE "k2",
                                                                                       VarE "x2",
                                                                                       VarE "t3",
                                                                                       VarE "t4"]]),
                                                                          ("Tip",
                                                                           [],
                                                                           AppE "empty" [] [])]),
                                                                  ("Tip", [], AppE "empty" [] [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (singleR,
                                         FunDef {funName = "singleR",
                                                 funArgs = [k1,x1,m,t3],
                                                 funTy = ForAll [u:b]
                                                                (ArrowTy [IntTy,TyVar u:b,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:b])),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Bin",
                                                                   [(wildcard_169, MetaTv $170),
                                                                    (k2, MetaTv $171),
                                                                    (x2, MetaTv $172),
                                                                    (t1, MetaTv $173),
                                                                    (t2, MetaTv $174)],
                                                                   AppE "bin"
                                                                        []
                                                                        [VarE "k2",VarE "x2",
                                                                         VarE "t1",
                                                                         AppE "bin"
                                                                              []
                                                                              [VarE "k1",VarE "x1",
                                                                               VarE "t2",
                                                                               VarE "t3"]]),
                                                                  ("Tip", [], AppE "empty" [] [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (singleL,
                                         FunDef {funName = "singleL",
                                                 funArgs = [k1,x1,t1,m],
                                                 funTy = ForAll [u:b]
                                                                (ArrowTy [IntTy,TyVar u:b,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:b])),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Bin",
                                                                   [(wildcard_159, MetaTv $160),
                                                                    (k2, MetaTv $161),
                                                                    (x2, MetaTv $162),
                                                                    (t2, MetaTv $163),
                                                                    (t3, MetaTv $164)],
                                                                   AppE "bin"
                                                                        []
                                                                        [VarE "k2",VarE "x2",
                                                                         AppE "bin"
                                                                              []
                                                                              [VarE "k1",VarE "x1",
                                                                               VarE "t1",VarE "t2"],
                                                                         VarE "t3"]),
                                                                  ("Tip", [], AppE "empty" [] [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (bin,
                                         FunDef {funName = "bin",
                                                 funArgs = [k,x,l,r],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,TyVar u:a,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = DataConE (MetaTv $154)
                                                                    "Bin"
                                                                    [PrimAppE AddP
                                                                              [PrimAppE AddP
                                                                                        [AppE "size"
                                                                                              []
                                                                                              [VarE "l"],
                                                                                         AppE "size"
                                                                                              []
                                                                                              [VarE "r"]],
                                                                               LitE 1],
                                                                     VarE "k",VarE "x",VarE "l",
                                                                     VarE "r"],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (rotateR,
                                         FunDef {funName = "rotateR",
                                                 funArgs = [k,x,l,r],
                                                 funTy = ForAll [u:b]
                                                                (ArrowTy [IntTy,TyVar u:b,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:b])),
                                                 funBody = CaseE (VarE "l")
                                                                 [("Bin",
                                                                   [(wildcard_142, MetaTv $145),
                                                                    (wildcard_143, MetaTv $146),
                                                                    (wildcard_144, MetaTv $147),
                                                                    (ly, MetaTv $148),
                                                                    (ry, MetaTv $149)],
                                                                   IfE (PrimAppE LtP
                                                                                 [AppE "size"
                                                                                       []
                                                                                       [VarE "ry"],
                                                                                  PrimAppE MulP
                                                                                           [AppE "ratio"
                                                                                                 []
                                                                                                 [],
                                                                                            AppE "size"
                                                                                                 []
                                                                                                 [VarE "ly"]]])
                                                                       (AppE "singleR"
                                                                             []
                                                                             [VarE "k",VarE "x",
                                                                              VarE "l",VarE "r"])
                                                                       (AppE "doubleR"
                                                                             []
                                                                             [VarE "k",VarE "x",
                                                                              VarE "l",VarE "r"])),
                                                                  ("Tip", [], AppE "empty" [] [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (rotateL,
                                         FunDef {funName = "rotateL",
                                                 funArgs = [k,x,l,r],
                                                 funTy = ForAll [u:b]
                                                                (ArrowTy [IntTy,TyVar u:b,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:b]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:b])),
                                                 funBody = CaseE (VarE "r")
                                                                 [("Bin",
                                                                   [(wildcard_130, MetaTv $133),
                                                                    (wildcard_131, MetaTv $134),
                                                                    (wildcard_132, MetaTv $135),
                                                                    (ly, MetaTv $136),
                                                                    (ry, MetaTv $137)],
                                                                   IfE (PrimAppE LtP
                                                                                 [AppE "size"
                                                                                       []
                                                                                       [VarE "ly"],
                                                                                  PrimAppE MulP
                                                                                           [AppE "ratio"
                                                                                                 []
                                                                                                 [],
                                                                                            AppE "size"
                                                                                                 []
                                                                                                 [VarE "ry"]]])
                                                                       (AppE "singleL"
                                                                             []
                                                                             [VarE "k",VarE "x",
                                                                              VarE "l",VarE "r"])
                                                                       (AppE "doubleL"
                                                                             []
                                                                             [VarE "k",VarE "x",
                                                                              VarE "l",VarE "r"])),
                                                                  ("Tip", [], AppE "empty" [] [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (balance,
                                         FunDef {funName = "balance",
                                                 funArgs = [k,x,l,r],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,TyVar u:a,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = IfE (PrimAppE LtEqP
                                                                         [PrimAppE AddP
                                                                                   [AppE "size"
                                                                                         []
                                                                                         [VarE "l"],
                                                                                    AppE "size"
                                                                                         []
                                                                                         [VarE "r"]],
                                                                          LitE 1])
                                                               (DataConE (MetaTv $124)
                                                                         "Bin"
                                                                         [PrimAppE AddP
                                                                                   [AppE "size"
                                                                                         []
                                                                                         [VarE "l"],
                                                                                    AppE "size"
                                                                                         []
                                                                                         [VarE "r"]],
                                                                          VarE "k",VarE "x",
                                                                          VarE "l",VarE "r"])
                                                               (IfE (PrimAppE GtEqP
                                                                              [AppE "size"
                                                                                    []
                                                                                    [VarE "r"],
                                                                               PrimAppE MulP
                                                                                        [AppE "delta"
                                                                                              []
                                                                                              [],
                                                                                         AppE "size"
                                                                                              []
                                                                                              [VarE "l"]]])
                                                                    (AppE "rotateL"
                                                                          []
                                                                          [VarE "k",VarE "x",
                                                                           VarE "l",VarE "r"])
                                                                    (IfE (PrimAppE GtEqP
                                                                                   [AppE "size"
                                                                                         []
                                                                                         [VarE "l"],
                                                                                    PrimAppE MulP
                                                                                             [AppE "delta"
                                                                                                   []
                                                                                                   [],
                                                                                              AppE "size"
                                                                                                   []
                                                                                                   [VarE "r"]]])
                                                                         (AppE "rotateR"
                                                                               []
                                                                               [VarE "k",VarE "x",
                                                                                VarE "l",VarE "r"])
                                                                         (DataConE (MetaTv $125)
                                                                                   "Bin"
                                                                                   [PrimAppE AddP
                                                                                             [AppE "size"
                                                                                                   []
                                                                                                   [VarE "l"],
                                                                                              AppE "size"
                                                                                                   []
                                                                                                   [VarE "r"]],
                                                                                    VarE "k",
                                                                                    VarE "x",
                                                                                    VarE "l",
                                                                                    VarE "r"]))),
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (ratio,
                                         FunDef {funName = "ratio",
                                                 funArgs = [],
                                                 funTy = ForAll [] (ArrowTy [] IntTy),
                                                 funBody = LitE 2,
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (delta,
                                         FunDef {funName = "delta",
                                                 funArgs = [],
                                                 funTy = ForAll [] (ArrowTy [] IntTy),
                                                 funBody = LitE 4,
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (deleteFindMax,
                                         FunDef {funName = "deleteFindMax",
                                                 funArgs = [t],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Maybe"
                                                                                   [ProdTy [ProdTy [IntTy,
                                                                                                    TyVar u:a],
                                                                                            PackedTy "Map"
                                                                                                     [TyVar u:a]]])),
                                                 funBody = CaseE (VarE "t")
                                                                 [("Tip",
                                                                   [],
                                                                   DataConE (MetaTv $101)
                                                                            "C.Nothing"
                                                                            []),
                                                                  ("Bin",
                                                                   [(wildcard_102, MetaTv $115),
                                                                    (k, MetaTv $116),
                                                                    (x, MetaTv $117),
                                                                    (l, MetaTv $118),
                                                                    (r, MetaTv $119)],
                                                                   CaseE (VarE "r")
                                                                         [("Tip",
                                                                           [],
                                                                           DataConE (MetaTv $103)
                                                                                    "C.Just"
                                                                                    [MkProdE [MkProdE [VarE "k",
                                                                                                       VarE "x"],
                                                                                              VarE "l"]]),
                                                                          ("_default",
                                                                           [],
                                                                           CaseE (AppE "deleteFindMax"
                                                                                       []
                                                                                       [VarE "r"])
                                                                                 [("C.Nothing",
                                                                                   [],
                                                                                   DataConE (MetaTv $104)
                                                                                            "C.Nothing"
                                                                                            []),
                                                                                  ("C.Just",
                                                                                   [(res,
                                                                                     MetaTv $114)],
                                                                                   LetE (tup110,
                                                                                         [],
                                                                                         MetaTv $111,
                                                                                         VarE "res")
                                                                                        (LetE (kv,
                                                                                               [],
                                                                                               MetaTv $113,
                                                                                               ProjE 0
                                                                                                     (VarE "tup110"))
                                                                                              (LetE (r',
                                                                                                     [],
                                                                                                     MetaTv $112,
                                                                                                     ProjE 1
                                                                                                           (VarE "tup110"))
                                                                                                    (LetE (tup106,
                                                                                                           [],
                                                                                                           MetaTv $107,
                                                                                                           VarE "kv")
                                                                                                          (LetE (delk,
                                                                                                                 [],
                                                                                                                 MetaTv $109,
                                                                                                                 ProjE 0
                                                                                                                       (VarE "tup106"))
                                                                                                                (LetE (delv,
                                                                                                                       [],
                                                                                                                       MetaTv $108,
                                                                                                                       ProjE 1
                                                                                                                             (VarE "tup106"))
                                                                                                                      (DataConE (MetaTv $105)
                                                                                                                                "C.Just"
                                                                                                                                [MkProdE [MkProdE [VarE "delk",
                                                                                                                                                   VarE "delv"],
                                                                                                                                          AppE "balance"
                                                                                                                                               []
                                                                                                                                               [VarE "k",
                                                                                                                                                VarE "x",
                                                                                                                                                VarE "l",
                                                                                                                                                VarE "r'"]]])))))))])])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (deleteFindMin,
                                         FunDef {funName = "deleteFindMin",
                                                 funArgs = [t],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Maybe"
                                                                                   [ProdTy [ProdTy [IntTy,
                                                                                                    TyVar u:a],
                                                                                            PackedTy "Map"
                                                                                                     [TyVar u:a]]])),
                                                 funBody = CaseE (VarE "t")
                                                                 [("Tip",
                                                                   [],
                                                                   DataConE (MetaTv $81)
                                                                            "Nothing"
                                                                            []),
                                                                  ("Bin",
                                                                   [(wildcard_82, MetaTv $95),
                                                                    (k, MetaTv $96),(x, MetaTv $97),
                                                                    (l, MetaTv $98),
                                                                    (r, MetaTv $99)],
                                                                   CaseE (VarE "l")
                                                                         [("Tip",
                                                                           [],
                                                                           DataConE (MetaTv $83)
                                                                                    "C.Just"
                                                                                    [MkProdE [MkProdE [VarE "k",
                                                                                                       VarE "x"],
                                                                                              VarE "r"]]),
                                                                          ("_default",
                                                                           [],
                                                                           CaseE (AppE "deleteFindMin"
                                                                                       []
                                                                                       [VarE "l"])
                                                                                 [("C.Nothing",
                                                                                   [],
                                                                                   DataConE (MetaTv $84)
                                                                                            "C.Nothing"
                                                                                            []),
                                                                                  ("C.Just",
                                                                                   [(res,
                                                                                     MetaTv $94)],
                                                                                   LetE (tup90,
                                                                                         [],
                                                                                         MetaTv $91,
                                                                                         VarE "res")
                                                                                        (LetE (kv,
                                                                                               [],
                                                                                               MetaTv $93,
                                                                                               ProjE 0
                                                                                                     (VarE "tup90"))
                                                                                              (LetE (l',
                                                                                                     [],
                                                                                                     MetaTv $92,
                                                                                                     ProjE 1
                                                                                                           (VarE "tup90"))
                                                                                                    (LetE (tup86,
                                                                                                           [],
                                                                                                           MetaTv $87,
                                                                                                           VarE "kv")
                                                                                                          (LetE (delk,
                                                                                                                 [],
                                                                                                                 MetaTv $89,
                                                                                                                 ProjE 0
                                                                                                                       (VarE "tup86"))
                                                                                                                (LetE (delv,
                                                                                                                       [],
                                                                                                                       MetaTv $88,
                                                                                                                       ProjE 1
                                                                                                                             (VarE "tup86"))
                                                                                                                      (DataConE (MetaTv $85)
                                                                                                                                "C.Just"
                                                                                                                                [MkProdE [MkProdE [VarE "delk",
                                                                                                                                                   VarE "delv"],
                                                                                                                                          AppE "balance"
                                                                                                                                               []
                                                                                                                                               [VarE "k",
                                                                                                                                                VarE "x",
                                                                                                                                                VarE "l'",
                                                                                                                                                VarE "r"]]])))))))])])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (glue,
                                         FunDef {funName = "glue",
                                                 funArgs = [l,r],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [PackedTy "Map"
                                                                                   [TyVar u:a],
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         (PackedTy "Map"
                                                                                   [TyVar u:a])),
                                                 funBody = CaseE (VarE "l")
                                                                 [("Tip", [], VarE "r"),
                                                                  ("Bin",
                                                                   [(wildcard_70, MetaTv $75),
                                                                    (wildcard_71, MetaTv $76),
                                                                    (wildcard_72, MetaTv $77),
                                                                    (wildcard_73, MetaTv $78),
                                                                    (wildcard_74, MetaTv $79)],
                                                                   VarE "l")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (member,
                                         FunDef {funName = "member",
                                                 funArgs = [k,m],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [IntTy,
                                                                          PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         BoolTy),
                                                 funBody = CaseE (AppE "Map.lookup"
                                                                       []
                                                                       [VarE "k",VarE "m"])
                                                                 [("Nothing",
                                                                   [],
                                                                   PrimAppE MkFalse []),
                                                                  ("Just",
                                                                   [(wildcard_49, MetaTv $50)],
                                                                   PrimAppE MkTrue [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (size,
                                         FunDef {funName = "size",
                                                 funArgs = [m],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Tip", [], LitE 0),
                                                                  ("Bin",
                                                                   [(sz, MetaTv $22),
                                                                    (wildcard_18, MetaTv $23),
                                                                    (wildcard_19, MetaTv $24),
                                                                    (wildcard_20, MetaTv $25),
                                                                    (wildcard_21, MetaTv $26)],
                                                                   VarE "sz")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (null,
                                         FunDef {funName = "null",
                                                 funArgs = [m],
                                                 funTy = ForAll [u:a]
                                                                (ArrowTy [PackedTy "Map"
                                                                                   [TyVar u:a]]
                                                                         BoolTy),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Tip", [], PrimAppE MkTrue []),
                                                                  ("Bin",
                                                                   [(wildcard_7, MetaTv $12),
                                                                    (wildcard_8, MetaTv $13),
                                                                    (wildcard_9, MetaTv $14),
                                                                    (wildcard_10, MetaTv $15),
                                                                    (wildcard_11, MetaTv $16)],
                                                                   PrimAppE MkFalse [])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}})],
                             mainExp = Just (AppE "insert"
                                                  []
                                                  [LitE 0,
                                                   LetE (vec207,
                                                         [],
                                                         VectorTy CharTy,
                                                         PrimAppE (VAllocP CharTy) [LitE 1])
                                                        (LetE (_,
                                                               [],
                                                               VectorTy CharTy,
                                                               PrimAppE (InplaceVUpdateP CharTy)
                                                                        [VarE "vec207",LitE 0,
                                                                         CharE 'f'])
                                                              (VarE "vec207")),
                                                   AppE "insert"
                                                        []
                                                        [LitE 5,
                                                         LetE (vec208,
                                                               [],
                                                               VectorTy CharTy,
                                                               PrimAppE (VAllocP CharTy) [LitE 1])
                                                              (LetE (_,
                                                                     [],
                                                                     VectorTy CharTy,
                                                                     PrimAppE (InplaceVUpdateP CharTy)
                                                                              [VarE "vec208",LitE 0,
                                                                               CharE 'f'])
                                                                    (VarE "vec208")),
                                                         AppE "insert"
                                                              []
                                                              [LitE 4,
                                                               LetE (vec209,
                                                                     [],
                                                                     VectorTy CharTy,
                                                                     PrimAppE (VAllocP CharTy)
                                                                              [LitE 1])
                                                                    (LetE (_,
                                                                           [],
                                                                           VectorTy CharTy,
                                                                           PrimAppE (InplaceVUpdateP CharTy)
                                                                                    [VarE "vec209",
                                                                                     LitE 0,
                                                                                     CharE 'e'])
                                                                          (VarE "vec209")),
                                                               AppE "insert"
                                                                    []
                                                                    [LitE 3,
                                                                     LetE (vec210,
                                                                           [],
                                                                           VectorTy CharTy,
                                                                           PrimAppE (VAllocP CharTy)
                                                                                    [LitE 1])
                                                                          (LetE (_,
                                                                                 [],
                                                                                 VectorTy CharTy,
                                                                                 PrimAppE (InplaceVUpdateP CharTy)
                                                                                          [VarE "vec210",
                                                                                           LitE 0,
                                                                                           CharE 'd'])
                                                                                (VarE "vec210")),
                                                                     AppE "insert"
                                                                          []
                                                                          [LitE 2,
                                                                           LetE (vec211,
                                                                                 [],
                                                                                 VectorTy CharTy,
                                                                                 PrimAppE (VAllocP CharTy)
                                                                                          [LitE 1])
                                                                                (LetE (_,
                                                                                       [],
                                                                                       VectorTy CharTy,
                                                                                       PrimAppE (InplaceVUpdateP CharTy)
                                                                                                [VarE "vec211",
                                                                                                 LitE 0,
                                                                                                 CharE 'c'])
                                                                                      (VarE "vec211")),
                                                                           AppE "insert"
                                                                                []
                                                                                [LitE 1,
                                                                                 LetE (vec212,
                                                                                       [],
                                                                                       VectorTy CharTy,
                                                                                       PrimAppE (VAllocP CharTy)
                                                                                                [LitE 1])
                                                                                      (LetE (_,
                                                                                             [],
                                                                                             VectorTy CharTy,
                                                                                             PrimAppE (InplaceVUpdateP CharTy)
                                                                                                      [VarE "vec212",
                                                                                                       LitE 0,
                                                                                                       CharE 'b'])
                                                                                            (VarE "vec212")),
                                                                                 AppE "insert"
                                                                                      []
                                                                                      [LitE 0,
                                                                                       LetE (vec213,
                                                                                             [],
                                                                                             VectorTy CharTy,
                                                                                             PrimAppE (VAllocP CharTy)
                                                                                                      [LitE 1])
                                                                                            (LetE (_,
                                                                                                   [],
                                                                                                   VectorTy CharTy,
                                                                                                   PrimAppE (InplaceVUpdateP CharTy)
                                                                                                            [VarE "vec213",
                                                                                                             LitE 0,
                                                                                                             CharE 'a'])
                                                                                                  (VarE "vec213")),
                                                                                       AppE "empty"
                                                                                            []
                                                                                            []]]]]]]],
                                             MetaTv $214)})
                       [ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 7 1 7 19, srcInfoPoints = [SrcSpan "<unknown>.hs" 7 1 7 7,SrcSpan "<unknown>.hs" 7 15 7 17]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 7 8 7 14, srcInfoPoints = []}) "Common", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 7 18 7 19, srcInfoPoints = []}) "C"), importSpecs = Nothing}],
            ProgModule "Common"
                       (Prog
                            {ddefs = [(Maybe,
                                       DDef {tyName = "Maybe",
                                             tyArgs = [u:a],
                                             dataCons = [("Nothing", []),
                                                         ("Just", [(False, TyVar u:a)])]}),
                                      (Ord,
                                       DDef {tyName = "Ord",
                                             tyArgs = [],
                                             dataCons = [("Lt", []),("Gt", []),("Eq", []),
                                                         ("Cc", [])]})],
                             fundefs = [(compareInt,
                                         FunDef {funName = "compareInt",
                                                 funArgs = [a,b],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,IntTy]
                                                                         (PackedTy "Ord" [])),
                                                 funBody = LetE (sub,
                                                                 [],
                                                                 MetaTv $6,
                                                                 PrimAppE SubP [VarE "a",VarE "b"])
                                                                (IfE (PrimAppE LtP
                                                                               [VarE "sub",LitE 0])
                                                                     (DataConE (MetaTv $2) "Lt" [])
                                                                     (IfE (PrimAppE GtP
                                                                                    [VarE "sub",
                                                                                     LitE 0])
                                                                          (DataConE (MetaTv $3)
                                                                                    "Gt"
                                                                                    [])
                                                                          (IfE (PrimAppE EqIntP
                                                                                         [VarE "sub",
                                                                                          LitE 0])
                                                                               (DataConE (MetaTv $4)
                                                                                         "Eq"
                                                                                         [])
                                                                               (DataConE (MetaTv $5)
                                                                                         "Cc"
                                                                                         [])))),
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}})],
                             mainExp = Nothing})
                       [],
            ProgModule "Clock"
                       (Prog
                            {ddefs = [(Clock,
                                       DDef {tyName = "Clock",
                                             tyArgs = [],
                                             dataCons = [("Clk",
                                                          [(False, PackedTy "Map" [IntTy])])]}),
                                      (Timestamp,
                                       DDef {tyName = "Timestamp",
                                             tyArgs = [],
                                             dataCons = [("Timestamp",
                                                          [(False, IntTy),
                                                           (False, PackedTy "Clock" [])])]})],
                             fundefs = [(init,
                                         FunDef {funName = "init",
                                                 funArgs = [uid],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy]
                                                                         (PackedTy "Clock" [])),
                                                 funBody = AppE "singleton" [] [VarE "uid",LitE 0],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (step,
                                         FunDef {funName = "step",
                                                 funArgs = [uid,clk],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,PackedTy "Clock" []]
                                                                         (PackedTy "Clock" [])),
                                                 funBody = CaseE (AppE "M.lookup"
                                                                       []
                                                                       [VarE "uid",VarE "clk"])
                                                                 [("C.Just",
                                                                   [(v, MetaTv $11)],
                                                                   AppE "M.insert"
                                                                        []
                                                                        [VarE "uid",
                                                                         PrimAppE AddP
                                                                                  [VarE "v",LitE 1],
                                                                         VarE "clk"]),
                                                                  ("C.Nothing",
                                                                   [],
                                                                   AppE "M.insert"
                                                                        []
                                                                        [VarE "uid",LitE 1,
                                                                         VarE "clk"])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (stamp,
                                         FunDef {funName = "stamp",
                                                 funArgs = [uid,clk],
                                                 funTy = ForAll []
                                                                (ArrowTy [IntTy,PackedTy "Clock" []]
                                                                         (PackedTy "Timestamp" [])),
                                                 funBody = DataConE (MetaTv $14)
                                                                    "Timestamp"
                                                                    [VarE "uid",VarE "clk"],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (clock,
                                         FunDef {funName = "clock",
                                                 funArgs = [t],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "Timestamp" []]
                                                                         (PackedTy "Clock" [])),
                                                 funBody = CaseE (VarE "t")
                                                                 [("Timestamp",
                                                                   [(wildcard_1, MetaTv $2),
                                                                    (c, MetaTv $3)],
                                                                   VarE "c")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (compare,
                                         FunDef {funName = "compare",
                                                 funArgs = [a,b],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "Clock" [],
                                                                          PackedTy "Clock" []]
                                                                         (PackedTy "C.Ord" [])),
                                                 funBody = CaseE (VarE "a")
                                                                 [("Tip",
                                                                   [],
                                                                   CaseE (VarE "b")
                                                                         [("Tip",
                                                                           [],
                                                                           DataConE (MetaTv $17)
                                                                                    "Eq"
                                                                                    []),
                                                                          ("Bin",
                                                                           [(wildcard_18,
                                                                             MetaTv $24),
                                                                            (wildcard_19,
                                                                             MetaTv $25),
                                                                            (wildcard_20,
                                                                             MetaTv $26),
                                                                            (wildcard_21,
                                                                             MetaTv $27),
                                                                            (wildcard_22,
                                                                             MetaTv $28)],
                                                                           DataConE (MetaTv $23)
                                                                                    "Lt"
                                                                                    [])]),
                                                                  ("Bin",
                                                                   [(wildcard_29, MetaTv $64),
                                                                    (wildcard_30, MetaTv $65),
                                                                    (wildcard_31, MetaTv $66),
                                                                    (wildcard_32, MetaTv $67),
                                                                    (wildcard_33, MetaTv $68)],
                                                                   CaseE (VarE "b")
                                                                         [("Tip",
                                                                           [],
                                                                           DataConE (MetaTv $34)
                                                                                    "Gt"
                                                                                    []),
                                                                          ("Bin",
                                                                           [(wildcard_35,
                                                                             MetaTv $59),
                                                                            (wildcard_36,
                                                                             MetaTv $60),
                                                                            (wildcard_37,
                                                                             MetaTv $61),
                                                                            (wildcard_38,
                                                                             MetaTv $62),
                                                                            (wildcard_39,
                                                                             MetaTv $63)],
                                                                           LetE (k,
                                                                                 [],
                                                                                 MetaTv $58,
                                                                                 AppE "key"
                                                                                      []
                                                                                      [VarE "a"])
                                                                                (LetE (diff,
                                                                                       [],
                                                                                       MetaTv $57,
                                                                                       CaseE (AppE "M.lookup"
                                                                                                   []
                                                                                                   [VarE "k",
                                                                                                    VarE "a"])
                                                                                             [("C.Nothing",
                                                                                               [],
                                                                                               CaseE (AppE "M.lookup"
                                                                                                           []
                                                                                                           [VarE "k",
                                                                                                            VarE "b"])
                                                                                                     [("C.Nothing",
                                                                                                       [],
                                                                                                       DataConE (MetaTv $50)
                                                                                                                "Eq"
                                                                                                                []),
                                                                                                      ("C.Just",
                                                                                                       [(wildcard_51,
                                                                                                         MetaTv $53)],
                                                                                                       DataConE (MetaTv $52)
                                                                                                                "Lt"
                                                                                                                [])]),
                                                                                              ("C.Just",
                                                                                               [(ax,
                                                                                                 MetaTv $56)],
                                                                                               CaseE (AppE "M.lookup"
                                                                                                           []
                                                                                                           [VarE "k",
                                                                                                            VarE "b"])
                                                                                                     [("C.Nothing",
                                                                                                       [],
                                                                                                       DataConE (MetaTv $54)
                                                                                                                "Gt"
                                                                                                                []),
                                                                                                      ("C.Just",
                                                                                                       [(bx,
                                                                                                         MetaTv $55)],
                                                                                                       AppE "C.compareInt"
                                                                                                            []
                                                                                                            [VarE "ax",
                                                                                                             VarE "bx"])])])
                                                                                      (LetE (comp,
                                                                                             [],
                                                                                             MetaTv $49,
                                                                                             AppE "compare"
                                                                                                  []
                                                                                                  [AppE "delete"
                                                                                                        []
                                                                                                        [VarE "k",
                                                                                                         VarE "a"],
                                                                                                   AppE "delete"
                                                                                                        []
                                                                                                        [VarE "k",
                                                                                                         VarE "b"]])
                                                                                            (CaseE (VarE "diff")
                                                                                                   [("Lt",
                                                                                                     [],
                                                                                                     CaseE (VarE "diff")
                                                                                                           [("Lt",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $40)
                                                                                                                      "Lt"
                                                                                                                      []),
                                                                                                            ("Eq",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $41)
                                                                                                                      "Lt"
                                                                                                                      []),
                                                                                                            ("_default",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $42)
                                                                                                                      "Cc"
                                                                                                                      [])]),
                                                                                                    ("Gt",
                                                                                                     [],
                                                                                                     CaseE (VarE "diff")
                                                                                                           [("Gt",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $43)
                                                                                                                      "Gt"
                                                                                                                      []),
                                                                                                            ("Eq",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $44)
                                                                                                                      "Gt"
                                                                                                                      []),
                                                                                                            ("_default",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $45)
                                                                                                                      "Cc"
                                                                                                                      [])]),
                                                                                                    ("Eq",
                                                                                                     [],
                                                                                                     CaseE (VarE "diff")
                                                                                                           [("Eq",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $46)
                                                                                                                      "Eq"
                                                                                                                      []),
                                                                                                            ("_default",
                                                                                                             [],
                                                                                                             DataConE (MetaTv $47)
                                                                                                                      "Cc"
                                                                                                                      [])]),
                                                                                                    ("Cc",
                                                                                                     [],
                                                                                                     DataConE (MetaTv $48)
                                                                                                              "Cc"
                                                                                                              [])]))))])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (author,
                                         FunDef {funName = "author",
                                                 funArgs = [t],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "Timestamp" []]
                                                                         IntTy),
                                                 funBody = CaseE (VarE "t")
                                                                 [("Timestamp",
                                                                   [(a, MetaTv $6),
                                                                    (wildcard_5, MetaTv $7)],
                                                                   VarE "a")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}})],
                             mainExp = Nothing})
                       [ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 3 1 3 16, srcInfoPoints = [SrcSpan "<unknown>.hs" 3 1 3 7,SrcSpan "<unknown>.hs" 3 12 3 14]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 3 8 3 11, srcInfoPoints = []}) "Map", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 3 15 3 16, srcInfoPoints = []}) "M"), importSpecs = Nothing},
                        ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 4 1 4 19, srcInfoPoints = [SrcSpan "<unknown>.hs" 4 1 4 7,SrcSpan "<unknown>.hs" 4 15 4 17]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 4 8 4 14, srcInfoPoints = []}) "Common", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 4 18 4 19, srcInfoPoints = []}) "C"), importSpecs = Nothing}]]
           (ProgModule "IntOrSet"
                       (Prog
                            {ddefs = [(IntOrSet,
                                       DDef {tyName = "IntOrSet",
                                             tyArgs = [],
                                             dataCons = [("OrSet",
                                                          [(False, PackedTy "Clock" []),
                                                           (False,
                                                            PackedTy "M.Map"
                                                                     [PackedTy "Timestamp" []]),
                                                           (False,
                                                            PackedTy "IntSet"
                                                                     [PackedTy "Timestamp"
                                                                               []])])]})],
                             fundefs = [(getClock,
                                         FunDef {funName = "getClock",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntOrSet" []]
                                                                         (PackedTy "Clock" [])),
                                                 funBody = CaseE (VarE "x")
                                                                 [("OrSet",
                                                                   [(clk, MetaTv $4),
                                                                    (wildcard_1, MetaTv $5),
                                                                    (wildcard_2, MetaTv $6),
                                                                    (wildcard_3, MetaTv $7)],
                                                                   VarE "clk")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (buildValue,
                                         FunDef {funName = "buildValue",
                                                 funArgs = [m,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "M.Map"
                                                                                   [PackedTy "Timestamp"
                                                                                             []],
                                                                          PackedTy "IntSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = CaseE (VarE "m")
                                                                 [("Tip", [], VarE "s"),
                                                                  ("Bin",
                                                                   [(wildcard_38, MetaTv $39),
                                                                    (k, MetaTv $40),(v, MetaTv $41),
                                                                    (l, MetaTv $42),
                                                                    (r, MetaTv $43)],
                                                                   AppE "buildValue"
                                                                        []
                                                                        [VarE "r",
                                                                         AppE "S.insert"
                                                                              []
                                                                              [VarE "k",
                                                                               AppE "buildValue"
                                                                                    []
                                                                                    [VarE "r",
                                                                                     VarE "s"]]])],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (value,
                                         FunDef {funName = "value",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntOrSet" []]
                                                                         (PackedTy "IntSet" [])),
                                                 funBody = AppE "buildValue"
                                                                []
                                                                [AppE "getState" [] [VarE "x"],
                                                                 VarE "S.empty"],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (remove,
                                         FunDef {funName = "remove",
                                                 funArgs = [el,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "Timestamp" [],
                                                                          IntTy,
                                                                          PackedTy "IntOrSet" []]
                                                                         (PackedTy "IntOrSet" [])),
                                                 funBody = LetE (clk,
                                                                 [],
                                                                 MetaTv $34,
                                                                 AppE "getClock" [] [VarE "s"])
                                                                (CaseE (AppE "lookup"
                                                                             []
                                                                             [VarE "el",
                                                                              AppE "getState"
                                                                                   []
                                                                                   [VarE "s"]])
                                                                       [("Just",
                                                                         [(timestamp, MetaTv $33)],
                                                                         DataConE (MetaTv $32)
                                                                                  "OrSet"
                                                                                  [AppE "step"
                                                                                        []
                                                                                        [VarE "uid",
                                                                                         VarE "clk"],
                                                                                   AppE "delete"
                                                                                        []
                                                                                        [VarE "el",
                                                                                         AppE "getState"
                                                                                              []
                                                                                              [VarE "s"]],
                                                                                   AppE "insert"
                                                                                        []
                                                                                        [VarE "timestamp",
                                                                                         AppE "getDelSet"
                                                                                              []
                                                                                              [VarE "s"]]]),
                                                                        ("Nothing", [], VarE "s")]),
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (add,
                                         FunDef {funName = "add",
                                                 funArgs = [el,s],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "Timestamp" [],
                                                                          IntTy,
                                                                          PackedTy "IntOrSet" []]
                                                                         (PackedTy "IntOrSet" [])),
                                                 funBody = LetE (clk,
                                                                 [],
                                                                 MetaTv $29,
                                                                 AppE "getClock" [] [VarE "s"])
                                                                (LetE (timestamp,
                                                                       [],
                                                                       MetaTv $28,
                                                                       AppE "lookup"
                                                                            []
                                                                            [VarE "el",
                                                                             AppE "getState"
                                                                                  []
                                                                                  [VarE "s"]])
                                                                      (DataConE (MetaTv $26)
                                                                                "OrSet"
                                                                                [AppE "step"
                                                                                      []
                                                                                      [VarE "uid",
                                                                                       VarE "clk"],
                                                                                 AppE "insert"
                                                                                      []
                                                                                      [VarE "el",
                                                                                       AppE "stamp"
                                                                                            []
                                                                                            [VarE "uid",
                                                                                             VarE "clk"],
                                                                                       AppE "getState"
                                                                                            []
                                                                                            [VarE "s"]],
                                                                                 CaseE (VarE "timestamp")
                                                                                       [("Just",
                                                                                         [(timestamp,
                                                                                           MetaTv $27)],
                                                                                         AppE "insert"
                                                                                              []
                                                                                              [VarE "timestamp",
                                                                                               AppE "getDelSet"
                                                                                                    []
                                                                                                    [VarE "s"]]),
                                                                                        ("Nothing",
                                                                                         [],
                                                                                         AppE "getDelSet"
                                                                                              []
                                                                                              [VarE "s"])]])),
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (init,
                                         FunDef {funName = "init",
                                                 funArgs = [uid,el],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "Timestamp" [],
                                                                          IntTy]
                                                                         (PackedTy "IntOrSet" [])),
                                                 funBody = LetE (clk,
                                                                 [],
                                                                 MetaTv $23,
                                                                 AppE "init" [] [VarE "uid"])
                                                                (DataConE (MetaTv $22)
                                                                          "OrSet"
                                                                          [AppE "step"
                                                                                []
                                                                                [VarE "uid",
                                                                                 VarE "clk"],
                                                                           AppE "singleton"
                                                                                []
                                                                                [VarE "el",
                                                                                 AppE "stamp"
                                                                                      []
                                                                                      [VarE "uid",
                                                                                       VarE "clk"]],
                                                                           VarE "S.empty"]),
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (getDelSet,
                                         FunDef {funName = "getDelSet",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntOrSet" []]
                                                                         (PackedTy "IntSet"
                                                                                   [PackedTy "Timestamp"
                                                                                             []])),
                                                 funBody = CaseE (VarE "x")
                                                                 [("OrSet",
                                                                   [(wildcard_15, MetaTv $17),
                                                                    (wildcard_16, MetaTv $18),
                                                                    (delset, MetaTv $19)],
                                                                   VarE "delset")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}}),
                                        (getState,
                                         FunDef {funName = "getState",
                                                 funArgs = [x],
                                                 funTy = ForAll []
                                                                (ArrowTy [PackedTy "IntOrSet" []]
                                                                         (PackedTy "M.Map"
                                                                                   [PackedTy "Timestamp"
                                                                                             []])),
                                                 funBody = CaseE (VarE "x")
                                                                 [("OrSet",
                                                                   [(wildcard_9, MetaTv $11),
                                                                    (s, MetaTv $12),
                                                                    (wildcard_10, MetaTv $13)],
                                                                   VarE "s"),
                                                                  ("_default", [], VarE "M.empty")],
                                                 funMeta = FunMeta {funRec = NotRec,
                                                                    funInline = NoInline,
                                                                    funCanTriggerGC = False,
                                                                    funOptLayout = NoLayoutOpt,
                                                                    userConstraintsDataCon = Nothing}})],
                             mainExp = Nothing})
                       [ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 5 1 5 13, srcInfoPoints = [SrcSpan "<unknown>.hs" 5 1 5 7]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 5 8 5 13, srcInfoPoints = []}) "Clock", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing},
                        ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 6 1 6 14, srcInfoPoints = [SrcSpan "<unknown>.hs" 6 1 6 7]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 6 8 6 14, srcInfoPoints = []}) "Common", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Nothing, importSpecs = Nothing},
                        ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 7 1 7 16, srcInfoPoints = [SrcSpan "<unknown>.hs" 7 1 7 7,SrcSpan "<unknown>.hs" 7 12 7 14]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 7 8 7 11, srcInfoPoints = []}) "Map", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 7 15 7 16, srcInfoPoints = []}) "M"), importSpecs = Nothing},
                        ImportDecl {importAnn = SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 8 1 8 16, srcInfoPoints = [SrcSpan "<unknown>.hs" 8 1 8 7,SrcSpan "<unknown>.hs" 8 12 8 14]}, importModule = ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 8 8 8 11, srcInfoPoints = []}) "Set", importQualified = False, importSrc = False, importSafe = False, importPkg = Nothing, importAs = Just (ModuleName (SrcSpanInfo {srcInfoSpan = SrcSpan "<unknown>.hs" 8 15 8 16, srcInfoPoints = []}) "S"), importSpecs = Nothing}])

 [compiler] Running pass, freshBundle
Pass output:
================================================================================
data IntOrSet52 = OrSet53 (Packed Clock111 []) (Packed Map93 [(Packed Timestamp112 [])]) (Packed IntSet68 [(Packed Timestamp112 [])])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
getClock44 :: forall. ((Packed IntOrSet52 []) -> (Packed Clock111 []))
getClock44 x =
    case x of
        OrSet53 clk::$4 wildcard_1::$5 wildcard_2::$6 wildcard_3::$7 ->
            clk

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
buildValue45 :: forall. ((Packed Map93 [(Packed Timestamp112 [])]) -> (Packed IntSet68 []) -> (Packed IntSet68 []))
buildValue45 m s =
    case m of
        Tip94 ->
            s
        Bin95 wildcard_38::$39 k::$40 v::$41 l::$42 r::$43 ->
            (buildValue45 [] r (insert55 [] k (buildValue45 [] r s)))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
value46 :: forall. ((Packed IntOrSet52 []) -> (Packed IntSet68 []))
value46 x =
    (buildValue45 [] (getState51 [] x) empty56)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
remove47 :: forall. ((Packed Timestamp112 []) -> Int -> (Packed IntOrSet52 []) -> (Packed IntOrSet52 []))
remove47 el s =
    let clk :: $34 = (getClock44 [] s) in
    case (lookup73 [] el (getState51 [] s)) of
        Just104 timestamp::$33 ->
            (OrSet53 $32 (step106 [] uid clk) (delete74 [] el (getState51 [] s)) (insert72 [] timestamp (getDelSet50 [] s)))
        Nothing103 ->
            s

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
add48 :: forall. ((Packed Timestamp112 []) -> Int -> (Packed IntOrSet52 []) -> (Packed IntOrSet52 []))
add48 el s =
    let clk :: $29 = (getClock44 [] s) in
    let timestamp :: $28 = (lookup73 [] el (getState51 [] s)) in
    (OrSet53 $26 (step106 [] uid clk) (insert72 [] el (stamp107 [] uid clk) (getState51 [] s)) case timestamp of
                                                                                                   Just104 timestamp::$27 ->
                                                                                                       (insert72 [] timestamp (getDelSet50 [] s))
                                                                                                   Nothing103 ->
                                                                                                       (getDelSet50 [] s))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
init105 :: forall. ((Packed Timestamp112 []) -> Int -> (Packed IntOrSet52 []))
init105 uid el =
    let clk :: $23 = (init105 [] uid) in
    (OrSet53 $22 (step106 [] uid clk) (singleton71 [] el (stamp107 [] uid clk)) empty56)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
getDelSet50 :: forall. ((Packed IntOrSet52 []) -> (Packed IntSet68 [(Packed Timestamp112 [])]))
getDelSet50 x =
    case x of
        OrSet53 wildcard_15::$17 wildcard_16::$18 delset::$19 ->
            delset

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
getState51 :: forall. ((Packed IntOrSet52 []) -> (Packed Map93 [(Packed Timestamp112 [])]))
getState51 x =
    case x of
        OrSet53 wildcard_9::$11 s::$12 wildcard_10::$13 ->
            s
        _default ->
            empty76

data IntSet68 = PureSet69 Int Int (Packed IntSet68 []) (Packed IntSet68 []) | 
                EmptySet70
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleton54 :: forall. (Int -> (Packed IntSet68 []))
singleton54 x =
    (PureSet69 $2 1 x (EmptySet70 $3) (EmptySet70 $4))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
insert55 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []))
insert55 x s =
    case s of
        EmptySet70 ->
            (singleton54 [] x)
        PureSet69 sz::$9 v::$10 l::$11 r::$12 ->
            if x == v
            then s
            else if <=(x, v)
                 then let nl :: $7 = (insert55 [] x l) in
                      (balanceL67 [] v nl r)
                 else let nr :: $8 = (insert55 [] x r) in
                      (balanceR66 [] v l nr)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
empty56 :: forall. ((Packed IntSet68 []))
empty56 =
    (EmptySet70 $0)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
member57 :: forall. (Int -> (Packed IntSet68 []) -> Bool)
member57 x s =
    case s of
        EmptySet70 ->
            False
        PureSet69 wildcard_146::$147 v::$148 l::$149 r::$150 ->
            if x == v
            then True
            else if <=(x, v)
                 then (member57 [] x l)
                 else (member57 [] x r)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
size58 :: forall. ((Packed IntSet68 []) -> Int)
size58 s =
    case s of
        EmptySet70 ->
            0
        PureSet69 sz::$163 wildcard_160::$164 wildcard_161::$165 wildcard_162::$166 ->
            sz

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
null59 :: forall. ((Packed IntSet68 []) -> Bool)
null59 s =
    case s of
        EmptySet70 ->
            True
        PureSet69 wildcard_136::$140 wildcard_137::$141 wildcard_138::$142 wildcard_139::$143 ->
            False

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
sum60 :: forall. ((Packed IntSet68 []) -> Int)
sum60 s =
    case s of
        EmptySet70 ->
            0
        PureSet69 wildcard_196::$197 v::$198 l::$199 r::$200 ->
            v + (sum60 [] l) + (sum60 [] r)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
insert_num61 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []))
insert_num61 x s =
    if x == 0
    then (insert55 [] x s)
    else (insert55 [] x (insert_num61 [] x - 1 s))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
right62 :: forall. ((Packed IntSet68 []) -> (Packed IntSet68 []))
right62 x =
    case x of
        EmptySet70 ->
            (EmptySet70 $185)
        PureSet69 wildcard_186::$189 wildcard_187::$190 wildcard_188::$191 r::$192 ->
            r

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
left63 :: forall. ((Packed IntSet68 []) -> (Packed IntSet68 []))
left63 x =
    case x of
        EmptySet70 ->
            (EmptySet70 $176)
        PureSet69 wildcard_177::$180 wildcard_178::$181 l::$182 wildcard_179::$183 ->
            l

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
val64 :: forall. ((Packed IntSet68 []) -> Int)
val64 x =
    case x of
        EmptySet70 ->
            0
        PureSet69 wildcard_168::$171 v::$172 wildcard_169::$173 wildcard_170::$174 ->
            v

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
depth65 :: forall. (Int -> Int -> (Packed IntSet68 []) -> Int)
depth65 x c s =
    case s of
        EmptySet70 ->
            0 - 1
        PureSet69 wildcard_154::$155 v::$156 l::$157 r::$158 ->
            if x == v
            then c + 1
            else if <=(x, v)
                 then (depth65 [] x c + 1 l)
                 else (depth65 [] x c + 1 r)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
balanceR66 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []) -> (Packed IntSet68 []))
balanceR66 x l r =
    case l of
        EmptySet70 ->
            case r of
                EmptySet70 ->
                    (PureSet69 $77 1 x (EmptySet70 $78) (EmptySet70 $79))
                PureSet69 rs::$112 rx::$113 rl::$114 rr::$115 ->
                    case rr of
                        PureSet69 rrs::$95 rrx::$96 rrl::$97 rrr::$98 ->
                            case rl of
                                PureSet69 rls::$87 rlx::$88 rll::$89 rlr::$90 ->
                                    if (size58 [] rl) < 2 * (size58 [] rr)
                                    then (PureSet69 $80 1 + rs rx (PureSet69 $81 1 + (size58 [] rl) x (EmptySet70 $82) rl) rr)
                                    else (PureSet69 $83 1 + rs (val64 [] rl) (PureSet69 $84 1 + (size58 [] (left63 [] rl)) x (EmptySet70 $85) (left63 [] rl)) (PureSet69 $86 1 + (size58 [] rr) + (size58 [] (right62 [] rl)) rx (right62 [] rl) rr))
                                EmptySet70 ->
                                    (PureSet69 $91 3 rx (PureSet69 $92 1 x (EmptySet70 $93) (EmptySet70 $94)) rr)
                        EmptySet70 ->
                            case rl of
                                PureSet69 rls::$106 rlx::$107 rll::$108 rlr::$109 ->
                                    (PureSet69 $99 3 (val64 [] rl) (PureSet69 $100 1 x (EmptySet70 $101) (EmptySet70 $102)) (PureSet69 $103 1 rx (EmptySet70 $104) (EmptySet70 $105)))
                                EmptySet70 ->
                                    (PureSet69 $110 2 x (EmptySet70 $111) r)
        PureSet69 ls::$131 wildcard_116::$132 wildcard_117::$133 wildcard_118::$134 ->
            case r of
                EmptySet70 ->
                    (PureSet69 $119 1 + ls x l (EmptySet70 $120))
                PureSet69 rs::$127 rx::$128 rl::$129 rr::$130 ->
                    if rs > 3 * ls
                    then if (size58 [] rl) < 2 * (size58 [] rr)
                         then (PureSet69 $121 1 + ls + rs rx (PureSet69 $122 1 + ls + (size58 [] rl) x l rl) rr)
                         else (PureSet69 $123 1 + ls + rs (val64 [] rl) (PureSet69 $124 1 + ls + (size58 [] (left63 [] rl)) x l (left63 [] rl)) (PureSet69 $125 1 + (size58 [] rr) + (size58 [] (right62 [] rl)) rx (right62 [] rl) rr))
                    else (PureSet69 $126 1 + ls + rs x l r)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
balanceL67 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []) -> (Packed IntSet68 []))
balanceL67 x l r =
    case r of
        EmptySet70 ->
            case l of
                EmptySet70 ->
                    (PureSet69 $16 1 x (EmptySet70 $17) (EmptySet70 $18))
                PureSet69 ls::$51 lx::$52 ll::$53 lr::$54 ->
                    case ll of
                        PureSet69 lls::$34 llx::$35 lll::$36 llr::$37 ->
                            case lr of
                                PureSet69 lrs::$26 lrx::$27 lrl::$28 lrr::$29 ->
                                    if lrs < 2 * lls
                                    then (PureSet69 $19 1 + ls lx ll (PureSet69 $20 1 + lrs x lr (EmptySet70 $21)))
                                    else (PureSet69 $22 1 + ls lrx (PureSet69 $23 1 + lls + (size58 [] lrl) lx ll lrl) (PureSet69 $24 1 + (size58 [] lrr) x lrr (EmptySet70 $25)))
                                EmptySet70 ->
                                    (PureSet69 $30 3 lx ll (PureSet69 $31 1 x (EmptySet70 $32) (EmptySet70 $33)))
                        EmptySet70 ->
                            case lr of
                                PureSet69 lrs::$45 lrx::$46 lrl::$47 lrr::$48 ->
                                    (PureSet69 $38 3 lrx (PureSet69 $39 1 lx (EmptySet70 $40) (EmptySet70 $41)) (PureSet69 $42 1 x (EmptySet70 $43) (EmptySet70 $44)))
                                EmptySet70 ->
                                    (PureSet69 $49 2 x l (EmptySet70 $50))
        PureSet69 rs::$70 wildcard_55::$71 wildcard_56::$72 wildcard_57::$73 ->
            case l of
                EmptySet70 ->
                    (PureSet69 $58 1 + rs x (EmptySet70 $59) r)
                PureSet69 ls::$66 lx::$67 ll::$68 lr::$69 ->
                    if ls > 3 * rs
                    then if (size58 [] lr) < 2 * (size58 [] ll)
                         then (PureSet69 $60 1 + ls + rs lx ll (PureSet69 $61 1 + rs + (size58 [] lr) x lr r))
                         else (PureSet69 $62 1 + ls + rs (val64 [] lr) (PureSet69 $63 1 + (size58 [] ll) + (size58 [] (left63 [] lr)) lx ll (left63 [] lr)) (PureSet69 $64 1 + rs + (size58 [] (right62 [] lr)) x (right62 [] lr) r))
                    else (PureSet69 $65 1 + ls + rs x l r)

gibbon_main :: $201
gibbon_main = (sum60 [] (insert55 [] 0 (empty56 [])))
data Map93 u:a = Tip94 | 
                 Bin95 Int Int u:a (Packed Map93 [u:a]) (Packed Map93 [u:a])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleton71 :: forall u:a. (Int -> u:a -> (Packed Map93 [u:a]))
singleton71 k x =
    (Bin95 $3 1 k x (Tip94 $4) (Tip94 $5))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
insert72 :: forall u:a. (Int -> u:a -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]))
insert72 kx x m =
    case m of
        Tip94 ->
            (singleton71 [] kx x)
        Bin95 sz::$55 k::$56 v::$57 l::$58 r::$59 ->
            if kx == k
            then (Bin95 $54 sz k x l r)
            else if <=(kx, k)
                 then (balance84 [] k v (insert72 [] kx x l) r)
                 else (balance84 [] k v l (insert72 [] kx x r))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
lookup73 :: forall u:a. (Int -> (Packed Map93 [u:a]) -> (Packed Maybe97 [u:a]))
lookup73 k m =
    case m of
        Tip94 ->
            (Nothing103 $39)
        Bin95 wildcard_40::$42 kx::$43 v::$44 l::$45 r::$46 ->
            if k < kx
            then (lookup73 [] k l)
            else if k > kx
                 then (lookup73 [] k r)
                 else (Just104 $41 v)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
delete74 :: forall u:a. (Int -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]))
delete74 kx m =
    case m of
        Tip94 ->
            (Tip94 $62)
        Bin95 sz::$63 k::$64 v::$65 l::$66 r::$67 ->
            if kx == k
            then (glue89 [] l r)
            else if <=(kx, k)
                 then (balance84 [] kx v (delete74 [] kx l) r)
                 else (balance84 [] kx v l (delete74 [] kx r))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
key75 :: forall u:a. ((Packed Map93 [u:a]) -> Int)
key75 s =
    case s of
        Tip94 ->
            0
        Bin95 wildcard_28::$32 k::$33 wildcard_29::$34 wildcard_30::$35 wildcard_31::$36 ->
            k

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
empty76 :: forall u:a. ((Packed Map93 [u:a]))
empty76 =
    (Tip94 $0)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
doubleR77 :: forall u:b. (Int -> u:b -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]))
doubleR77 k1 x1 m0 t4 =
    case m0 of
        Bin95 wildcard_195::$202 k2::$203 x2::$204 t1::$205 m1::$206 ->
            case m1 of
                Bin95 wildcard_196::$197 k3::$198 x3::$199 t2::$200 t3::$201 ->
                    (bin81 [] k3 x3 (bin81 [] k2 x2 t1 t2) (bin81 [] k1 x1 t3 t4))
                Tip94 ->
                    (empty76 [])
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
doubleL78 :: forall u:b. (Int -> u:b -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]))
doubleL78 k1 x1 t1 m0 =
    case m0 of
        Bin95 wildcard_179::$186 k2::$187 x2::$188 m1::$189 t4::$190 ->
            case m1 of
                Bin95 wildcard_180::$181 k3::$182 x3::$183 t2::$184 t3::$185 ->
                    (bin81 [] k3 x3 (bin81 [] k1 x1 t1 t2) (bin81 [] k2 x2 t3 t4))
                Tip94 ->
                    (empty76 [])
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleR79 :: forall u:b. (Int -> u:b -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]))
singleR79 k1 x1 m t3 =
    case m of
        Bin95 wildcard_169::$170 k2::$171 x2::$172 t1::$173 t2::$174 ->
            (bin81 [] k2 x2 t1 (bin81 [] k1 x1 t2 t3))
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleL80 :: forall u:b. (Int -> u:b -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]))
singleL80 k1 x1 t1 m =
    case m of
        Bin95 wildcard_159::$160 k2::$161 x2::$162 t2::$163 t3::$164 ->
            (bin81 [] k2 x2 (bin81 [] k1 x1 t1 t2) t3)
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
bin81 :: forall u:a. (Int -> u:a -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]))
bin81 k x l r =
    (Bin95 $154 (size91 [] l) + (size91 [] r) + 1 k x l r)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
rotateR82 :: forall u:b. (Int -> u:b -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]))
rotateR82 k x l r =
    case l of
        Bin95 wildcard_142::$145 wildcard_143::$146 wildcard_144::$147 ly::$148 ry::$149 ->
            if (size91 [] ry) < (ratio85 []) * (size91 [] ly)
            then (singleR79 [] k x l r)
            else (doubleR77 [] k x l r)
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
rotateL83 :: forall u:b. (Int -> u:b -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]) -> (Packed Map93 [u:b]))
rotateL83 k x l r =
    case r of
        Bin95 wildcard_130::$133 wildcard_131::$134 wildcard_132::$135 ly::$136 ry::$137 ->
            if (size91 [] ly) < (ratio85 []) * (size91 [] ry)
            then (singleL80 [] k x l r)
            else (doubleL78 [] k x l r)
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
balance84 :: forall u:a. (Int -> u:a -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]))
balance84 k x l r =
    if <=((size91 [] l) + (size91 [] r), 1)
    then (Bin95 $124 (size91 [] l) + (size91 [] r) k x l r)
    else if >=((size91 [] r), (delta86 []) * (size91 [] l))
         then (rotateL83 [] k x l r)
         else if >=((size91 [] l), (delta86 []) * (size91 [] r))
              then (rotateR82 [] k x l r)
              else (Bin95 $125 (size91 [] l) + (size91 [] r) k x l r)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
ratio85 :: forall. (Int)
ratio85 =
    2

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
delta86 :: forall. (Int)
delta86 =
    4

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
deleteFindMax87 :: forall u:a. ((Packed Map93 [u:a]) -> (Packed Maybe97 [((Int,u:a),(Packed Map93 [u:a]))]))
deleteFindMax87 t =
    case t of
        Tip94 ->
            (Nothing103 $101)
        Bin95 wildcard_102::$115 k::$116 x::$117 l::$118 r::$119 ->
            case r of
                Tip94 ->
                    (Just104 $103 ((k, x), l))
                _default ->
                    case (deleteFindMax87 [] r) of
                        Nothing103 ->
                            (Nothing103 $104)
                        Just104 res::$114 ->
                            let tup110 :: $111 = res in
                            let kv :: $113 = (#0 tup110) in
                            let r' :: $112 = (#1 tup110) in
                            let tup106 :: $107 = kv in
                            let delk :: $109 = (#0 tup106) in
                            let delv :: $108 = (#1 tup106) in
                            (Just104 $105 ((delk, delv), (balance84 [] k x l r')))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
deleteFindMin88 :: forall u:a. ((Packed Map93 [u:a]) -> (Packed Maybe97 [((Int,u:a),(Packed Map93 [u:a]))]))
deleteFindMin88 t =
    case t of
        Tip94 ->
            (Nothing103 $81)
        Bin95 wildcard_82::$95 k::$96 x::$97 l::$98 r::$99 ->
            case l of
                Tip94 ->
                    (Just104 $83 ((k, x), r))
                _default ->
                    case (deleteFindMin88 [] l) of
                        Nothing103 ->
                            (Nothing103 $84)
                        Just104 res::$94 ->
                            let tup90 :: $91 = res in
                            let kv :: $93 = (#0 tup90) in
                            let l' :: $92 = (#1 tup90) in
                            let tup86 :: $87 = kv in
                            let delk :: $89 = (#0 tup86) in
                            let delv :: $88 = (#1 tup86) in
                            (Just104 $85 ((delk, delv), (balance84 [] k x l' r)))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
glue89 :: forall u:a. ((Packed Map93 [u:a]) -> (Packed Map93 [u:a]) -> (Packed Map93 [u:a]))
glue89 l r =
    case l of
        Tip94 ->
            r
        Bin95 wildcard_70::$75 wildcard_71::$76 wildcard_72::$77 wildcard_73::$78 wildcard_74::$79 ->
            l

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
member90 :: forall u:a. (Int -> (Packed Map93 [u:a]) -> Bool)
member90 k m =
    case (lookup73 [] k m) of
        Nothing103 ->
            False
        Just104 wildcard_49::$50 ->
            True

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
size91 :: forall u:a. ((Packed Map93 [u:a]) -> Int)
size91 m =
    case m of
        Tip94 ->
            0
        Bin95 sz::$22 wildcard_18::$23 wildcard_19::$24 wildcard_20::$25 wildcard_21::$26 ->
            sz

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
null92 :: forall u:a. ((Packed Map93 [u:a]) -> Bool)
null92 m =
    case m of
        Tip94 ->
            True
        Bin95 wildcard_7::$12 wildcard_8::$13 wildcard_9::$14 wildcard_10::$15 wildcard_11::$16 ->
            False

gibbon_main :: $214
gibbon_main = (insert72 [] 0 let vec207 :: Vector Char = (valloc :: [Char])(1) in
                             let _ :: Vector Char = inplacevupdate(vec207, 0, 'f') in
                             vec207 (insert72 [] 5 let vec208 :: Vector Char = (valloc :: [Char])(1) in
                                                   let _ :: Vector Char = inplacevupdate(vec208, 0, 'f') in
                                                   vec208 (insert72 [] 4 let vec209 :: Vector Char = (valloc :: [Char])(1) in
                                                                         let _ :: Vector Char = inplacevupdate(vec209, 0, 'e') in
                                                                         vec209 (insert72 [] 3 let vec210 :: Vector Char = (valloc :: [Char])(1) in
                                                                                               let _ :: Vector Char = inplacevupdate(vec210, 0, 'd') in
                                                                                               vec210 (insert72 [] 2 let vec211 :: Vector Char = (valloc :: [Char])(1) in
                                                                                                                     let _ :: Vector Char = inplacevupdate(vec211, 0, 'c') in
                                                                                                                     vec211 (insert72 [] 1 let vec212 :: Vector Char = (valloc :: [Char])(1) in
                                                                                                                                           let _ :: Vector Char = inplacevupdate(vec212, 0, 'b') in
                                                                                                                                           vec212 (insert72 [] 0 let vec213 :: Vector Char = (valloc :: [Char])(1) in
                                                                                                                                                                 let _ :: Vector Char = inplacevupdate(vec213, 0, 'a') in
                                                                                                                                                                 vec213 (empty76 []))))))))
data Maybe97 u:a = Nothing103 | 
                   Just104 u:a
data Ord98 = Lt99 | 
             Gt100 | 
             Eq101 | 
             Cc102
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
compareInt96 :: forall. (Int -> Int -> (Packed Ord98 []))
compareInt96 a b =
    let sub :: $6 = a - b in
    if sub < 0
    then (Lt99 $2)
    else if sub > 0
         then (Gt100 $3)
         else if sub == 0
              then (Eq101 $4)
              else (Cc102 $5)

data Clock111 = Clk114 (Packed Map93 [Int])
data Timestamp112 = Timestamp113 Int (Packed Clock111 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
init105 :: forall. (Int -> (Packed Clock111 []))
init105 uid =
    (singleton71 [] uid 0)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
step106 :: forall. (Int -> (Packed Clock111 []) -> (Packed Clock111 []))
step106 uid clk =
    case (lookup73 [] uid clk) of
        Just104 v::$11 ->
            (insert72 [] uid v + 1 clk)
        Nothing103 ->
            (insert72 [] uid 1 clk)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
stamp107 :: forall. (Int -> (Packed Clock111 []) -> (Packed Timestamp112 []))
stamp107 uid clk =
    (Timestamp113 $14 uid clk)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
clock108 :: forall. ((Packed Timestamp112 []) -> (Packed Clock111 []))
clock108 t =
    case t of
        Timestamp113 wildcard_1::$2 c::$3 ->
            c

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
compare109 :: forall. ((Packed Clock111 []) -> (Packed Clock111 []) -> (Packed Ord98 []))
compare109 a b =
    case a of
        Tip94 ->
            case b of
                Tip94 ->
                    (Eq101 $17)
                Bin95 wildcard_18::$24 wildcard_19::$25 wildcard_20::$26 wildcard_21::$27 wildcard_22::$28 ->
                    (Lt99 $23)
        Bin95 wildcard_29::$64 wildcard_30::$65 wildcard_31::$66 wildcard_32::$67 wildcard_33::$68 ->
            case b of
                Tip94 ->
                    (Gt100 $34)
                Bin95 wildcard_35::$59 wildcard_36::$60 wildcard_37::$61 wildcard_38::$62 wildcard_39::$63 ->
                    let k :: $58 = (key75 [] a) in
                    let diff :: $57 = case (lookup73 [] k a) of
                                          Nothing103 ->
                                              case (lookup73 [] k b) of
                                                  Nothing103 ->
                                                      (Eq101 $50)
                                                  Just104 wildcard_51::$53 ->
                                                      (Lt99 $52)
                                          Just104 ax::$56 ->
                                              case (lookup73 [] k b) of
                                                  Nothing103 ->
                                                      (Gt100 $54)
                                                  Just104 bx::$55 ->
                                                      (compareInt96 [] ax bx) in
                    let comp :: $49 = (compare109 [] (delete74 [] k a) (delete74 [] k b)) in
                    case diff of
                        Lt99 ->
                            case diff of
                                Lt99 ->
                                    (Lt99 $40)
                                Eq101 ->
                                    (Lt99 $41)
                                _default ->
                                    (Cc102 $42)
                        Gt100 ->
                            case diff of
                                Gt100 ->
                                    (Gt100 $43)
                                Eq101 ->
                                    (Gt100 $44)
                                _default ->
                                    (Cc102 $45)
                        Eq101 ->
                            case diff of
                                Eq101 ->
                                    (Eq101 $46)
                                _default ->
                                    (Cc102 $47)
                        Cc102 ->
                            (Cc102 $48)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
author110 :: forall. ((Packed Timestamp112 []) -> Int)
author110 t =
    case t of
        Timestamp113 a::$6 wildcard_5::$7 ->
            a


 [compiler] Running pass, freshen
Pass output:
================================================================================
data IntOrSet52 = OrSet53 (Packed Clock111 []) (Packed Map93 [(Packed Timestamp112 [])]) (Packed IntSet68 [(Packed Timestamp112 [])])
data IntSet68 = PureSet69 Int Int (Packed IntSet68 []) (Packed IntSet68 []) | 
                EmptySet70
data Map93 b:a115 = Tip94 | 
                    Bin95 Int Int b:a115 (Packed Map93 [b:a115]) (Packed Map93 [b:a115])
data Maybe97 b:a116 = Nothing103 | 
                      Just104 b:a116
data Ord98 = Lt99 | 
             Gt100 | 
             Eq101 | 
             Cc102
data Clock111 = Clk114 (Packed Map93 [Int])
data Timestamp112 = Timestamp113 Int (Packed Clock111 [])
{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
getClock44 :: forall. ((Packed IntOrSet52 []) -> (Packed Clock111 []))
getClock44 x117 =
    case x117 of
        OrSet53 clk118::$4 wildcard_1119::$5 wildcard_2120::$6 wildcard_3121::$7 ->
            clk118

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
buildValue45 :: forall. ((Packed Map93 [(Packed Timestamp112 [])]) -> (Packed IntSet68 []) -> (Packed IntSet68 []))
buildValue45 m122 s123 =
    case m122 of
        Tip94 ->
            s123
        Bin95 wildcard_38124::$39 k125::$40 v126::$41 l127::$42 r128::$43 ->
            (buildValue45 [] r128 (insert55 [] k125 (buildValue45 [] r128 s123)))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
value46 :: forall. ((Packed IntOrSet52 []) -> (Packed IntSet68 []))
value46 x129 =
    (buildValue45 [] (getState51 [] x129) empty56)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
remove47 :: forall. ((Packed Timestamp112 []) -> Int -> (Packed IntOrSet52 []) -> (Packed IntOrSet52 []))
remove47 el130 s131 =
    let clk132 :: $34 = (getClock44 [] s131) in
    case (lookup73 [] el130 (getState51 [] s131)) of
        Just104 timestamp133::$33 ->
            (OrSet53 $32 (step106 [] uid clk132) (delete74 [] el130 (getState51 [] s131)) (insert72 [] timestamp133 (getDelSet50 [] s131)))
        Nothing103 ->
            s131

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
add48 :: forall. ((Packed Timestamp112 []) -> Int -> (Packed IntOrSet52 []) -> (Packed IntOrSet52 []))
add48 el134 s135 =
    let clk136 :: $29 = (getClock44 [] s135) in
    let timestamp137 :: $28 = (lookup73 [] el134 (getState51 [] s135)) in
    (OrSet53 $26 (step106 [] uid clk136) (insert72 [] el134 (stamp107 [] uid clk136) (getState51 [] s135)) case timestamp137 of
                                                                                                               Just104 timestamp138::$27 ->
                                                                                                                   (insert72 [] timestamp138 (getDelSet50 [] s135))
                                                                                                               Nothing103 ->
                                                                                                                   (getDelSet50 [] s135))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
init105 :: forall. ((Packed Timestamp112 []) -> Int -> (Packed IntOrSet52 []))
init105 uid139 el140 =
    let clk141 :: $23 = (init105 [] uid139) in
    (OrSet53 $22 (step106 [] uid139 clk141) (singleton71 [] el140 (stamp107 [] uid139 clk141)) empty56)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
getDelSet50 :: forall. ((Packed IntOrSet52 []) -> (Packed IntSet68 [(Packed Timestamp112 [])]))
getDelSet50 x142 =
    case x142 of
        OrSet53 wildcard_15143::$17 wildcard_16144::$18 delset145::$19 ->
            delset145

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
getState51 :: forall. ((Packed IntOrSet52 []) -> (Packed Map93 [(Packed Timestamp112 [])]))
getState51 x146 =
    case x146 of
        OrSet53 wildcard_9147::$11 s148::$12 wildcard_10149::$13 ->
            s148
        _default ->
            empty76

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleton54 :: forall. (Int -> (Packed IntSet68 []))
singleton54 x150 =
    (PureSet69 $2 1 x150 (EmptySet70 $3) (EmptySet70 $4))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
insert55 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []))
insert55 x151 s152 =
    case s152 of
        EmptySet70 ->
            (singleton54 [] x151)
        PureSet69 sz153::$9 v154::$10 l155::$11 r156::$12 ->
            if x151 == v154
            then s152
            else if <=(x151, v154)
                 then let nl157 :: $7 = (insert55 [] x151 l155) in
                      (balanceL67 [] v154 nl157 r156)
                 else let nr158 :: $8 = (insert55 [] x151 r156) in
                      (balanceR66 [] v154 l155 nr158)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
empty56 :: forall. ((Packed IntSet68 []))
empty56 =
    (EmptySet70 $0)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
member57 :: forall. (Int -> (Packed IntSet68 []) -> Bool)
member57 x159 s160 =
    case s160 of
        EmptySet70 ->
            False
        PureSet69 wildcard_146161::$147 v162::$148 l163::$149 r164::$150 ->
            if x159 == v162
            then True
            else if <=(x159, v162)
                 then (member57 [] x159 l163)
                 else (member57 [] x159 r164)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
size58 :: forall. ((Packed IntSet68 []) -> Int)
size58 s165 =
    case s165 of
        EmptySet70 ->
            0
        PureSet69 sz166::$163 wildcard_160167::$164 wildcard_161168::$165 wildcard_162169::$166 ->
            sz166

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
null59 :: forall. ((Packed IntSet68 []) -> Bool)
null59 s170 =
    case s170 of
        EmptySet70 ->
            True
        PureSet69 wildcard_136171::$140 wildcard_137172::$141 wildcard_138173::$142 wildcard_139174::$143 ->
            False

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
sum60 :: forall. ((Packed IntSet68 []) -> Int)
sum60 s175 =
    case s175 of
        EmptySet70 ->
            0
        PureSet69 wildcard_196176::$197 v177::$198 l178::$199 r179::$200 ->
            v177 + (sum60 [] l178) + (sum60 [] r179)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
insert_num61 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []))
insert_num61 x180 s181 =
    if x180 == 0
    then (insert55 [] x180 s181)
    else (insert55 [] x180 (insert_num61 [] x180 - 1 s181))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
right62 :: forall. ((Packed IntSet68 []) -> (Packed IntSet68 []))
right62 x182 =
    case x182 of
        EmptySet70 ->
            (EmptySet70 $185)
        PureSet69 wildcard_186183::$189 wildcard_187184::$190 wildcard_188185::$191 r186::$192 ->
            r186

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
left63 :: forall. ((Packed IntSet68 []) -> (Packed IntSet68 []))
left63 x187 =
    case x187 of
        EmptySet70 ->
            (EmptySet70 $176)
        PureSet69 wildcard_177188::$180 wildcard_178189::$181 l190::$182 wildcard_179191::$183 ->
            l190

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
val64 :: forall. ((Packed IntSet68 []) -> Int)
val64 x192 =
    case x192 of
        EmptySet70 ->
            0
        PureSet69 wildcard_168193::$171 v194::$172 wildcard_169195::$173 wildcard_170196::$174 ->
            v194

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
depth65 :: forall. (Int -> Int -> (Packed IntSet68 []) -> Int)
depth65 x197 c198 s199 =
    case s199 of
        EmptySet70 ->
            0 - 1
        PureSet69 wildcard_154200::$155 v201::$156 l202::$157 r203::$158 ->
            if x197 == v201
            then c198 + 1
            else if <=(x197, v201)
                 then (depth65 [] x197 c198 + 1 l202)
                 else (depth65 [] x197 c198 + 1 r203)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
balanceR66 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []) -> (Packed IntSet68 []))
balanceR66 x204 l205 r206 =
    case l205 of
        EmptySet70 ->
            case r206 of
                EmptySet70 ->
                    (PureSet69 $77 1 x204 (EmptySet70 $78) (EmptySet70 $79))
                PureSet69 rs207::$112 rx208::$113 rl209::$114 rr210::$115 ->
                    case rr210 of
                        PureSet69 rrs211::$95 rrx212::$96 rrl213::$97 rrr214::$98 ->
                            case rl209 of
                                PureSet69 rls215::$87 rlx216::$88 rll217::$89 rlr218::$90 ->
                                    if (size58 [] rl209) < 2 * (size58 [] rr210)
                                    then (PureSet69 $80 1 + rs207 rx208 (PureSet69 $81 1 + (size58 [] rl209) x204 (EmptySet70 $82) rl209) rr210)
                                    else (PureSet69 $83 1 + rs207 (val64 [] rl209) (PureSet69 $84 1 + (size58 [] (left63 [] rl209)) x204 (EmptySet70 $85) (left63 [] rl209)) (PureSet69 $86 1 + (size58 [] rr210) + (size58 [] (right62 [] rl209)) rx208 (right62 [] rl209) rr210))
                                EmptySet70 ->
                                    (PureSet69 $91 3 rx208 (PureSet69 $92 1 x204 (EmptySet70 $93) (EmptySet70 $94)) rr210)
                        EmptySet70 ->
                            case rl209 of
                                PureSet69 rls219::$106 rlx220::$107 rll221::$108 rlr222::$109 ->
                                    (PureSet69 $99 3 (val64 [] rl209) (PureSet69 $100 1 x204 (EmptySet70 $101) (EmptySet70 $102)) (PureSet69 $103 1 rx208 (EmptySet70 $104) (EmptySet70 $105)))
                                EmptySet70 ->
                                    (PureSet69 $110 2 x204 (EmptySet70 $111) r206)
        PureSet69 ls223::$131 wildcard_116224::$132 wildcard_117225::$133 wildcard_118226::$134 ->
            case r206 of
                EmptySet70 ->
                    (PureSet69 $119 1 + ls223 x204 l205 (EmptySet70 $120))
                PureSet69 rs227::$127 rx228::$128 rl229::$129 rr230::$130 ->
                    if rs227 > 3 * ls223
                    then if (size58 [] rl229) < 2 * (size58 [] rr230)
                         then (PureSet69 $121 1 + ls223 + rs227 rx228 (PureSet69 $122 1 + ls223 + (size58 [] rl229) x204 l205 rl229) rr230)
                         else (PureSet69 $123 1 + ls223 + rs227 (val64 [] rl229) (PureSet69 $124 1 + ls223 + (size58 [] (left63 [] rl229)) x204 l205 (left63 [] rl229)) (PureSet69 $125 1 + (size58 [] rr230) + (size58 [] (right62 [] rl229)) rx228 (right62 [] rl229) rr230))
                    else (PureSet69 $126 1 + ls223 + rs227 x204 l205 r206)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
balanceL67 :: forall. (Int -> (Packed IntSet68 []) -> (Packed IntSet68 []) -> (Packed IntSet68 []))
balanceL67 x231 l232 r233 =
    case r233 of
        EmptySet70 ->
            case l232 of
                EmptySet70 ->
                    (PureSet69 $16 1 x231 (EmptySet70 $17) (EmptySet70 $18))
                PureSet69 ls234::$51 lx235::$52 ll236::$53 lr237::$54 ->
                    case ll236 of
                        PureSet69 lls238::$34 llx239::$35 lll240::$36 llr241::$37 ->
                            case lr237 of
                                PureSet69 lrs242::$26 lrx243::$27 lrl244::$28 lrr245::$29 ->
                                    if lrs242 < 2 * lls238
                                    then (PureSet69 $19 1 + ls234 lx235 ll236 (PureSet69 $20 1 + lrs242 x231 lr237 (EmptySet70 $21)))
                                    else (PureSet69 $22 1 + ls234 lrx243 (PureSet69 $23 1 + lls238 + (size58 [] lrl244) lx235 ll236 lrl244) (PureSet69 $24 1 + (size58 [] lrr245) x231 lrr245 (EmptySet70 $25)))
                                EmptySet70 ->
                                    (PureSet69 $30 3 lx235 ll236 (PureSet69 $31 1 x231 (EmptySet70 $32) (EmptySet70 $33)))
                        EmptySet70 ->
                            case lr237 of
                                PureSet69 lrs246::$45 lrx247::$46 lrl248::$47 lrr249::$48 ->
                                    (PureSet69 $38 3 lrx247 (PureSet69 $39 1 lx235 (EmptySet70 $40) (EmptySet70 $41)) (PureSet69 $42 1 x231 (EmptySet70 $43) (EmptySet70 $44)))
                                EmptySet70 ->
                                    (PureSet69 $49 2 x231 l232 (EmptySet70 $50))
        PureSet69 rs250::$70 wildcard_55251::$71 wildcard_56252::$72 wildcard_57253::$73 ->
            case l232 of
                EmptySet70 ->
                    (PureSet69 $58 1 + rs250 x231 (EmptySet70 $59) r233)
                PureSet69 ls254::$66 lx255::$67 ll256::$68 lr257::$69 ->
                    if ls254 > 3 * rs250
                    then if (size58 [] lr257) < 2 * (size58 [] ll256)
                         then (PureSet69 $60 1 + ls254 + rs250 lx255 ll256 (PureSet69 $61 1 + rs250 + (size58 [] lr257) x231 lr257 r233))
                         else (PureSet69 $62 1 + ls254 + rs250 (val64 [] lr257) (PureSet69 $63 1 + (size58 [] ll256) + (size58 [] (left63 [] lr257)) lx255 ll256 (left63 [] lr257)) (PureSet69 $64 1 + rs250 + (size58 [] (right62 [] lr257)) x231 (right62 [] lr257) r233))
                    else (PureSet69 $65 1 + ls254 + rs250 x231 l232 r233)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleton71 :: forall b:a260. (Int -> b:a260 -> (Packed Map93 [b:a260]))
singleton71 k258 x259 =
    (Bin95 $3 1 k258 x259 (Tip94 $4) (Tip94 $5))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
insert72 :: forall b:a264. (Int -> b:a264 -> (Packed Map93 [b:a264]) -> (Packed Map93 [b:a264]))
insert72 kx261 x262 m263 =
    case m263 of
        Tip94 ->
            (singleton71 [] kx261 x262)
        Bin95 sz265::$55 k266::$56 v267::$57 l268::$58 r269::$59 ->
            if kx261 == k266
            then (Bin95 $54 sz265 k266 x262 l268 r269)
            else if <=(kx261, k266)
                 then (balance84 [] k266 v267 (insert72 [] kx261 x262 l268) r269)
                 else (balance84 [] k266 v267 l268 (insert72 [] kx261 x262 r269))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
lookup73 :: forall b:a272. (Int -> (Packed Map93 [b:a272]) -> (Packed Maybe97 [b:a272]))
lookup73 k270 m271 =
    case m271 of
        Tip94 ->
            (Nothing103 $39)
        Bin95 wildcard_40273::$42 kx274::$43 v275::$44 l276::$45 r277::$46 ->
            if k270 < kx274
            then (lookup73 [] k270 l276)
            else if k270 > kx274
                 then (lookup73 [] k270 r277)
                 else (Just104 $41 v275)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
delete74 :: forall b:a280. (Int -> (Packed Map93 [b:a280]) -> (Packed Map93 [b:a280]))
delete74 kx278 m279 =
    case m279 of
        Tip94 ->
            (Tip94 $62)
        Bin95 sz281::$63 k282::$64 v283::$65 l284::$66 r285::$67 ->
            if kx278 == k282
            then (glue89 [] l284 r285)
            else if <=(kx278, k282)
                 then (balance84 [] kx278 v283 (delete74 [] kx278 l284) r285)
                 else (balance84 [] kx278 v283 l284 (delete74 [] kx278 r285))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
key75 :: forall b:a287. ((Packed Map93 [b:a287]) -> Int)
key75 s286 =
    case s286 of
        Tip94 ->
            0
        Bin95 wildcard_28288::$32 k289::$33 wildcard_29290::$34 wildcard_30291::$35 wildcard_31292::$36 ->
            k289

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
empty76 :: forall b:a293. ((Packed Map93 [b:a293]))
empty76 =
    (Tip94 $0)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
doubleR77 :: forall b:b298. (Int -> b:b298 -> (Packed Map93 [b:b298]) -> (Packed Map93 [b:b298]) -> (Packed Map93 [b:b298]))
doubleR77 k1294 x1295 m0296 t4297 =
    case m0296 of
        Bin95 wildcard_195299::$202 k2300::$203 x2301::$204 t1302::$205 m1303::$206 ->
            case m1303 of
                Bin95 wildcard_196304::$197 k3305::$198 x3306::$199 t2307::$200 t3308::$201 ->
                    (bin81 [] k3305 x3306 (bin81 [] k2300 x2301 t1302 t2307) (bin81 [] k1294 x1295 t3308 t4297))
                Tip94 ->
                    (empty76 [])
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
doubleL78 :: forall b:b313. (Int -> b:b313 -> (Packed Map93 [b:b313]) -> (Packed Map93 [b:b313]) -> (Packed Map93 [b:b313]))
doubleL78 k1309 x1310 t1311 m0312 =
    case m0312 of
        Bin95 wildcard_179314::$186 k2315::$187 x2316::$188 m1317::$189 t4318::$190 ->
            case m1317 of
                Bin95 wildcard_180319::$181 k3320::$182 x3321::$183 t2322::$184 t3323::$185 ->
                    (bin81 [] k3320 x3321 (bin81 [] k1309 x1310 t1311 t2322) (bin81 [] k2315 x2316 t3323 t4318))
                Tip94 ->
                    (empty76 [])
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleR79 :: forall b:b328. (Int -> b:b328 -> (Packed Map93 [b:b328]) -> (Packed Map93 [b:b328]) -> (Packed Map93 [b:b328]))
singleR79 k1324 x1325 m326 t3327 =
    case m326 of
        Bin95 wildcard_169329::$170 k2330::$171 x2331::$172 t1332::$173 t2333::$174 ->
            (bin81 [] k2330 x2331 t1332 (bin81 [] k1324 x1325 t2333 t3327))
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
singleL80 :: forall b:b338. (Int -> b:b338 -> (Packed Map93 [b:b338]) -> (Packed Map93 [b:b338]) -> (Packed Map93 [b:b338]))
singleL80 k1334 x1335 t1336 m337 =
    case m337 of
        Bin95 wildcard_159339::$160 k2340::$161 x2341::$162 t2342::$163 t3343::$164 ->
            (bin81 [] k2340 x2341 (bin81 [] k1334 x1335 t1336 t2342) t3343)
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
bin81 :: forall b:a348. (Int -> b:a348 -> (Packed Map93 [b:a348]) -> (Packed Map93 [b:a348]) -> (Packed Map93 [b:a348]))
bin81 k344 x345 l346 r347 =
    (Bin95 $154 (size91 [] l346) + (size91 [] r347) + 1 k344 x345 l346 r347)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
rotateR82 :: forall b:b353. (Int -> b:b353 -> (Packed Map93 [b:b353]) -> (Packed Map93 [b:b353]) -> (Packed Map93 [b:b353]))
rotateR82 k349 x350 l351 r352 =
    case l351 of
        Bin95 wildcard_142354::$145 wildcard_143355::$146 wildcard_144356::$147 ly357::$148 ry358::$149 ->
            if (size91 [] ry358) < (ratio85 []) * (size91 [] ly357)
            then (singleR79 [] k349 x350 l351 r352)
            else (doubleR77 [] k349 x350 l351 r352)
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
rotateL83 :: forall b:b363. (Int -> b:b363 -> (Packed Map93 [b:b363]) -> (Packed Map93 [b:b363]) -> (Packed Map93 [b:b363]))
rotateL83 k359 x360 l361 r362 =
    case r362 of
        Bin95 wildcard_130364::$133 wildcard_131365::$134 wildcard_132366::$135 ly367::$136 ry368::$137 ->
            if (size91 [] ly367) < (ratio85 []) * (size91 [] ry368)
            then (singleL80 [] k359 x360 l361 r362)
            else (doubleL78 [] k359 x360 l361 r362)
        Tip94 ->
            (empty76 [])

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
balance84 :: forall b:a373. (Int -> b:a373 -> (Packed Map93 [b:a373]) -> (Packed Map93 [b:a373]) -> (Packed Map93 [b:a373]))
balance84 k369 x370 l371 r372 =
    if <=((size91 [] l371) + (size91 [] r372), 1)
    then (Bin95 $124 (size91 [] l371) + (size91 [] r372) k369 x370 l371 r372)
    else if >=((size91 [] r372), (delta86 []) * (size91 [] l371))
         then (rotateL83 [] k369 x370 l371 r372)
         else if >=((size91 [] l371), (delta86 []) * (size91 [] r372))
              then (rotateR82 [] k369 x370 l371 r372)
              else (Bin95 $125 (size91 [] l371) + (size91 [] r372) k369 x370 l371 r372)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
ratio85 :: forall. (Int)
ratio85 =
    2

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
delta86 :: forall. (Int)
delta86 =
    4

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
deleteFindMax87 :: forall b:a375. ((Packed Map93 [b:a375]) -> (Packed Maybe97 [((Int,b:a375),(Packed Map93 [b:a375]))]))
deleteFindMax87 t374 =
    case t374 of
        Tip94 ->
            (Nothing103 $101)
        Bin95 wildcard_102376::$115 k377::$116 x378::$117 l379::$118 r380::$119 ->
            case r380 of
                Tip94 ->
                    (Just104 $103 ((k377, x378), l379))
                _default ->
                    case (deleteFindMax87 [] r380) of
                        Nothing103 ->
                            (Nothing103 $104)
                        Just104 res381::$114 ->
                            let tup110382 :: $111 = res381 in
                            let kv383 :: $113 = (#0 tup110382) in
                            let r_384 :: $112 = (#1 tup110382) in
                            let tup106385 :: $107 = kv383 in
                            let delk386 :: $109 = (#0 tup106385) in
                            let delv387 :: $108 = (#1 tup106385) in
                            (Just104 $105 ((delk386, delv387), (balance84 [] k377 x378 l379 r_384)))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
deleteFindMin88 :: forall b:a389. ((Packed Map93 [b:a389]) -> (Packed Maybe97 [((Int,b:a389),(Packed Map93 [b:a389]))]))
deleteFindMin88 t388 =
    case t388 of
        Tip94 ->
            (Nothing103 $81)
        Bin95 wildcard_82390::$95 k391::$96 x392::$97 l393::$98 r394::$99 ->
            case l393 of
                Tip94 ->
                    (Just104 $83 ((k391, x392), r394))
                _default ->
                    case (deleteFindMin88 [] l393) of
                        Nothing103 ->
                            (Nothing103 $84)
                        Just104 res395::$94 ->
                            let tup90396 :: $91 = res395 in
                            let kv397 :: $93 = (#0 tup90396) in
                            let l_398 :: $92 = (#1 tup90396) in
                            let tup86399 :: $87 = kv397 in
                            let delk400 :: $89 = (#0 tup86399) in
                            let delv401 :: $88 = (#1 tup86399) in
                            (Just104 $85 ((delk400, delv401), (balance84 [] k391 x392 l_398 r394)))

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
glue89 :: forall b:a404. ((Packed Map93 [b:a404]) -> (Packed Map93 [b:a404]) -> (Packed Map93 [b:a404]))
glue89 l402 r403 =
    case l402 of
        Tip94 ->
            r403
        Bin95 wildcard_70405::$75 wildcard_71406::$76 wildcard_72407::$77 wildcard_73408::$78 wildcard_74409::$79 ->
            l402

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
member90 :: forall b:a412. (Int -> (Packed Map93 [b:a412]) -> Bool)
member90 k410 m411 =
    case (lookup73 [] k410 m411) of
        Nothing103 ->
            False
        Just104 wildcard_49413::$50 ->
            True

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
size91 :: forall b:a415. ((Packed Map93 [b:a415]) -> Int)
size91 m414 =
    case m414 of
        Tip94 ->
            0
        Bin95 sz416::$22 wildcard_18417::$23 wildcard_19418::$24 wildcard_20419::$25 wildcard_21420::$26 ->
            sz416

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
null92 :: forall b:a422. ((Packed Map93 [b:a422]) -> Bool)
null92 m421 =
    case m421 of
        Tip94 ->
            True
        Bin95 wildcard_7423::$12 wildcard_8424::$13 wildcard_9425::$14 wildcard_10426::$15 wildcard_11427::$16 ->
            False

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
compareInt96 :: forall. (Int -> Int -> (Packed Ord98 []))
compareInt96 a428 b429 =
    let sub430 :: $6 = a428 - b429 in
    if sub430 < 0
    then (Lt99 $2)
    else if sub430 > 0
         then (Gt100 $3)
         else if sub430 == 0
              then (Eq101 $4)
              else (Cc102 $5)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
init105 :: forall. (Int -> (Packed Clock111 []))
init105 uid431 =
    (singleton71 [] uid431 0)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
step106 :: forall. (Int -> (Packed Clock111 []) -> (Packed Clock111 []))
step106 uid432 clk433 =
    case (lookup73 [] uid432 clk433) of
        Just104 v434::$11 ->
            (insert72 [] uid432 v434 + 1 clk433)
        Nothing103 ->
            (insert72 [] uid432 1 clk433)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
stamp107 :: forall. (Int -> (Packed Clock111 []) -> (Packed Timestamp112 []))
stamp107 uid435 clk436 =
    (Timestamp113 $14 uid435 clk436)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
clock108 :: forall. ((Packed Timestamp112 []) -> (Packed Clock111 []))
clock108 t437 =
    case t437 of
        Timestamp113 wildcard_1438::$2 c439::$3 ->
            c439

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
compare109 :: forall. ((Packed Clock111 []) -> (Packed Clock111 []) -> (Packed Ord98 []))
compare109 a440 b441 =
    case a440 of
        Tip94 ->
            case b441 of
                Tip94 ->
                    (Eq101 $17)
                Bin95 wildcard_18442::$24 wildcard_19443::$25 wildcard_20444::$26 wildcard_21445::$27 wildcard_22446::$28 ->
                    (Lt99 $23)
        Bin95 wildcard_29447::$64 wildcard_30448::$65 wildcard_31449::$66 wildcard_32450::$67 wildcard_33451::$68 ->
            case b441 of
                Tip94 ->
                    (Gt100 $34)
                Bin95 wildcard_35452::$59 wildcard_36453::$60 wildcard_37454::$61 wildcard_38455::$62 wildcard_39456::$63 ->
                    let k457 :: $58 = (key75 [] a440) in
                    let diff461 :: $57 = case (lookup73 [] k457 a440) of
                                             Nothing103 ->
                                                 case (lookup73 [] k457 b441) of
                                                     Nothing103 ->
                                                         (Eq101 $50)
                                                     Just104 wildcard_51458::$53 ->
                                                         (Lt99 $52)
                                             Just104 ax459::$56 ->
                                                 case (lookup73 [] k457 b441) of
                                                     Nothing103 ->
                                                         (Gt100 $54)
                                                     Just104 bx460::$55 ->
                                                         (compareInt96 [] ax459 bx460) in
                    let comp462 :: $49 = (compare109 [] (delete74 [] k457 a440) (delete74 [] k457 b441)) in
                    case diff461 of
                        Lt99 ->
                            case diff461 of
                                Lt99 ->
                                    (Lt99 $40)
                                Eq101 ->
                                    (Lt99 $41)
                                _default ->
                                    (Cc102 $42)
                        Gt100 ->
                            case diff461 of
                                Gt100 ->
                                    (Gt100 $43)
                                Eq101 ->
                                    (Gt100 $44)
                                _default ->
                                    (Cc102 $45)
                        Eq101 ->
                            case diff461 of
                                Eq101 ->
                                    (Eq101 $46)
                                _default ->
                                    (Cc102 $47)
                        Cc102 ->
                            (Cc102 $48)

{meta: FunMeta {funRec = NotRec, funInline = NoInline, funCanTriggerGC = False, funOptLayout = NoLayoutOpt, userConstraintsDataCon = Nothing}}
author110 :: forall. ((Packed Timestamp112 []) -> Int)
author110 t463 =
    case t463 of
        Timestamp113 a464::$6 wildcard_5465::$7 ->
            a464


 [compiler] Running pass, typecheck
unify: Catch-all _; failed to unify PackedTy "IntSet68" [] with ArrowTy [] (PackedTy "IntSet68" [])
gibbon: L0.Typecheck: 
    Couldn't match type 'ArrowTy []
                                 (PackedTy "IntSet68" [])' with 'PackedTy "IntSet68" []'
    Expected type: PackedTy "IntSet68" []
    Actual type: ArrowTy [] (PackedTy "IntSet68" [])
    In the expression: 
      AppE "buildValue45"
           []
           [AppE "getState51" [] [VarE "x129"],VarE "empty56"] in Var "value46"
CallStack (from HasCallStack):
  error, called at src/Gibbon/L0/Typecheck.hs:94:18 in gibbon-0.3-inplace:Gibbon.L0.Typecheck
